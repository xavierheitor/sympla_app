import 'package:drift/drift.dart';
import 'package:sympla_app/core/logger/app_logger.dart';
import 'package:sympla_app/core/storage/app_database.dart';
import 'package:sympla_app/core/storage/tables/schema.dart';

part 'mpbb_ddao.g.dart';

/// DAO respons√°vel pelas opera√ß√µes do m√≥dulo de banco de baterias (MPBB).
@DriftAccessor(tables: [FormularioBateriaTable, MedicaoElementoBateriaTable])
class MpbbDao extends DatabaseAccessor<AppDatabase> with _$MpbbDaoMixin {
  MpbbDao(super.db);

  /// Insere ou atualiza um formul√°rio de banco de baterias.
  Future<void> salvarFormulario(FormularioBateriaTableCompanion data) async {
    AppLogger.d('üíæ Salvando formul√°rio MPBB: $data', tag: 'MpbbDao');
    await into(formularioBateriaTable).insertOnConflictUpdate(data);
  }

  /// Busca formul√°rio por ID.
  Future<FormularioBateriaTableData?> buscarFormularioPorId(int id) {
    return (select(formularioBateriaTable)..where((t) => t.id.equals(id)))
        .getSingleOrNull();
  }

  /// Busca formul√°rios vinculados √† atividade (UUID).
  Future<List<FormularioBateriaTableData>> buscarFormularioPorAtividade(
      String atividadeId) {
    return (select(formularioBateriaTable)
          ..where((t) => t.atividadeId.equals(atividadeId)))
        .get();
  }

  /// Apaga formul√°rio por ID.
  Future<void> deletarFormularioPorId(int id) async {
    await (delete(formularioBateriaTable)..where((t) => t.id.equals(id))).go();
  }

  /// Apaga formul√°rios vinculados √† atividade.
  Future<void> deletarFormularioPorAtividade(String atividadeId) async {
    await (delete(formularioBateriaTable)
          ..where((t) => t.atividadeId.equals(atividadeId)))
        .go();
  }

  /// Salva todas as medi√ß√µes de elementos de bateria.
  Future<void> salvarMedicoes(
      List<MedicaoElementoBateriaTableCompanion> lista) async {
    AppLogger.d('üíæ Salvando ${lista.length} medi√ß√µes MPBB', tag: 'MpbbDao');
    await batch((b) {
      b.insertAll(medicaoElementoBateriaTable, lista);
    });
  }

  /// Busca medi√ß√µes vinculadas a um formul√°rio.
  Future<List<MedicaoElementoBateriaTableData>> buscarMedicoesPorFormulario(
      int formularioId) {
    return (select(medicaoElementoBateriaTable)
          ..where((t) => t.formularioBateriaId.equals(formularioId)))
        .get();
  }

  /// Deleta medi√ß√µes por formul√°rio.
  Future<void> deletarMedicoesPorFormulario(int formularioId) async {
    await (delete(medicaoElementoBateriaTable)
          ..where((t) => t.formularioBateriaId.equals(formularioId)))
        .go();
  }

  /// Remove todos os dados (formul√°rios + medi√ß√µes).
  Future<void> deletarTudo() async {
    AppLogger.w('üóëÔ∏è Apagando todos dados MPBB', tag: 'MpbbDao');
    await transaction(() async {
      await delete(medicaoElementoBateriaTable).go();
      await delete(formularioBateriaTable).go();
    });
  }

  /// Verifica se h√° formul√°rios salvos no banco.
  Future<bool> estaVazio() async {
    final countQuery = selectOnly(formularioBateriaTable)
      ..addColumns([formularioBateriaTable.id.count()]);
    final result = await countQuery.getSingle();
    return (result.read(formularioBateriaTable.id.count()) ?? 0) == 0;
  }
}
