// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_database.dart';

// ignore_for_file: type=lint
class $UsuarioTableTable extends UsuarioTable
    with TableInfo<$UsuarioTableTable, UsuarioTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $UsuarioTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _matriculaMeta =
      const VerificationMeta('matricula');
  @override
  late final GeneratedColumn<String> matricula = GeneratedColumn<String>(
      'matricula', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways('UNIQUE'));
  static const VerificationMeta _tokenMeta = const VerificationMeta('token');
  @override
  late final GeneratedColumn<String> token = GeneratedColumn<String>(
      'token', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _refreshTokenMeta =
      const VerificationMeta('refreshToken');
  @override
  late final GeneratedColumn<String> refreshToken = GeneratedColumn<String>(
      'refresh_token', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _ultimoLoginMeta =
      const VerificationMeta('ultimoLogin');
  @override
  late final GeneratedColumn<DateTime> ultimoLogin = GeneratedColumn<DateTime>(
      'ultimo_login', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime,
      requiredDuringInsert: false,
      defaultValue: currentDateAndTime);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, nome, matricula, token, refreshToken, ultimoLogin, createdAt];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'usuario_table';
  @override
  VerificationContext validateIntegrity(Insertable<UsuarioTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('matricula')) {
      context.handle(_matriculaMeta,
          matricula.isAcceptableOrUnknown(data['matricula']!, _matriculaMeta));
    } else if (isInserting) {
      context.missing(_matriculaMeta);
    }
    if (data.containsKey('token')) {
      context.handle(
          _tokenMeta, token.isAcceptableOrUnknown(data['token']!, _tokenMeta));
    }
    if (data.containsKey('refresh_token')) {
      context.handle(
          _refreshTokenMeta,
          refreshToken.isAcceptableOrUnknown(
              data['refresh_token']!, _refreshTokenMeta));
    }
    if (data.containsKey('ultimo_login')) {
      context.handle(
          _ultimoLoginMeta,
          ultimoLogin.isAcceptableOrUnknown(
              data['ultimo_login']!, _ultimoLoginMeta));
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  UsuarioTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return UsuarioTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      matricula: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}matricula'])!,
      token: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}token']),
      refreshToken: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}refresh_token']),
      ultimoLogin: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}ultimo_login']),
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
    );
  }

  @override
  $UsuarioTableTable createAlias(String alias) {
    return $UsuarioTableTable(attachedDatabase, alias);
  }
}

class UsuarioTableData extends DataClass
    implements Insertable<UsuarioTableData> {
  final int id;
  final String uuid;
  final String nome;
  final String matricula;
  final String? token;
  final String? refreshToken;
  final DateTime? ultimoLogin;
  final DateTime createdAt;
  const UsuarioTableData(
      {required this.id,
      required this.uuid,
      required this.nome,
      required this.matricula,
      this.token,
      this.refreshToken,
      this.ultimoLogin,
      required this.createdAt});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['nome'] = Variable<String>(nome);
    map['matricula'] = Variable<String>(matricula);
    if (!nullToAbsent || token != null) {
      map['token'] = Variable<String>(token);
    }
    if (!nullToAbsent || refreshToken != null) {
      map['refresh_token'] = Variable<String>(refreshToken);
    }
    if (!nullToAbsent || ultimoLogin != null) {
      map['ultimo_login'] = Variable<DateTime>(ultimoLogin);
    }
    map['created_at'] = Variable<DateTime>(createdAt);
    return map;
  }

  UsuarioTableCompanion toCompanion(bool nullToAbsent) {
    return UsuarioTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      nome: Value(nome),
      matricula: Value(matricula),
      token:
          token == null && nullToAbsent ? const Value.absent() : Value(token),
      refreshToken: refreshToken == null && nullToAbsent
          ? const Value.absent()
          : Value(refreshToken),
      ultimoLogin: ultimoLogin == null && nullToAbsent
          ? const Value.absent()
          : Value(ultimoLogin),
      createdAt: Value(createdAt),
    );
  }

  factory UsuarioTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return UsuarioTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      nome: serializer.fromJson<String>(json['nome']),
      matricula: serializer.fromJson<String>(json['matricula']),
      token: serializer.fromJson<String?>(json['token']),
      refreshToken: serializer.fromJson<String?>(json['refreshToken']),
      ultimoLogin: serializer.fromJson<DateTime?>(json['ultimoLogin']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'nome': serializer.toJson<String>(nome),
      'matricula': serializer.toJson<String>(matricula),
      'token': serializer.toJson<String?>(token),
      'refreshToken': serializer.toJson<String?>(refreshToken),
      'ultimoLogin': serializer.toJson<DateTime?>(ultimoLogin),
      'createdAt': serializer.toJson<DateTime>(createdAt),
    };
  }

  UsuarioTableData copyWith(
          {int? id,
          String? uuid,
          String? nome,
          String? matricula,
          Value<String?> token = const Value.absent(),
          Value<String?> refreshToken = const Value.absent(),
          Value<DateTime?> ultimoLogin = const Value.absent(),
          DateTime? createdAt}) =>
      UsuarioTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        nome: nome ?? this.nome,
        matricula: matricula ?? this.matricula,
        token: token.present ? token.value : this.token,
        refreshToken:
            refreshToken.present ? refreshToken.value : this.refreshToken,
        ultimoLogin: ultimoLogin.present ? ultimoLogin.value : this.ultimoLogin,
        createdAt: createdAt ?? this.createdAt,
      );
  UsuarioTableData copyWithCompanion(UsuarioTableCompanion data) {
    return UsuarioTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      nome: data.nome.present ? data.nome.value : this.nome,
      matricula: data.matricula.present ? data.matricula.value : this.matricula,
      token: data.token.present ? data.token.value : this.token,
      refreshToken: data.refreshToken.present
          ? data.refreshToken.value
          : this.refreshToken,
      ultimoLogin:
          data.ultimoLogin.present ? data.ultimoLogin.value : this.ultimoLogin,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('UsuarioTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('nome: $nome, ')
          ..write('matricula: $matricula, ')
          ..write('token: $token, ')
          ..write('refreshToken: $refreshToken, ')
          ..write('ultimoLogin: $ultimoLogin, ')
          ..write('createdAt: $createdAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, nome, matricula, token, refreshToken, ultimoLogin, createdAt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UsuarioTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.nome == this.nome &&
          other.matricula == this.matricula &&
          other.token == this.token &&
          other.refreshToken == this.refreshToken &&
          other.ultimoLogin == this.ultimoLogin &&
          other.createdAt == this.createdAt);
}

class UsuarioTableCompanion extends UpdateCompanion<UsuarioTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<String> nome;
  final Value<String> matricula;
  final Value<String?> token;
  final Value<String?> refreshToken;
  final Value<DateTime?> ultimoLogin;
  final Value<DateTime> createdAt;
  const UsuarioTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.nome = const Value.absent(),
    this.matricula = const Value.absent(),
    this.token = const Value.absent(),
    this.refreshToken = const Value.absent(),
    this.ultimoLogin = const Value.absent(),
    this.createdAt = const Value.absent(),
  });
  UsuarioTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required String nome,
    required String matricula,
    this.token = const Value.absent(),
    this.refreshToken = const Value.absent(),
    this.ultimoLogin = const Value.absent(),
    this.createdAt = const Value.absent(),
  })  : uuid = Value(uuid),
        nome = Value(nome),
        matricula = Value(matricula);
  static Insertable<UsuarioTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<String>? nome,
    Expression<String>? matricula,
    Expression<String>? token,
    Expression<String>? refreshToken,
    Expression<DateTime>? ultimoLogin,
    Expression<DateTime>? createdAt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (nome != null) 'nome': nome,
      if (matricula != null) 'matricula': matricula,
      if (token != null) 'token': token,
      if (refreshToken != null) 'refresh_token': refreshToken,
      if (ultimoLogin != null) 'ultimo_login': ultimoLogin,
      if (createdAt != null) 'created_at': createdAt,
    });
  }

  UsuarioTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<String>? nome,
      Value<String>? matricula,
      Value<String?>? token,
      Value<String?>? refreshToken,
      Value<DateTime?>? ultimoLogin,
      Value<DateTime>? createdAt}) {
    return UsuarioTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      nome: nome ?? this.nome,
      matricula: matricula ?? this.matricula,
      token: token ?? this.token,
      refreshToken: refreshToken ?? this.refreshToken,
      ultimoLogin: ultimoLogin ?? this.ultimoLogin,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (matricula.present) {
      map['matricula'] = Variable<String>(matricula.value);
    }
    if (token.present) {
      map['token'] = Variable<String>(token.value);
    }
    if (refreshToken.present) {
      map['refresh_token'] = Variable<String>(refreshToken.value);
    }
    if (ultimoLogin.present) {
      map['ultimo_login'] = Variable<DateTime>(ultimoLogin.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UsuarioTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('nome: $nome, ')
          ..write('matricula: $matricula, ')
          ..write('token: $token, ')
          ..write('refreshToken: $refreshToken, ')
          ..write('ultimoLogin: $ultimoLogin, ')
          ..write('createdAt: $createdAt')
          ..write(')'))
        .toString();
  }
}

class $TipoAtividadeTableTable extends TipoAtividadeTable
    with TableInfo<$TipoAtividadeTableTable, TipoAtividadeTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TipoAtividadeTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _tipoAtividadeMobileMeta =
      const VerificationMeta('tipoAtividadeMobile');
  @override
  late final GeneratedColumnWithTypeConverter<TipoAtividadeMobile, String>
      tipoAtividadeMobile = GeneratedColumn<String>(
              'tipo_atividade_mobile', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<TipoAtividadeMobile>(
              $TipoAtividadeTableTable.$convertertipoAtividadeMobile);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, nome, tipoAtividadeMobile];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'tipo_atividade_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<TipoAtividadeTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    context.handle(
        _tipoAtividadeMobileMeta, const VerificationResult.success());
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TipoAtividadeTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return TipoAtividadeTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      tipoAtividadeMobile: $TipoAtividadeTableTable
          .$convertertipoAtividadeMobile
          .fromSql(attachedDatabase.typeMapping.read(DriftSqlType.string,
              data['${effectivePrefix}tipo_atividade_mobile'])!),
    );
  }

  @override
  $TipoAtividadeTableTable createAlias(String alias) {
    return $TipoAtividadeTableTable(attachedDatabase, alias);
  }

  static TypeConverter<TipoAtividadeMobile, String>
      $convertertipoAtividadeMobile = const TipoAtividadeMobileConverter();
}

class TipoAtividadeTableData extends DataClass
    implements Insertable<TipoAtividadeTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final TipoAtividadeMobile tipoAtividadeMobile;
  const TipoAtividadeTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      required this.tipoAtividadeMobile});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    {
      map['tipo_atividade_mobile'] = Variable<String>($TipoAtividadeTableTable
          .$convertertipoAtividadeMobile
          .toSql(tipoAtividadeMobile));
    }
    return map;
  }

  TipoAtividadeTableCompanion toCompanion(bool nullToAbsent) {
    return TipoAtividadeTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      tipoAtividadeMobile: Value(tipoAtividadeMobile),
    );
  }

  factory TipoAtividadeTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TipoAtividadeTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      tipoAtividadeMobile:
          serializer.fromJson<TipoAtividadeMobile>(json['tipoAtividadeMobile']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'tipoAtividadeMobile':
          serializer.toJson<TipoAtividadeMobile>(tipoAtividadeMobile),
    };
  }

  TipoAtividadeTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          TipoAtividadeMobile? tipoAtividadeMobile}) =>
      TipoAtividadeTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        tipoAtividadeMobile: tipoAtividadeMobile ?? this.tipoAtividadeMobile,
      );
  TipoAtividadeTableData copyWithCompanion(TipoAtividadeTableCompanion data) {
    return TipoAtividadeTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      tipoAtividadeMobile: data.tipoAtividadeMobile.present
          ? data.tipoAtividadeMobile.value
          : this.tipoAtividadeMobile,
    );
  }

  @override
  String toString() {
    return (StringBuffer('TipoAtividadeTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('tipoAtividadeMobile: $tipoAtividadeMobile')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, nome, tipoAtividadeMobile);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TipoAtividadeTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.tipoAtividadeMobile == this.tipoAtividadeMobile);
}

class TipoAtividadeTableCompanion
    extends UpdateCompanion<TipoAtividadeTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<TipoAtividadeMobile> tipoAtividadeMobile;
  const TipoAtividadeTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipoAtividadeMobile = const Value.absent(),
  });
  TipoAtividadeTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    required TipoAtividadeMobile tipoAtividadeMobile,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome),
        tipoAtividadeMobile = Value(tipoAtividadeMobile);
  static Insertable<TipoAtividadeTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? tipoAtividadeMobile,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (tipoAtividadeMobile != null)
        'tipo_atividade_mobile': tipoAtividadeMobile,
    });
  }

  TipoAtividadeTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<TipoAtividadeMobile>? tipoAtividadeMobile}) {
    return TipoAtividadeTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      tipoAtividadeMobile: tipoAtividadeMobile ?? this.tipoAtividadeMobile,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (tipoAtividadeMobile.present) {
      map['tipo_atividade_mobile'] = Variable<String>($TipoAtividadeTableTable
          .$convertertipoAtividadeMobile
          .toSql(tipoAtividadeMobile.value));
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TipoAtividadeTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('tipoAtividadeMobile: $tipoAtividadeMobile')
          ..write(')'))
        .toString();
  }
}

class $GrupoDefeitoEquipamentoTableTable extends GrupoDefeitoEquipamentoTable
    with
        TableInfo<$GrupoDefeitoEquipamentoTableTable,
            GrupoDefeitoEquipamentoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $GrupoDefeitoEquipamentoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'codigo', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 200),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, nome, codigo];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'grupo_defeito_equipamento_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<GrupoDefeitoEquipamentoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('codigo')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['codigo']!, _codigoMeta));
    } else if (isInserting) {
      context.missing(_codigoMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  GrupoDefeitoEquipamentoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return GrupoDefeitoEquipamentoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      codigo: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}codigo'])!,
    );
  }

  @override
  $GrupoDefeitoEquipamentoTableTable createAlias(String alias) {
    return $GrupoDefeitoEquipamentoTableTable(attachedDatabase, alias);
  }
}

class GrupoDefeitoEquipamentoTableData extends DataClass
    implements Insertable<GrupoDefeitoEquipamentoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final String codigo;
  const GrupoDefeitoEquipamentoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      required this.codigo});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    map['codigo'] = Variable<String>(codigo);
    return map;
  }

  GrupoDefeitoEquipamentoTableCompanion toCompanion(bool nullToAbsent) {
    return GrupoDefeitoEquipamentoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      codigo: Value(codigo),
    );
  }

  factory GrupoDefeitoEquipamentoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return GrupoDefeitoEquipamentoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      codigo: serializer.fromJson<String>(json['codigo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'codigo': serializer.toJson<String>(codigo),
    };
  }

  GrupoDefeitoEquipamentoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          String? codigo}) =>
      GrupoDefeitoEquipamentoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        codigo: codigo ?? this.codigo,
      );
  GrupoDefeitoEquipamentoTableData copyWithCompanion(
      GrupoDefeitoEquipamentoTableCompanion data) {
    return GrupoDefeitoEquipamentoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      codigo: data.codigo.present ? data.codigo.value : this.codigo,
    );
  }

  @override
  String toString() {
    return (StringBuffer('GrupoDefeitoEquipamentoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('codigo: $codigo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, uuid, createdAt, updatedAt, sincronizado, nome, codigo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is GrupoDefeitoEquipamentoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.codigo == this.codigo);
}

class GrupoDefeitoEquipamentoTableCompanion
    extends UpdateCompanion<GrupoDefeitoEquipamentoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<String> codigo;
  const GrupoDefeitoEquipamentoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.codigo = const Value.absent(),
  });
  GrupoDefeitoEquipamentoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    required String codigo,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome),
        codigo = Value(codigo);
  static Insertable<GrupoDefeitoEquipamentoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? codigo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (codigo != null) 'codigo': codigo,
    });
  }

  GrupoDefeitoEquipamentoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<String>? codigo}) {
    return GrupoDefeitoEquipamentoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      codigo: codigo ?? this.codigo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (codigo.present) {
      map['codigo'] = Variable<String>(codigo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('GrupoDefeitoEquipamentoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('codigo: $codigo')
          ..write(')'))
        .toString();
  }
}

class $EquipamentoTableTable extends EquipamentoTable
    with TableInfo<$EquipamentoTableTable, EquipamentoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EquipamentoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _descricaoMeta =
      const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'descricao', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 200),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _subestacaoMeta =
      const VerificationMeta('subestacao');
  @override
  late final GeneratedColumn<String> subestacao = GeneratedColumn<String>(
      'subestacao', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _grupoIdMeta =
      const VerificationMeta('grupoId');
  @override
  late final GeneratedColumn<String> grupoId = GeneratedColumn<String>(
      'grupo_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES grupo_defeito_equipamento_table (uuid)'));
  @override
  List<GeneratedColumn> get $columns => [
        id,
        uuid,
        createdAt,
        updatedAt,
        sincronizado,
        nome,
        descricao,
        subestacao,
        grupoId
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'equipamento_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<EquipamentoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('descricao')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta));
    } else if (isInserting) {
      context.missing(_descricaoMeta);
    }
    if (data.containsKey('subestacao')) {
      context.handle(
          _subestacaoMeta,
          subestacao.isAcceptableOrUnknown(
              data['subestacao']!, _subestacaoMeta));
    } else if (isInserting) {
      context.missing(_subestacaoMeta);
    }
    if (data.containsKey('grupo_id')) {
      context.handle(_grupoIdMeta,
          grupoId.isAcceptableOrUnknown(data['grupo_id']!, _grupoIdMeta));
    } else if (isInserting) {
      context.missing(_grupoIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EquipamentoTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return EquipamentoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      descricao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}descricao'])!,
      subestacao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}subestacao'])!,
      grupoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}grupo_id'])!,
    );
  }

  @override
  $EquipamentoTableTable createAlias(String alias) {
    return $EquipamentoTableTable(attachedDatabase, alias);
  }
}

class EquipamentoTableData extends DataClass
    implements Insertable<EquipamentoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final String descricao;
  final String subestacao;
  final String grupoId;
  const EquipamentoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      required this.descricao,
      required this.subestacao,
      required this.grupoId});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    map['descricao'] = Variable<String>(descricao);
    map['subestacao'] = Variable<String>(subestacao);
    map['grupo_id'] = Variable<String>(grupoId);
    return map;
  }

  EquipamentoTableCompanion toCompanion(bool nullToAbsent) {
    return EquipamentoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      descricao: Value(descricao),
      subestacao: Value(subestacao),
      grupoId: Value(grupoId),
    );
  }

  factory EquipamentoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EquipamentoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      descricao: serializer.fromJson<String>(json['descricao']),
      subestacao: serializer.fromJson<String>(json['subestacao']),
      grupoId: serializer.fromJson<String>(json['grupoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'descricao': serializer.toJson<String>(descricao),
      'subestacao': serializer.toJson<String>(subestacao),
      'grupoId': serializer.toJson<String>(grupoId),
    };
  }

  EquipamentoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          String? descricao,
          String? subestacao,
          String? grupoId}) =>
      EquipamentoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        descricao: descricao ?? this.descricao,
        subestacao: subestacao ?? this.subestacao,
        grupoId: grupoId ?? this.grupoId,
      );
  EquipamentoTableData copyWithCompanion(EquipamentoTableCompanion data) {
    return EquipamentoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
      subestacao:
          data.subestacao.present ? data.subestacao.value : this.subestacao,
      grupoId: data.grupoId.present ? data.grupoId.value : this.grupoId,
    );
  }

  @override
  String toString() {
    return (StringBuffer('EquipamentoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('subestacao: $subestacao, ')
          ..write('grupoId: $grupoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, uuid, createdAt, updatedAt, sincronizado,
      nome, descricao, subestacao, grupoId);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EquipamentoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.descricao == this.descricao &&
          other.subestacao == this.subestacao &&
          other.grupoId == this.grupoId);
}

class EquipamentoTableCompanion extends UpdateCompanion<EquipamentoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<String> descricao;
  final Value<String> subestacao;
  final Value<String> grupoId;
  const EquipamentoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.subestacao = const Value.absent(),
    this.grupoId = const Value.absent(),
  });
  EquipamentoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    required String descricao,
    required String subestacao,
    required String grupoId,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome),
        descricao = Value(descricao),
        subestacao = Value(subestacao),
        grupoId = Value(grupoId);
  static Insertable<EquipamentoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? descricao,
    Expression<String>? subestacao,
    Expression<String>? grupoId,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
      if (subestacao != null) 'subestacao': subestacao,
      if (grupoId != null) 'grupo_id': grupoId,
    });
  }

  EquipamentoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<String>? descricao,
      Value<String>? subestacao,
      Value<String>? grupoId}) {
    return EquipamentoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
      subestacao: subestacao ?? this.subestacao,
      grupoId: grupoId ?? this.grupoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    if (subestacao.present) {
      map['subestacao'] = Variable<String>(subestacao.value);
    }
    if (grupoId.present) {
      map['grupo_id'] = Variable<String>(grupoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EquipamentoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('subestacao: $subestacao, ')
          ..write('grupoId: $grupoId')
          ..write(')'))
        .toString();
  }
}

class $AtividadeTableTable extends AtividadeTable
    with TableInfo<$AtividadeTableTable, AtividadeTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AtividadeTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  @override
  late final GeneratedColumn<String> titulo = GeneratedColumn<String>(
      'titulo', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _ordemServicoMeta =
      const VerificationMeta('ordemServico');
  @override
  late final GeneratedColumn<String> ordemServico = GeneratedColumn<String>(
      'ordem_servico', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _descricaoMeta =
      const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'descricao', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 200),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _subestacaoMeta =
      const VerificationMeta('subestacao');
  @override
  late final GeneratedColumn<String> subestacao = GeneratedColumn<String>(
      'subestacao', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _statusMeta = const VerificationMeta('status');
  @override
  late final GeneratedColumnWithTypeConverter<StatusAtividade, String> status =
      GeneratedColumn<String>('status', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<StatusAtividade>(
              $AtividadeTableTable.$converterstatus);
  static const VerificationMeta _dataLimiteMeta =
      const VerificationMeta('dataLimite');
  @override
  late final GeneratedColumn<DateTime> dataLimite = GeneratedColumn<DateTime>(
      'data_limite', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _dataInicioMeta =
      const VerificationMeta('dataInicio');
  @override
  late final GeneratedColumn<DateTime> dataInicio = GeneratedColumn<DateTime>(
      'data_inicio', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  static const VerificationMeta _dataFimMeta =
      const VerificationMeta('dataFim');
  @override
  late final GeneratedColumn<DateTime> dataFim = GeneratedColumn<DateTime>(
      'data_fim', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  static const VerificationMeta _equipamentoIdMeta =
      const VerificationMeta('equipamentoId');
  @override
  late final GeneratedColumn<String> equipamentoId = GeneratedColumn<String>(
      'equipamento_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES equipamento_table (uuid)'));
  static const VerificationMeta _tipoAtividadeIdMeta =
      const VerificationMeta('tipoAtividadeId');
  @override
  late final GeneratedColumn<String> tipoAtividadeId = GeneratedColumn<String>(
      'tipo_atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES tipo_atividade_table (uuid)'));
  @override
  List<GeneratedColumn> get $columns => [
        id,
        uuid,
        createdAt,
        updatedAt,
        sincronizado,
        titulo,
        ordemServico,
        descricao,
        subestacao,
        status,
        dataLimite,
        dataInicio,
        dataFim,
        equipamentoId,
        tipoAtividadeId
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'atividade_table';
  @override
  VerificationContext validateIntegrity(Insertable<AtividadeTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    } else if (isInserting) {
      context.missing(_tituloMeta);
    }
    if (data.containsKey('ordem_servico')) {
      context.handle(
          _ordemServicoMeta,
          ordemServico.isAcceptableOrUnknown(
              data['ordem_servico']!, _ordemServicoMeta));
    } else if (isInserting) {
      context.missing(_ordemServicoMeta);
    }
    if (data.containsKey('descricao')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta));
    } else if (isInserting) {
      context.missing(_descricaoMeta);
    }
    if (data.containsKey('subestacao')) {
      context.handle(
          _subestacaoMeta,
          subestacao.isAcceptableOrUnknown(
              data['subestacao']!, _subestacaoMeta));
    } else if (isInserting) {
      context.missing(_subestacaoMeta);
    }
    context.handle(_statusMeta, const VerificationResult.success());
    if (data.containsKey('data_limite')) {
      context.handle(
          _dataLimiteMeta,
          dataLimite.isAcceptableOrUnknown(
              data['data_limite']!, _dataLimiteMeta));
    } else if (isInserting) {
      context.missing(_dataLimiteMeta);
    }
    if (data.containsKey('data_inicio')) {
      context.handle(
          _dataInicioMeta,
          dataInicio.isAcceptableOrUnknown(
              data['data_inicio']!, _dataInicioMeta));
    }
    if (data.containsKey('data_fim')) {
      context.handle(_dataFimMeta,
          dataFim.isAcceptableOrUnknown(data['data_fim']!, _dataFimMeta));
    }
    if (data.containsKey('equipamento_id')) {
      context.handle(
          _equipamentoIdMeta,
          equipamentoId.isAcceptableOrUnknown(
              data['equipamento_id']!, _equipamentoIdMeta));
    } else if (isInserting) {
      context.missing(_equipamentoIdMeta);
    }
    if (data.containsKey('tipo_atividade_id')) {
      context.handle(
          _tipoAtividadeIdMeta,
          tipoAtividadeId.isAcceptableOrUnknown(
              data['tipo_atividade_id']!, _tipoAtividadeIdMeta));
    } else if (isInserting) {
      context.missing(_tipoAtividadeIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AtividadeTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AtividadeTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      titulo: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}titulo'])!,
      ordemServico: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}ordem_servico'])!,
      descricao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}descricao'])!,
      subestacao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}subestacao'])!,
      status: $AtividadeTableTable.$converterstatus.fromSql(attachedDatabase
          .typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}status'])!),
      dataLimite: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}data_limite'])!,
      dataInicio: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}data_inicio']),
      dataFim: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}data_fim']),
      equipamentoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}equipamento_id'])!,
      tipoAtividadeId: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}tipo_atividade_id'])!,
    );
  }

  @override
  $AtividadeTableTable createAlias(String alias) {
    return $AtividadeTableTable(attachedDatabase, alias);
  }

  static TypeConverter<StatusAtividade, String> $converterstatus =
      const StatusAtividadeConverter();
}

class AtividadeTableData extends DataClass
    implements Insertable<AtividadeTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String titulo;
  final String ordemServico;
  final String descricao;
  final String subestacao;
  final StatusAtividade status;
  final DateTime dataLimite;
  final DateTime? dataInicio;
  final DateTime? dataFim;
  final String equipamentoId;
  final String tipoAtividadeId;
  const AtividadeTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.titulo,
      required this.ordemServico,
      required this.descricao,
      required this.subestacao,
      required this.status,
      required this.dataLimite,
      this.dataInicio,
      this.dataFim,
      required this.equipamentoId,
      required this.tipoAtividadeId});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['titulo'] = Variable<String>(titulo);
    map['ordem_servico'] = Variable<String>(ordemServico);
    map['descricao'] = Variable<String>(descricao);
    map['subestacao'] = Variable<String>(subestacao);
    {
      map['status'] =
          Variable<String>($AtividadeTableTable.$converterstatus.toSql(status));
    }
    map['data_limite'] = Variable<DateTime>(dataLimite);
    if (!nullToAbsent || dataInicio != null) {
      map['data_inicio'] = Variable<DateTime>(dataInicio);
    }
    if (!nullToAbsent || dataFim != null) {
      map['data_fim'] = Variable<DateTime>(dataFim);
    }
    map['equipamento_id'] = Variable<String>(equipamentoId);
    map['tipo_atividade_id'] = Variable<String>(tipoAtividadeId);
    return map;
  }

  AtividadeTableCompanion toCompanion(bool nullToAbsent) {
    return AtividadeTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      titulo: Value(titulo),
      ordemServico: Value(ordemServico),
      descricao: Value(descricao),
      subestacao: Value(subestacao),
      status: Value(status),
      dataLimite: Value(dataLimite),
      dataInicio: dataInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInicio),
      dataFim: dataFim == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFim),
      equipamentoId: Value(equipamentoId),
      tipoAtividadeId: Value(tipoAtividadeId),
    );
  }

  factory AtividadeTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AtividadeTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      titulo: serializer.fromJson<String>(json['titulo']),
      ordemServico: serializer.fromJson<String>(json['ordemServico']),
      descricao: serializer.fromJson<String>(json['descricao']),
      subestacao: serializer.fromJson<String>(json['subestacao']),
      status: serializer.fromJson<StatusAtividade>(json['status']),
      dataLimite: serializer.fromJson<DateTime>(json['dataLimite']),
      dataInicio: serializer.fromJson<DateTime?>(json['dataInicio']),
      dataFim: serializer.fromJson<DateTime?>(json['dataFim']),
      equipamentoId: serializer.fromJson<String>(json['equipamentoId']),
      tipoAtividadeId: serializer.fromJson<String>(json['tipoAtividadeId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'titulo': serializer.toJson<String>(titulo),
      'ordemServico': serializer.toJson<String>(ordemServico),
      'descricao': serializer.toJson<String>(descricao),
      'subestacao': serializer.toJson<String>(subestacao),
      'status': serializer.toJson<StatusAtividade>(status),
      'dataLimite': serializer.toJson<DateTime>(dataLimite),
      'dataInicio': serializer.toJson<DateTime?>(dataInicio),
      'dataFim': serializer.toJson<DateTime?>(dataFim),
      'equipamentoId': serializer.toJson<String>(equipamentoId),
      'tipoAtividadeId': serializer.toJson<String>(tipoAtividadeId),
    };
  }

  AtividadeTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? titulo,
          String? ordemServico,
          String? descricao,
          String? subestacao,
          StatusAtividade? status,
          DateTime? dataLimite,
          Value<DateTime?> dataInicio = const Value.absent(),
          Value<DateTime?> dataFim = const Value.absent(),
          String? equipamentoId,
          String? tipoAtividadeId}) =>
      AtividadeTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        titulo: titulo ?? this.titulo,
        ordemServico: ordemServico ?? this.ordemServico,
        descricao: descricao ?? this.descricao,
        subestacao: subestacao ?? this.subestacao,
        status: status ?? this.status,
        dataLimite: dataLimite ?? this.dataLimite,
        dataInicio: dataInicio.present ? dataInicio.value : this.dataInicio,
        dataFim: dataFim.present ? dataFim.value : this.dataFim,
        equipamentoId: equipamentoId ?? this.equipamentoId,
        tipoAtividadeId: tipoAtividadeId ?? this.tipoAtividadeId,
      );
  AtividadeTableData copyWithCompanion(AtividadeTableCompanion data) {
    return AtividadeTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      titulo: data.titulo.present ? data.titulo.value : this.titulo,
      ordemServico: data.ordemServico.present
          ? data.ordemServico.value
          : this.ordemServico,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
      subestacao:
          data.subestacao.present ? data.subestacao.value : this.subestacao,
      status: data.status.present ? data.status.value : this.status,
      dataLimite:
          data.dataLimite.present ? data.dataLimite.value : this.dataLimite,
      dataInicio:
          data.dataInicio.present ? data.dataInicio.value : this.dataInicio,
      dataFim: data.dataFim.present ? data.dataFim.value : this.dataFim,
      equipamentoId: data.equipamentoId.present
          ? data.equipamentoId.value
          : this.equipamentoId,
      tipoAtividadeId: data.tipoAtividadeId.present
          ? data.tipoAtividadeId.value
          : this.tipoAtividadeId,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AtividadeTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('titulo: $titulo, ')
          ..write('ordemServico: $ordemServico, ')
          ..write('descricao: $descricao, ')
          ..write('subestacao: $subestacao, ')
          ..write('status: $status, ')
          ..write('dataLimite: $dataLimite, ')
          ..write('dataInicio: $dataInicio, ')
          ..write('dataFim: $dataFim, ')
          ..write('equipamentoId: $equipamentoId, ')
          ..write('tipoAtividadeId: $tipoAtividadeId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      uuid,
      createdAt,
      updatedAt,
      sincronizado,
      titulo,
      ordemServico,
      descricao,
      subestacao,
      status,
      dataLimite,
      dataInicio,
      dataFim,
      equipamentoId,
      tipoAtividadeId);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AtividadeTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.titulo == this.titulo &&
          other.ordemServico == this.ordemServico &&
          other.descricao == this.descricao &&
          other.subestacao == this.subestacao &&
          other.status == this.status &&
          other.dataLimite == this.dataLimite &&
          other.dataInicio == this.dataInicio &&
          other.dataFim == this.dataFim &&
          other.equipamentoId == this.equipamentoId &&
          other.tipoAtividadeId == this.tipoAtividadeId);
}

class AtividadeTableCompanion extends UpdateCompanion<AtividadeTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> titulo;
  final Value<String> ordemServico;
  final Value<String> descricao;
  final Value<String> subestacao;
  final Value<StatusAtividade> status;
  final Value<DateTime> dataLimite;
  final Value<DateTime?> dataInicio;
  final Value<DateTime?> dataFim;
  final Value<String> equipamentoId;
  final Value<String> tipoAtividadeId;
  const AtividadeTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.titulo = const Value.absent(),
    this.ordemServico = const Value.absent(),
    this.descricao = const Value.absent(),
    this.subestacao = const Value.absent(),
    this.status = const Value.absent(),
    this.dataLimite = const Value.absent(),
    this.dataInicio = const Value.absent(),
    this.dataFim = const Value.absent(),
    this.equipamentoId = const Value.absent(),
    this.tipoAtividadeId = const Value.absent(),
  });
  AtividadeTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String titulo,
    required String ordemServico,
    required String descricao,
    required String subestacao,
    required StatusAtividade status,
    required DateTime dataLimite,
    this.dataInicio = const Value.absent(),
    this.dataFim = const Value.absent(),
    required String equipamentoId,
    required String tipoAtividadeId,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        titulo = Value(titulo),
        ordemServico = Value(ordemServico),
        descricao = Value(descricao),
        subestacao = Value(subestacao),
        status = Value(status),
        dataLimite = Value(dataLimite),
        equipamentoId = Value(equipamentoId),
        tipoAtividadeId = Value(tipoAtividadeId);
  static Insertable<AtividadeTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? titulo,
    Expression<String>? ordemServico,
    Expression<String>? descricao,
    Expression<String>? subestacao,
    Expression<String>? status,
    Expression<DateTime>? dataLimite,
    Expression<DateTime>? dataInicio,
    Expression<DateTime>? dataFim,
    Expression<String>? equipamentoId,
    Expression<String>? tipoAtividadeId,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (titulo != null) 'titulo': titulo,
      if (ordemServico != null) 'ordem_servico': ordemServico,
      if (descricao != null) 'descricao': descricao,
      if (subestacao != null) 'subestacao': subestacao,
      if (status != null) 'status': status,
      if (dataLimite != null) 'data_limite': dataLimite,
      if (dataInicio != null) 'data_inicio': dataInicio,
      if (dataFim != null) 'data_fim': dataFim,
      if (equipamentoId != null) 'equipamento_id': equipamentoId,
      if (tipoAtividadeId != null) 'tipo_atividade_id': tipoAtividadeId,
    });
  }

  AtividadeTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? titulo,
      Value<String>? ordemServico,
      Value<String>? descricao,
      Value<String>? subestacao,
      Value<StatusAtividade>? status,
      Value<DateTime>? dataLimite,
      Value<DateTime?>? dataInicio,
      Value<DateTime?>? dataFim,
      Value<String>? equipamentoId,
      Value<String>? tipoAtividadeId}) {
    return AtividadeTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      titulo: titulo ?? this.titulo,
      ordemServico: ordemServico ?? this.ordemServico,
      descricao: descricao ?? this.descricao,
      subestacao: subestacao ?? this.subestacao,
      status: status ?? this.status,
      dataLimite: dataLimite ?? this.dataLimite,
      dataInicio: dataInicio ?? this.dataInicio,
      dataFim: dataFim ?? this.dataFim,
      equipamentoId: equipamentoId ?? this.equipamentoId,
      tipoAtividadeId: tipoAtividadeId ?? this.tipoAtividadeId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String>(titulo.value);
    }
    if (ordemServico.present) {
      map['ordem_servico'] = Variable<String>(ordemServico.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    if (subestacao.present) {
      map['subestacao'] = Variable<String>(subestacao.value);
    }
    if (status.present) {
      map['status'] = Variable<String>(
          $AtividadeTableTable.$converterstatus.toSql(status.value));
    }
    if (dataLimite.present) {
      map['data_limite'] = Variable<DateTime>(dataLimite.value);
    }
    if (dataInicio.present) {
      map['data_inicio'] = Variable<DateTime>(dataInicio.value);
    }
    if (dataFim.present) {
      map['data_fim'] = Variable<DateTime>(dataFim.value);
    }
    if (equipamentoId.present) {
      map['equipamento_id'] = Variable<String>(equipamentoId.value);
    }
    if (tipoAtividadeId.present) {
      map['tipo_atividade_id'] = Variable<String>(tipoAtividadeId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AtividadeTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('titulo: $titulo, ')
          ..write('ordemServico: $ordemServico, ')
          ..write('descricao: $descricao, ')
          ..write('subestacao: $subestacao, ')
          ..write('status: $status, ')
          ..write('dataLimite: $dataLimite, ')
          ..write('dataInicio: $dataInicio, ')
          ..write('dataFim: $dataFim, ')
          ..write('equipamentoId: $equipamentoId, ')
          ..write('tipoAtividadeId: $tipoAtividadeId')
          ..write(')'))
        .toString();
  }
}

class $SubgrupoDefeitoEquipamentoTableTable
    extends SubgrupoDefeitoEquipamentoTable
    with
        TableInfo<$SubgrupoDefeitoEquipamentoTableTable,
            SubgrupoDefeitoEquipamentoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $SubgrupoDefeitoEquipamentoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _grupoDefeitoIdMeta =
      const VerificationMeta('grupoDefeitoId');
  @override
  late final GeneratedColumn<String> grupoDefeitoId = GeneratedColumn<String>(
      'grupo_defeito_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES grupo_defeito_equipamento_table (uuid)'));
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, nome, grupoDefeitoId];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'subgrupo_defeito_equipamento_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<SubgrupoDefeitoEquipamentoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('grupo_defeito_id')) {
      context.handle(
          _grupoDefeitoIdMeta,
          grupoDefeitoId.isAcceptableOrUnknown(
              data['grupo_defeito_id']!, _grupoDefeitoIdMeta));
    } else if (isInserting) {
      context.missing(_grupoDefeitoIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  SubgrupoDefeitoEquipamentoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return SubgrupoDefeitoEquipamentoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      grupoDefeitoId: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}grupo_defeito_id'])!,
    );
  }

  @override
  $SubgrupoDefeitoEquipamentoTableTable createAlias(String alias) {
    return $SubgrupoDefeitoEquipamentoTableTable(attachedDatabase, alias);
  }
}

class SubgrupoDefeitoEquipamentoTableData extends DataClass
    implements Insertable<SubgrupoDefeitoEquipamentoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final String grupoDefeitoId;
  const SubgrupoDefeitoEquipamentoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      required this.grupoDefeitoId});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    map['grupo_defeito_id'] = Variable<String>(grupoDefeitoId);
    return map;
  }

  SubgrupoDefeitoEquipamentoTableCompanion toCompanion(bool nullToAbsent) {
    return SubgrupoDefeitoEquipamentoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      grupoDefeitoId: Value(grupoDefeitoId),
    );
  }

  factory SubgrupoDefeitoEquipamentoTableData.fromJson(
      Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return SubgrupoDefeitoEquipamentoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      grupoDefeitoId: serializer.fromJson<String>(json['grupoDefeitoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'grupoDefeitoId': serializer.toJson<String>(grupoDefeitoId),
    };
  }

  SubgrupoDefeitoEquipamentoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          String? grupoDefeitoId}) =>
      SubgrupoDefeitoEquipamentoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        grupoDefeitoId: grupoDefeitoId ?? this.grupoDefeitoId,
      );
  SubgrupoDefeitoEquipamentoTableData copyWithCompanion(
      SubgrupoDefeitoEquipamentoTableCompanion data) {
    return SubgrupoDefeitoEquipamentoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      grupoDefeitoId: data.grupoDefeitoId.present
          ? data.grupoDefeitoId.value
          : this.grupoDefeitoId,
    );
  }

  @override
  String toString() {
    return (StringBuffer('SubgrupoDefeitoEquipamentoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('grupoDefeitoId: $grupoDefeitoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, nome, grupoDefeitoId);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SubgrupoDefeitoEquipamentoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.grupoDefeitoId == this.grupoDefeitoId);
}

class SubgrupoDefeitoEquipamentoTableCompanion
    extends UpdateCompanion<SubgrupoDefeitoEquipamentoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<String> grupoDefeitoId;
  const SubgrupoDefeitoEquipamentoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.grupoDefeitoId = const Value.absent(),
  });
  SubgrupoDefeitoEquipamentoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    required String grupoDefeitoId,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome),
        grupoDefeitoId = Value(grupoDefeitoId);
  static Insertable<SubgrupoDefeitoEquipamentoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? grupoDefeitoId,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (grupoDefeitoId != null) 'grupo_defeito_id': grupoDefeitoId,
    });
  }

  SubgrupoDefeitoEquipamentoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<String>? grupoDefeitoId}) {
    return SubgrupoDefeitoEquipamentoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      grupoDefeitoId: grupoDefeitoId ?? this.grupoDefeitoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (grupoDefeitoId.present) {
      map['grupo_defeito_id'] = Variable<String>(grupoDefeitoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SubgrupoDefeitoEquipamentoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('grupoDefeitoId: $grupoDefeitoId')
          ..write(')'))
        .toString();
  }
}

class $DefeitoTableTable extends DefeitoTable
    with TableInfo<$DefeitoTableTable, DefeitoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $DefeitoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _grupoIdMeta =
      const VerificationMeta('grupoId');
  @override
  late final GeneratedColumn<String> grupoId = GeneratedColumn<String>(
      'grupo_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES grupo_defeito_equipamento_table (uuid)'));
  static const VerificationMeta _subgrupoIdMeta =
      const VerificationMeta('subgrupoId');
  @override
  late final GeneratedColumn<String> subgrupoId = GeneratedColumn<String>(
      'subgrupo_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES subgrupo_defeito_equipamento_table (uuid)'));
  static const VerificationMeta _codigoSapMeta =
      const VerificationMeta('codigoSap');
  @override
  late final GeneratedColumn<String> codigoSap = GeneratedColumn<String>(
      'codigo_sap', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _descricaoMeta =
      const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'descricao', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _prioridadeMeta =
      const VerificationMeta('prioridade');
  @override
  late final GeneratedColumnWithTypeConverter<PrioridadeDefeito, String>
      prioridade = GeneratedColumn<String>('prioridade', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<PrioridadeDefeito>(
              $DefeitoTableTable.$converterprioridade);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        uuid,
        createdAt,
        updatedAt,
        sincronizado,
        grupoId,
        subgrupoId,
        codigoSap,
        descricao,
        prioridade
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'defeito_table';
  @override
  VerificationContext validateIntegrity(Insertable<DefeitoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('grupo_id')) {
      context.handle(_grupoIdMeta,
          grupoId.isAcceptableOrUnknown(data['grupo_id']!, _grupoIdMeta));
    } else if (isInserting) {
      context.missing(_grupoIdMeta);
    }
    if (data.containsKey('subgrupo_id')) {
      context.handle(
          _subgrupoIdMeta,
          subgrupoId.isAcceptableOrUnknown(
              data['subgrupo_id']!, _subgrupoIdMeta));
    } else if (isInserting) {
      context.missing(_subgrupoIdMeta);
    }
    if (data.containsKey('codigo_sap')) {
      context.handle(_codigoSapMeta,
          codigoSap.isAcceptableOrUnknown(data['codigo_sap']!, _codigoSapMeta));
    } else if (isInserting) {
      context.missing(_codigoSapMeta);
    }
    if (data.containsKey('descricao')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta));
    } else if (isInserting) {
      context.missing(_descricaoMeta);
    }
    context.handle(_prioridadeMeta, const VerificationResult.success());
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DefeitoTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DefeitoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      grupoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}grupo_id'])!,
      subgrupoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}subgrupo_id'])!,
      codigoSap: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}codigo_sap'])!,
      descricao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}descricao'])!,
      prioridade: $DefeitoTableTable.$converterprioridade.fromSql(
          attachedDatabase.typeMapping.read(
              DriftSqlType.string, data['${effectivePrefix}prioridade'])!),
    );
  }

  @override
  $DefeitoTableTable createAlias(String alias) {
    return $DefeitoTableTable(attachedDatabase, alias);
  }

  static TypeConverter<PrioridadeDefeito, String> $converterprioridade =
      const PrioridadeDefeitoConverter();
}

class DefeitoTableData extends DataClass
    implements Insertable<DefeitoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String grupoId;
  final String subgrupoId;
  final String codigoSap;
  final String descricao;
  final PrioridadeDefeito prioridade;
  const DefeitoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.grupoId,
      required this.subgrupoId,
      required this.codigoSap,
      required this.descricao,
      required this.prioridade});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['grupo_id'] = Variable<String>(grupoId);
    map['subgrupo_id'] = Variable<String>(subgrupoId);
    map['codigo_sap'] = Variable<String>(codigoSap);
    map['descricao'] = Variable<String>(descricao);
    {
      map['prioridade'] = Variable<String>(
          $DefeitoTableTable.$converterprioridade.toSql(prioridade));
    }
    return map;
  }

  DefeitoTableCompanion toCompanion(bool nullToAbsent) {
    return DefeitoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      grupoId: Value(grupoId),
      subgrupoId: Value(subgrupoId),
      codigoSap: Value(codigoSap),
      descricao: Value(descricao),
      prioridade: Value(prioridade),
    );
  }

  factory DefeitoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DefeitoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      grupoId: serializer.fromJson<String>(json['grupoId']),
      subgrupoId: serializer.fromJson<String>(json['subgrupoId']),
      codigoSap: serializer.fromJson<String>(json['codigoSap']),
      descricao: serializer.fromJson<String>(json['descricao']),
      prioridade: serializer.fromJson<PrioridadeDefeito>(json['prioridade']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'grupoId': serializer.toJson<String>(grupoId),
      'subgrupoId': serializer.toJson<String>(subgrupoId),
      'codigoSap': serializer.toJson<String>(codigoSap),
      'descricao': serializer.toJson<String>(descricao),
      'prioridade': serializer.toJson<PrioridadeDefeito>(prioridade),
    };
  }

  DefeitoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? grupoId,
          String? subgrupoId,
          String? codigoSap,
          String? descricao,
          PrioridadeDefeito? prioridade}) =>
      DefeitoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        grupoId: grupoId ?? this.grupoId,
        subgrupoId: subgrupoId ?? this.subgrupoId,
        codigoSap: codigoSap ?? this.codigoSap,
        descricao: descricao ?? this.descricao,
        prioridade: prioridade ?? this.prioridade,
      );
  DefeitoTableData copyWithCompanion(DefeitoTableCompanion data) {
    return DefeitoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      grupoId: data.grupoId.present ? data.grupoId.value : this.grupoId,
      subgrupoId:
          data.subgrupoId.present ? data.subgrupoId.value : this.subgrupoId,
      codigoSap: data.codigoSap.present ? data.codigoSap.value : this.codigoSap,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
      prioridade:
          data.prioridade.present ? data.prioridade.value : this.prioridade,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DefeitoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('grupoId: $grupoId, ')
          ..write('subgrupoId: $subgrupoId, ')
          ..write('codigoSap: $codigoSap, ')
          ..write('descricao: $descricao, ')
          ..write('prioridade: $prioridade')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, uuid, createdAt, updatedAt, sincronizado,
      grupoId, subgrupoId, codigoSap, descricao, prioridade);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DefeitoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.grupoId == this.grupoId &&
          other.subgrupoId == this.subgrupoId &&
          other.codigoSap == this.codigoSap &&
          other.descricao == this.descricao &&
          other.prioridade == this.prioridade);
}

class DefeitoTableCompanion extends UpdateCompanion<DefeitoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> grupoId;
  final Value<String> subgrupoId;
  final Value<String> codigoSap;
  final Value<String> descricao;
  final Value<PrioridadeDefeito> prioridade;
  const DefeitoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.subgrupoId = const Value.absent(),
    this.codigoSap = const Value.absent(),
    this.descricao = const Value.absent(),
    this.prioridade = const Value.absent(),
  });
  DefeitoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String grupoId,
    required String subgrupoId,
    required String codigoSap,
    required String descricao,
    required PrioridadeDefeito prioridade,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        grupoId = Value(grupoId),
        subgrupoId = Value(subgrupoId),
        codigoSap = Value(codigoSap),
        descricao = Value(descricao),
        prioridade = Value(prioridade);
  static Insertable<DefeitoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? grupoId,
    Expression<String>? subgrupoId,
    Expression<String>? codigoSap,
    Expression<String>? descricao,
    Expression<String>? prioridade,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (grupoId != null) 'grupo_id': grupoId,
      if (subgrupoId != null) 'subgrupo_id': subgrupoId,
      if (codigoSap != null) 'codigo_sap': codigoSap,
      if (descricao != null) 'descricao': descricao,
      if (prioridade != null) 'prioridade': prioridade,
    });
  }

  DefeitoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? grupoId,
      Value<String>? subgrupoId,
      Value<String>? codigoSap,
      Value<String>? descricao,
      Value<PrioridadeDefeito>? prioridade}) {
    return DefeitoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      grupoId: grupoId ?? this.grupoId,
      subgrupoId: subgrupoId ?? this.subgrupoId,
      codigoSap: codigoSap ?? this.codigoSap,
      descricao: descricao ?? this.descricao,
      prioridade: prioridade ?? this.prioridade,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (grupoId.present) {
      map['grupo_id'] = Variable<String>(grupoId.value);
    }
    if (subgrupoId.present) {
      map['subgrupo_id'] = Variable<String>(subgrupoId.value);
    }
    if (codigoSap.present) {
      map['codigo_sap'] = Variable<String>(codigoSap.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    if (prioridade.present) {
      map['prioridade'] = Variable<String>(
          $DefeitoTableTable.$converterprioridade.toSql(prioridade.value));
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DefeitoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('grupoId: $grupoId, ')
          ..write('subgrupoId: $subgrupoId, ')
          ..write('codigoSap: $codigoSap, ')
          ..write('descricao: $descricao, ')
          ..write('prioridade: $prioridade')
          ..write(')'))
        .toString();
  }
}

class $ChecklistPerguntaTableTable extends ChecklistPerguntaTable
    with TableInfo<$ChecklistPerguntaTableTable, ChecklistPerguntaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChecklistPerguntaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _perguntaMeta =
      const VerificationMeta('pergunta');
  @override
  late final GeneratedColumn<String> pergunta = GeneratedColumn<String>(
      'pergunta', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, pergunta];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'checklist_pergunta_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<ChecklistPerguntaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('pergunta')) {
      context.handle(_perguntaMeta,
          pergunta.isAcceptableOrUnknown(data['pergunta']!, _perguntaMeta));
    } else if (isInserting) {
      context.missing(_perguntaMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChecklistPerguntaTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChecklistPerguntaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      pergunta: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}pergunta'])!,
    );
  }

  @override
  $ChecklistPerguntaTableTable createAlias(String alias) {
    return $ChecklistPerguntaTableTable(attachedDatabase, alias);
  }
}

class ChecklistPerguntaTableData extends DataClass
    implements Insertable<ChecklistPerguntaTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String pergunta;
  const ChecklistPerguntaTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.pergunta});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['pergunta'] = Variable<String>(pergunta);
    return map;
  }

  ChecklistPerguntaTableCompanion toCompanion(bool nullToAbsent) {
    return ChecklistPerguntaTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      pergunta: Value(pergunta),
    );
  }

  factory ChecklistPerguntaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChecklistPerguntaTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      pergunta: serializer.fromJson<String>(json['pergunta']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'pergunta': serializer.toJson<String>(pergunta),
    };
  }

  ChecklistPerguntaTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? pergunta}) =>
      ChecklistPerguntaTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        pergunta: pergunta ?? this.pergunta,
      );
  ChecklistPerguntaTableData copyWithCompanion(
      ChecklistPerguntaTableCompanion data) {
    return ChecklistPerguntaTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      pergunta: data.pergunta.present ? data.pergunta.value : this.pergunta,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistPerguntaTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('pergunta: $pergunta')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, uuid, createdAt, updatedAt, sincronizado, pergunta);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChecklistPerguntaTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.pergunta == this.pergunta);
}

class ChecklistPerguntaTableCompanion
    extends UpdateCompanion<ChecklistPerguntaTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> pergunta;
  const ChecklistPerguntaTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.pergunta = const Value.absent(),
  });
  ChecklistPerguntaTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String pergunta,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        pergunta = Value(pergunta);
  static Insertable<ChecklistPerguntaTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? pergunta,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (pergunta != null) 'pergunta': pergunta,
    });
  }

  ChecklistPerguntaTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? pergunta}) {
    return ChecklistPerguntaTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      pergunta: pergunta ?? this.pergunta,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (pergunta.present) {
      map['pergunta'] = Variable<String>(pergunta.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistPerguntaTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('pergunta: $pergunta')
          ..write(')'))
        .toString();
  }
}

class $AnomaliaTableTable extends AnomaliaTable
    with TableInfo<$AnomaliaTableTable, AnomaliaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AnomaliaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _perguntaIdMeta =
      const VerificationMeta('perguntaId');
  @override
  late final GeneratedColumn<String> perguntaId = GeneratedColumn<String>(
      'pergunta_id', aliasedName, true,
      type: DriftSqlType.string,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_pergunta_table (uuid)'));
  static const VerificationMeta _atividadeIdMeta =
      const VerificationMeta('atividadeId');
  @override
  late final GeneratedColumn<String> atividadeId = GeneratedColumn<String>(
      'atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES atividade_table (uuid)'));
  static const VerificationMeta _equipamentoIdMeta =
      const VerificationMeta('equipamentoId');
  @override
  late final GeneratedColumn<String> equipamentoId = GeneratedColumn<String>(
      'equipamento_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES equipamento_table (uuid)'));
  static const VerificationMeta _defeitoIdMeta =
      const VerificationMeta('defeitoId');
  @override
  late final GeneratedColumn<String> defeitoId = GeneratedColumn<String>(
      'defeito_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES defeito_table (uuid)'));
  static const VerificationMeta _faseMeta = const VerificationMeta('fase');
  @override
  late final GeneratedColumnWithTypeConverter<FaseAnomalia, String> fase =
      GeneratedColumn<String>('fase', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<FaseAnomalia>($AnomaliaTableTable.$converterfase);
  static const VerificationMeta _ladoMeta = const VerificationMeta('lado');
  @override
  late final GeneratedColumnWithTypeConverter<LadoAnomalia, String> lado =
      GeneratedColumn<String>('lado', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<LadoAnomalia>($AnomaliaTableTable.$converterlado);
  static const VerificationMeta _deltaMeta = const VerificationMeta('delta');
  @override
  late final GeneratedColumn<double> delta = GeneratedColumn<double>(
      'delta', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _observacaoMeta =
      const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'observacao', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _fotoMeta = const VerificationMeta('foto');
  @override
  late final GeneratedColumn<Uint8List> foto = GeneratedColumn<Uint8List>(
      'foto', aliasedName, true,
      type: DriftSqlType.blob, requiredDuringInsert: false);
  static const VerificationMeta _corrigidaMeta =
      const VerificationMeta('corrigida');
  @override
  late final GeneratedColumn<bool> corrigida = GeneratedColumn<bool>(
      'corrigida', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('CHECK ("corrigida" IN (0, 1))'),
      defaultValue: const Constant(false));
  @override
  List<GeneratedColumn> get $columns => [
        id,
        perguntaId,
        atividadeId,
        equipamentoId,
        defeitoId,
        fase,
        lado,
        delta,
        observacao,
        foto,
        corrigida
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'anomalia_table';
  @override
  VerificationContext validateIntegrity(Insertable<AnomaliaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('pergunta_id')) {
      context.handle(
          _perguntaIdMeta,
          perguntaId.isAcceptableOrUnknown(
              data['pergunta_id']!, _perguntaIdMeta));
    }
    if (data.containsKey('atividade_id')) {
      context.handle(
          _atividadeIdMeta,
          atividadeId.isAcceptableOrUnknown(
              data['atividade_id']!, _atividadeIdMeta));
    } else if (isInserting) {
      context.missing(_atividadeIdMeta);
    }
    if (data.containsKey('equipamento_id')) {
      context.handle(
          _equipamentoIdMeta,
          equipamentoId.isAcceptableOrUnknown(
              data['equipamento_id']!, _equipamentoIdMeta));
    } else if (isInserting) {
      context.missing(_equipamentoIdMeta);
    }
    if (data.containsKey('defeito_id')) {
      context.handle(_defeitoIdMeta,
          defeitoId.isAcceptableOrUnknown(data['defeito_id']!, _defeitoIdMeta));
    } else if (isInserting) {
      context.missing(_defeitoIdMeta);
    }
    context.handle(_faseMeta, const VerificationResult.success());
    context.handle(_ladoMeta, const VerificationResult.success());
    if (data.containsKey('delta')) {
      context.handle(
          _deltaMeta, delta.isAcceptableOrUnknown(data['delta']!, _deltaMeta));
    }
    if (data.containsKey('observacao')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['observacao']!, _observacaoMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('corrigida')) {
      context.handle(_corrigidaMeta,
          corrigida.isAcceptableOrUnknown(data['corrigida']!, _corrigidaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AnomaliaTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AnomaliaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      perguntaId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}pergunta_id']),
      atividadeId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}atividade_id'])!,
      equipamentoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}equipamento_id'])!,
      defeitoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}defeito_id'])!,
      fase: $AnomaliaTableTable.$converterfase.fromSql(attachedDatabase
          .typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}fase'])!),
      lado: $AnomaliaTableTable.$converterlado.fromSql(attachedDatabase
          .typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}lado'])!),
      delta: attachedDatabase.typeMapping
          .read(DriftSqlType.double, data['${effectivePrefix}delta']),
      observacao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}observacao']),
      foto: attachedDatabase.typeMapping
          .read(DriftSqlType.blob, data['${effectivePrefix}foto']),
      corrigida: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}corrigida'])!,
    );
  }

  @override
  $AnomaliaTableTable createAlias(String alias) {
    return $AnomaliaTableTable(attachedDatabase, alias);
  }

  static TypeConverter<FaseAnomalia, String> $converterfase =
      const FaseAnomaliaConverter();
  static TypeConverter<LadoAnomalia, String> $converterlado =
      const LadoAnomaliaConverter();
}

class AnomaliaTableData extends DataClass
    implements Insertable<AnomaliaTableData> {
  final int id;
  final String? perguntaId;
  final String atividadeId;
  final String equipamentoId;
  final String defeitoId;
  final FaseAnomalia fase;
  final LadoAnomalia lado;
  final double? delta;
  final String? observacao;
  final Uint8List? foto;
  final bool corrigida;
  const AnomaliaTableData(
      {required this.id,
      this.perguntaId,
      required this.atividadeId,
      required this.equipamentoId,
      required this.defeitoId,
      required this.fase,
      required this.lado,
      this.delta,
      this.observacao,
      this.foto,
      required this.corrigida});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    if (!nullToAbsent || perguntaId != null) {
      map['pergunta_id'] = Variable<String>(perguntaId);
    }
    map['atividade_id'] = Variable<String>(atividadeId);
    map['equipamento_id'] = Variable<String>(equipamentoId);
    map['defeito_id'] = Variable<String>(defeitoId);
    {
      map['fase'] =
          Variable<String>($AnomaliaTableTable.$converterfase.toSql(fase));
    }
    {
      map['lado'] =
          Variable<String>($AnomaliaTableTable.$converterlado.toSql(lado));
    }
    if (!nullToAbsent || delta != null) {
      map['delta'] = Variable<double>(delta);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<Uint8List>(foto);
    }
    map['corrigida'] = Variable<bool>(corrigida);
    return map;
  }

  AnomaliaTableCompanion toCompanion(bool nullToAbsent) {
    return AnomaliaTableCompanion(
      id: Value(id),
      perguntaId: perguntaId == null && nullToAbsent
          ? const Value.absent()
          : Value(perguntaId),
      atividadeId: Value(atividadeId),
      equipamentoId: Value(equipamentoId),
      defeitoId: Value(defeitoId),
      fase: Value(fase),
      lado: Value(lado),
      delta:
          delta == null && nullToAbsent ? const Value.absent() : Value(delta),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      corrigida: Value(corrigida),
    );
  }

  factory AnomaliaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AnomaliaTableData(
      id: serializer.fromJson<int>(json['id']),
      perguntaId: serializer.fromJson<String?>(json['perguntaId']),
      atividadeId: serializer.fromJson<String>(json['atividadeId']),
      equipamentoId: serializer.fromJson<String>(json['equipamentoId']),
      defeitoId: serializer.fromJson<String>(json['defeitoId']),
      fase: serializer.fromJson<FaseAnomalia>(json['fase']),
      lado: serializer.fromJson<LadoAnomalia>(json['lado']),
      delta: serializer.fromJson<double?>(json['delta']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      foto: serializer.fromJson<Uint8List?>(json['foto']),
      corrigida: serializer.fromJson<bool>(json['corrigida']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'perguntaId': serializer.toJson<String?>(perguntaId),
      'atividadeId': serializer.toJson<String>(atividadeId),
      'equipamentoId': serializer.toJson<String>(equipamentoId),
      'defeitoId': serializer.toJson<String>(defeitoId),
      'fase': serializer.toJson<FaseAnomalia>(fase),
      'lado': serializer.toJson<LadoAnomalia>(lado),
      'delta': serializer.toJson<double?>(delta),
      'observacao': serializer.toJson<String?>(observacao),
      'foto': serializer.toJson<Uint8List?>(foto),
      'corrigida': serializer.toJson<bool>(corrigida),
    };
  }

  AnomaliaTableData copyWith(
          {int? id,
          Value<String?> perguntaId = const Value.absent(),
          String? atividadeId,
          String? equipamentoId,
          String? defeitoId,
          FaseAnomalia? fase,
          LadoAnomalia? lado,
          Value<double?> delta = const Value.absent(),
          Value<String?> observacao = const Value.absent(),
          Value<Uint8List?> foto = const Value.absent(),
          bool? corrigida}) =>
      AnomaliaTableData(
        id: id ?? this.id,
        perguntaId: perguntaId.present ? perguntaId.value : this.perguntaId,
        atividadeId: atividadeId ?? this.atividadeId,
        equipamentoId: equipamentoId ?? this.equipamentoId,
        defeitoId: defeitoId ?? this.defeitoId,
        fase: fase ?? this.fase,
        lado: lado ?? this.lado,
        delta: delta.present ? delta.value : this.delta,
        observacao: observacao.present ? observacao.value : this.observacao,
        foto: foto.present ? foto.value : this.foto,
        corrigida: corrigida ?? this.corrigida,
      );
  AnomaliaTableData copyWithCompanion(AnomaliaTableCompanion data) {
    return AnomaliaTableData(
      id: data.id.present ? data.id.value : this.id,
      perguntaId:
          data.perguntaId.present ? data.perguntaId.value : this.perguntaId,
      atividadeId:
          data.atividadeId.present ? data.atividadeId.value : this.atividadeId,
      equipamentoId: data.equipamentoId.present
          ? data.equipamentoId.value
          : this.equipamentoId,
      defeitoId: data.defeitoId.present ? data.defeitoId.value : this.defeitoId,
      fase: data.fase.present ? data.fase.value : this.fase,
      lado: data.lado.present ? data.lado.value : this.lado,
      delta: data.delta.present ? data.delta.value : this.delta,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      foto: data.foto.present ? data.foto.value : this.foto,
      corrigida: data.corrigida.present ? data.corrigida.value : this.corrigida,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AnomaliaTableData(')
          ..write('id: $id, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('equipamentoId: $equipamentoId, ')
          ..write('defeitoId: $defeitoId, ')
          ..write('fase: $fase, ')
          ..write('lado: $lado, ')
          ..write('delta: $delta, ')
          ..write('observacao: $observacao, ')
          ..write('foto: $foto, ')
          ..write('corrigida: $corrigida')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      perguntaId,
      atividadeId,
      equipamentoId,
      defeitoId,
      fase,
      lado,
      delta,
      observacao,
      $driftBlobEquality.hash(foto),
      corrigida);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AnomaliaTableData &&
          other.id == this.id &&
          other.perguntaId == this.perguntaId &&
          other.atividadeId == this.atividadeId &&
          other.equipamentoId == this.equipamentoId &&
          other.defeitoId == this.defeitoId &&
          other.fase == this.fase &&
          other.lado == this.lado &&
          other.delta == this.delta &&
          other.observacao == this.observacao &&
          $driftBlobEquality.equals(other.foto, this.foto) &&
          other.corrigida == this.corrigida);
}

class AnomaliaTableCompanion extends UpdateCompanion<AnomaliaTableData> {
  final Value<int> id;
  final Value<String?> perguntaId;
  final Value<String> atividadeId;
  final Value<String> equipamentoId;
  final Value<String> defeitoId;
  final Value<FaseAnomalia> fase;
  final Value<LadoAnomalia> lado;
  final Value<double?> delta;
  final Value<String?> observacao;
  final Value<Uint8List?> foto;
  final Value<bool> corrigida;
  const AnomaliaTableCompanion({
    this.id = const Value.absent(),
    this.perguntaId = const Value.absent(),
    this.atividadeId = const Value.absent(),
    this.equipamentoId = const Value.absent(),
    this.defeitoId = const Value.absent(),
    this.fase = const Value.absent(),
    this.lado = const Value.absent(),
    this.delta = const Value.absent(),
    this.observacao = const Value.absent(),
    this.foto = const Value.absent(),
    this.corrigida = const Value.absent(),
  });
  AnomaliaTableCompanion.insert({
    this.id = const Value.absent(),
    this.perguntaId = const Value.absent(),
    required String atividadeId,
    required String equipamentoId,
    required String defeitoId,
    required FaseAnomalia fase,
    required LadoAnomalia lado,
    this.delta = const Value.absent(),
    this.observacao = const Value.absent(),
    this.foto = const Value.absent(),
    this.corrigida = const Value.absent(),
  })  : atividadeId = Value(atividadeId),
        equipamentoId = Value(equipamentoId),
        defeitoId = Value(defeitoId),
        fase = Value(fase),
        lado = Value(lado);
  static Insertable<AnomaliaTableData> custom({
    Expression<int>? id,
    Expression<String>? perguntaId,
    Expression<String>? atividadeId,
    Expression<String>? equipamentoId,
    Expression<String>? defeitoId,
    Expression<String>? fase,
    Expression<String>? lado,
    Expression<double>? delta,
    Expression<String>? observacao,
    Expression<Uint8List>? foto,
    Expression<bool>? corrigida,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (perguntaId != null) 'pergunta_id': perguntaId,
      if (atividadeId != null) 'atividade_id': atividadeId,
      if (equipamentoId != null) 'equipamento_id': equipamentoId,
      if (defeitoId != null) 'defeito_id': defeitoId,
      if (fase != null) 'fase': fase,
      if (lado != null) 'lado': lado,
      if (delta != null) 'delta': delta,
      if (observacao != null) 'observacao': observacao,
      if (foto != null) 'foto': foto,
      if (corrigida != null) 'corrigida': corrigida,
    });
  }

  AnomaliaTableCompanion copyWith(
      {Value<int>? id,
      Value<String?>? perguntaId,
      Value<String>? atividadeId,
      Value<String>? equipamentoId,
      Value<String>? defeitoId,
      Value<FaseAnomalia>? fase,
      Value<LadoAnomalia>? lado,
      Value<double?>? delta,
      Value<String?>? observacao,
      Value<Uint8List?>? foto,
      Value<bool>? corrigida}) {
    return AnomaliaTableCompanion(
      id: id ?? this.id,
      perguntaId: perguntaId ?? this.perguntaId,
      atividadeId: atividadeId ?? this.atividadeId,
      equipamentoId: equipamentoId ?? this.equipamentoId,
      defeitoId: defeitoId ?? this.defeitoId,
      fase: fase ?? this.fase,
      lado: lado ?? this.lado,
      delta: delta ?? this.delta,
      observacao: observacao ?? this.observacao,
      foto: foto ?? this.foto,
      corrigida: corrigida ?? this.corrigida,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (perguntaId.present) {
      map['pergunta_id'] = Variable<String>(perguntaId.value);
    }
    if (atividadeId.present) {
      map['atividade_id'] = Variable<String>(atividadeId.value);
    }
    if (equipamentoId.present) {
      map['equipamento_id'] = Variable<String>(equipamentoId.value);
    }
    if (defeitoId.present) {
      map['defeito_id'] = Variable<String>(defeitoId.value);
    }
    if (fase.present) {
      map['fase'] = Variable<String>(
          $AnomaliaTableTable.$converterfase.toSql(fase.value));
    }
    if (lado.present) {
      map['lado'] = Variable<String>(
          $AnomaliaTableTable.$converterlado.toSql(lado.value));
    }
    if (delta.present) {
      map['delta'] = Variable<double>(delta.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (foto.present) {
      map['foto'] = Variable<Uint8List>(foto.value);
    }
    if (corrigida.present) {
      map['corrigida'] = Variable<bool>(corrigida.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AnomaliaTableCompanion(')
          ..write('id: $id, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('equipamentoId: $equipamentoId, ')
          ..write('defeitoId: $defeitoId, ')
          ..write('fase: $fase, ')
          ..write('lado: $lado, ')
          ..write('delta: $delta, ')
          ..write('observacao: $observacao, ')
          ..write('foto: $foto, ')
          ..write('corrigida: $corrigida')
          ..write(')'))
        .toString();
  }
}

class $CorrecaoAnomaliaTableTable extends CorrecaoAnomaliaTable
    with TableInfo<$CorrecaoAnomaliaTableTable, CorrecaoAnomaliaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CorrecaoAnomaliaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _anomaliaIdMeta =
      const VerificationMeta('anomaliaId');
  @override
  late final GeneratedColumn<int> anomaliaId = GeneratedColumn<int>(
      'anomalia_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('REFERENCES anomalia_table (id)'));
  static const VerificationMeta _atividadeIdMeta =
      const VerificationMeta('atividadeId');
  @override
  late final GeneratedColumn<String> atividadeId = GeneratedColumn<String>(
      'atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES atividade_table (uuid)'));
  static const VerificationMeta _fotoMeta = const VerificationMeta('foto');
  @override
  late final GeneratedColumn<Uint8List> foto = GeneratedColumn<Uint8List>(
      'foto', aliasedName, true,
      type: DriftSqlType.blob, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, anomaliaId, atividadeId, foto];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'correcao_anomalia_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<CorrecaoAnomaliaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('anomalia_id')) {
      context.handle(
          _anomaliaIdMeta,
          anomaliaId.isAcceptableOrUnknown(
              data['anomalia_id']!, _anomaliaIdMeta));
    } else if (isInserting) {
      context.missing(_anomaliaIdMeta);
    }
    if (data.containsKey('atividade_id')) {
      context.handle(
          _atividadeIdMeta,
          atividadeId.isAcceptableOrUnknown(
              data['atividade_id']!, _atividadeIdMeta));
    } else if (isInserting) {
      context.missing(_atividadeIdMeta);
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CorrecaoAnomaliaTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return CorrecaoAnomaliaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      anomaliaId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}anomalia_id'])!,
      atividadeId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}atividade_id'])!,
      foto: attachedDatabase.typeMapping
          .read(DriftSqlType.blob, data['${effectivePrefix}foto']),
    );
  }

  @override
  $CorrecaoAnomaliaTableTable createAlias(String alias) {
    return $CorrecaoAnomaliaTableTable(attachedDatabase, alias);
  }
}

class CorrecaoAnomaliaTableData extends DataClass
    implements Insertable<CorrecaoAnomaliaTableData> {
  final int id;
  final int anomaliaId;
  final String atividadeId;
  final Uint8List? foto;
  const CorrecaoAnomaliaTableData(
      {required this.id,
      required this.anomaliaId,
      required this.atividadeId,
      this.foto});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['anomalia_id'] = Variable<int>(anomaliaId);
    map['atividade_id'] = Variable<String>(atividadeId);
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<Uint8List>(foto);
    }
    return map;
  }

  CorrecaoAnomaliaTableCompanion toCompanion(bool nullToAbsent) {
    return CorrecaoAnomaliaTableCompanion(
      id: Value(id),
      anomaliaId: Value(anomaliaId),
      atividadeId: Value(atividadeId),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
    );
  }

  factory CorrecaoAnomaliaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CorrecaoAnomaliaTableData(
      id: serializer.fromJson<int>(json['id']),
      anomaliaId: serializer.fromJson<int>(json['anomaliaId']),
      atividadeId: serializer.fromJson<String>(json['atividadeId']),
      foto: serializer.fromJson<Uint8List?>(json['foto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'anomaliaId': serializer.toJson<int>(anomaliaId),
      'atividadeId': serializer.toJson<String>(atividadeId),
      'foto': serializer.toJson<Uint8List?>(foto),
    };
  }

  CorrecaoAnomaliaTableData copyWith(
          {int? id,
          int? anomaliaId,
          String? atividadeId,
          Value<Uint8List?> foto = const Value.absent()}) =>
      CorrecaoAnomaliaTableData(
        id: id ?? this.id,
        anomaliaId: anomaliaId ?? this.anomaliaId,
        atividadeId: atividadeId ?? this.atividadeId,
        foto: foto.present ? foto.value : this.foto,
      );
  CorrecaoAnomaliaTableData copyWithCompanion(
      CorrecaoAnomaliaTableCompanion data) {
    return CorrecaoAnomaliaTableData(
      id: data.id.present ? data.id.value : this.id,
      anomaliaId:
          data.anomaliaId.present ? data.anomaliaId.value : this.anomaliaId,
      atividadeId:
          data.atividadeId.present ? data.atividadeId.value : this.atividadeId,
      foto: data.foto.present ? data.foto.value : this.foto,
    );
  }

  @override
  String toString() {
    return (StringBuffer('CorrecaoAnomaliaTableData(')
          ..write('id: $id, ')
          ..write('anomaliaId: $anomaliaId, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('foto: $foto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, anomaliaId, atividadeId, $driftBlobEquality.hash(foto));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CorrecaoAnomaliaTableData &&
          other.id == this.id &&
          other.anomaliaId == this.anomaliaId &&
          other.atividadeId == this.atividadeId &&
          $driftBlobEquality.equals(other.foto, this.foto));
}

class CorrecaoAnomaliaTableCompanion
    extends UpdateCompanion<CorrecaoAnomaliaTableData> {
  final Value<int> id;
  final Value<int> anomaliaId;
  final Value<String> atividadeId;
  final Value<Uint8List?> foto;
  const CorrecaoAnomaliaTableCompanion({
    this.id = const Value.absent(),
    this.anomaliaId = const Value.absent(),
    this.atividadeId = const Value.absent(),
    this.foto = const Value.absent(),
  });
  CorrecaoAnomaliaTableCompanion.insert({
    this.id = const Value.absent(),
    required int anomaliaId,
    required String atividadeId,
    this.foto = const Value.absent(),
  })  : anomaliaId = Value(anomaliaId),
        atividadeId = Value(atividadeId);
  static Insertable<CorrecaoAnomaliaTableData> custom({
    Expression<int>? id,
    Expression<int>? anomaliaId,
    Expression<String>? atividadeId,
    Expression<Uint8List>? foto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (anomaliaId != null) 'anomalia_id': anomaliaId,
      if (atividadeId != null) 'atividade_id': atividadeId,
      if (foto != null) 'foto': foto,
    });
  }

  CorrecaoAnomaliaTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? anomaliaId,
      Value<String>? atividadeId,
      Value<Uint8List?>? foto}) {
    return CorrecaoAnomaliaTableCompanion(
      id: id ?? this.id,
      anomaliaId: anomaliaId ?? this.anomaliaId,
      atividadeId: atividadeId ?? this.atividadeId,
      foto: foto ?? this.foto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (anomaliaId.present) {
      map['anomalia_id'] = Variable<int>(anomaliaId.value);
    }
    if (atividadeId.present) {
      map['atividade_id'] = Variable<String>(atividadeId.value);
    }
    if (foto.present) {
      map['foto'] = Variable<Uint8List>(foto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CorrecaoAnomaliaTableCompanion(')
          ..write('id: $id, ')
          ..write('anomaliaId: $anomaliaId, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('foto: $foto')
          ..write(')'))
        .toString();
  }
}

class $ChecklistTableTable extends ChecklistTable
    with TableInfo<$ChecklistTableTable, ChecklistTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChecklistTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _descricaoMeta =
      const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'descricao', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, nome, descricao];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'checklist_table';
  @override
  VerificationContext validateIntegrity(Insertable<ChecklistTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('descricao')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChecklistTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChecklistTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      descricao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}descricao']),
    );
  }

  @override
  $ChecklistTableTable createAlias(String alias) {
    return $ChecklistTableTable(attachedDatabase, alias);
  }
}

class ChecklistTableData extends DataClass
    implements Insertable<ChecklistTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final String? descricao;
  const ChecklistTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      this.descricao});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    return map;
  }

  ChecklistTableCompanion toCompanion(bool nullToAbsent) {
    return ChecklistTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory ChecklistTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChecklistTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ChecklistTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          Value<String?> descricao = const Value.absent()}) =>
      ChecklistTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        descricao: descricao.present ? descricao.value : this.descricao,
      );
  ChecklistTableData copyWithCompanion(ChecklistTableCompanion data) {
    return ChecklistTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChecklistTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class ChecklistTableCompanion extends UpdateCompanion<ChecklistTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<String?> descricao;
  const ChecklistTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ChecklistTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    this.descricao = const Value.absent(),
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome);
  static Insertable<ChecklistTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
    });
  }

  ChecklistTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<String?>? descricao}) {
    return ChecklistTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ChecklistPerguntaRelacionamentoTableTable
    extends ChecklistPerguntaRelacionamentoTable
    with
        TableInfo<$ChecklistPerguntaRelacionamentoTableTable,
            ChecklistPerguntaRelacionamentoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChecklistPerguntaRelacionamentoTableTable(this.attachedDatabase,
      [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _checklistIdMeta =
      const VerificationMeta('checklistId');
  @override
  late final GeneratedColumn<String> checklistId = GeneratedColumn<String>(
      'checklist_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_table (uuid)'));
  static const VerificationMeta _perguntaIdMeta =
      const VerificationMeta('perguntaId');
  @override
  late final GeneratedColumn<String> perguntaId = GeneratedColumn<String>(
      'pergunta_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_pergunta_table (uuid)'));
  static const VerificationMeta _ordemMeta = const VerificationMeta('ordem');
  @override
  late final GeneratedColumn<int> ordem = GeneratedColumn<int>(
      'ordem', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultValue: const Constant(0));
  @override
  List<GeneratedColumn> get $columns => [
        id,
        uuid,
        createdAt,
        updatedAt,
        sincronizado,
        checklistId,
        perguntaId,
        ordem
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'checklist_pergunta_relacionamento_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<ChecklistPerguntaRelacionamentoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('checklist_id')) {
      context.handle(
          _checklistIdMeta,
          checklistId.isAcceptableOrUnknown(
              data['checklist_id']!, _checklistIdMeta));
    } else if (isInserting) {
      context.missing(_checklistIdMeta);
    }
    if (data.containsKey('pergunta_id')) {
      context.handle(
          _perguntaIdMeta,
          perguntaId.isAcceptableOrUnknown(
              data['pergunta_id']!, _perguntaIdMeta));
    } else if (isInserting) {
      context.missing(_perguntaIdMeta);
    }
    if (data.containsKey('ordem')) {
      context.handle(
          _ordemMeta, ordem.isAcceptableOrUnknown(data['ordem']!, _ordemMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChecklistPerguntaRelacionamentoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChecklistPerguntaRelacionamentoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      checklistId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}checklist_id'])!,
      perguntaId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}pergunta_id'])!,
      ordem: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}ordem'])!,
    );
  }

  @override
  $ChecklistPerguntaRelacionamentoTableTable createAlias(String alias) {
    return $ChecklistPerguntaRelacionamentoTableTable(attachedDatabase, alias);
  }
}

class ChecklistPerguntaRelacionamentoTableData extends DataClass
    implements Insertable<ChecklistPerguntaRelacionamentoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String checklistId;
  final String perguntaId;
  final int ordem;
  const ChecklistPerguntaRelacionamentoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.checklistId,
      required this.perguntaId,
      required this.ordem});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['checklist_id'] = Variable<String>(checklistId);
    map['pergunta_id'] = Variable<String>(perguntaId);
    map['ordem'] = Variable<int>(ordem);
    return map;
  }

  ChecklistPerguntaRelacionamentoTableCompanion toCompanion(bool nullToAbsent) {
    return ChecklistPerguntaRelacionamentoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      checklistId: Value(checklistId),
      perguntaId: Value(perguntaId),
      ordem: Value(ordem),
    );
  }

  factory ChecklistPerguntaRelacionamentoTableData.fromJson(
      Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChecklistPerguntaRelacionamentoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      checklistId: serializer.fromJson<String>(json['checklistId']),
      perguntaId: serializer.fromJson<String>(json['perguntaId']),
      ordem: serializer.fromJson<int>(json['ordem']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'checklistId': serializer.toJson<String>(checklistId),
      'perguntaId': serializer.toJson<String>(perguntaId),
      'ordem': serializer.toJson<int>(ordem),
    };
  }

  ChecklistPerguntaRelacionamentoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? checklistId,
          String? perguntaId,
          int? ordem}) =>
      ChecklistPerguntaRelacionamentoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        checklistId: checklistId ?? this.checklistId,
        perguntaId: perguntaId ?? this.perguntaId,
        ordem: ordem ?? this.ordem,
      );
  ChecklistPerguntaRelacionamentoTableData copyWithCompanion(
      ChecklistPerguntaRelacionamentoTableCompanion data) {
    return ChecklistPerguntaRelacionamentoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      checklistId:
          data.checklistId.present ? data.checklistId.value : this.checklistId,
      perguntaId:
          data.perguntaId.present ? data.perguntaId.value : this.perguntaId,
      ordem: data.ordem.present ? data.ordem.value : this.ordem,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistPerguntaRelacionamentoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('checklistId: $checklistId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('ordem: $ordem')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, uuid, createdAt, updatedAt, sincronizado,
      checklistId, perguntaId, ordem);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChecklistPerguntaRelacionamentoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.checklistId == this.checklistId &&
          other.perguntaId == this.perguntaId &&
          other.ordem == this.ordem);
}

class ChecklistPerguntaRelacionamentoTableCompanion
    extends UpdateCompanion<ChecklistPerguntaRelacionamentoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> checklistId;
  final Value<String> perguntaId;
  final Value<int> ordem;
  const ChecklistPerguntaRelacionamentoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.checklistId = const Value.absent(),
    this.perguntaId = const Value.absent(),
    this.ordem = const Value.absent(),
  });
  ChecklistPerguntaRelacionamentoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String checklistId,
    required String perguntaId,
    this.ordem = const Value.absent(),
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        checklistId = Value(checklistId),
        perguntaId = Value(perguntaId);
  static Insertable<ChecklistPerguntaRelacionamentoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? checklistId,
    Expression<String>? perguntaId,
    Expression<int>? ordem,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (checklistId != null) 'checklist_id': checklistId,
      if (perguntaId != null) 'pergunta_id': perguntaId,
      if (ordem != null) 'ordem': ordem,
    });
  }

  ChecklistPerguntaRelacionamentoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? checklistId,
      Value<String>? perguntaId,
      Value<int>? ordem}) {
    return ChecklistPerguntaRelacionamentoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      checklistId: checklistId ?? this.checklistId,
      perguntaId: perguntaId ?? this.perguntaId,
      ordem: ordem ?? this.ordem,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (checklistId.present) {
      map['checklist_id'] = Variable<String>(checklistId.value);
    }
    if (perguntaId.present) {
      map['pergunta_id'] = Variable<String>(perguntaId.value);
    }
    if (ordem.present) {
      map['ordem'] = Variable<int>(ordem.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistPerguntaRelacionamentoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('checklistId: $checklistId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('ordem: $ordem')
          ..write(')'))
        .toString();
  }
}

class $ChecklistPreenchidoTableTable extends ChecklistPreenchidoTable
    with
        TableInfo<$ChecklistPreenchidoTableTable,
            ChecklistPreenchidoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChecklistPreenchidoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _atividadeIdMeta =
      const VerificationMeta('atividadeId');
  @override
  late final GeneratedColumn<String> atividadeId = GeneratedColumn<String>(
      'atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES atividade_table (uuid)'));
  static const VerificationMeta _checklistIdMeta =
      const VerificationMeta('checklistId');
  @override
  late final GeneratedColumn<String> checklistId = GeneratedColumn<String>(
      'checklist_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_table (uuid)'));
  static const VerificationMeta _usuarioIdMeta =
      const VerificationMeta('usuarioId');
  @override
  late final GeneratedColumn<String> usuarioId = GeneratedColumn<String>(
      'usuario_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES usuario_table (uuid)'));
  static const VerificationMeta _dataPreenchimentoMeta =
      const VerificationMeta('dataPreenchimento');
  @override
  late final GeneratedColumn<DateTime> dataPreenchimento =
      GeneratedColumn<DateTime>('data_preenchimento', aliasedName, false,
          type: DriftSqlType.dateTime, requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, atividadeId, checklistId, usuarioId, dataPreenchimento];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'checklist_preenchido_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<ChecklistPreenchidoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('atividade_id')) {
      context.handle(
          _atividadeIdMeta,
          atividadeId.isAcceptableOrUnknown(
              data['atividade_id']!, _atividadeIdMeta));
    } else if (isInserting) {
      context.missing(_atividadeIdMeta);
    }
    if (data.containsKey('checklist_id')) {
      context.handle(
          _checklistIdMeta,
          checklistId.isAcceptableOrUnknown(
              data['checklist_id']!, _checklistIdMeta));
    } else if (isInserting) {
      context.missing(_checklistIdMeta);
    }
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    } else if (isInserting) {
      context.missing(_usuarioIdMeta);
    }
    if (data.containsKey('data_preenchimento')) {
      context.handle(
          _dataPreenchimentoMeta,
          dataPreenchimento.isAcceptableOrUnknown(
              data['data_preenchimento']!, _dataPreenchimentoMeta));
    } else if (isInserting) {
      context.missing(_dataPreenchimentoMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChecklistPreenchidoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChecklistPreenchidoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      atividadeId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}atividade_id'])!,
      checklistId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}checklist_id'])!,
      usuarioId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}usuario_id'])!,
      dataPreenchimento: attachedDatabase.typeMapping.read(
          DriftSqlType.dateTime, data['${effectivePrefix}data_preenchimento'])!,
    );
  }

  @override
  $ChecklistPreenchidoTableTable createAlias(String alias) {
    return $ChecklistPreenchidoTableTable(attachedDatabase, alias);
  }
}

class ChecklistPreenchidoTableData extends DataClass
    implements Insertable<ChecklistPreenchidoTableData> {
  final int id;
  final String atividadeId;
  final String checklistId;
  final String usuarioId;
  final DateTime dataPreenchimento;
  const ChecklistPreenchidoTableData(
      {required this.id,
      required this.atividadeId,
      required this.checklistId,
      required this.usuarioId,
      required this.dataPreenchimento});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['atividade_id'] = Variable<String>(atividadeId);
    map['checklist_id'] = Variable<String>(checklistId);
    map['usuario_id'] = Variable<String>(usuarioId);
    map['data_preenchimento'] = Variable<DateTime>(dataPreenchimento);
    return map;
  }

  ChecklistPreenchidoTableCompanion toCompanion(bool nullToAbsent) {
    return ChecklistPreenchidoTableCompanion(
      id: Value(id),
      atividadeId: Value(atividadeId),
      checklistId: Value(checklistId),
      usuarioId: Value(usuarioId),
      dataPreenchimento: Value(dataPreenchimento),
    );
  }

  factory ChecklistPreenchidoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChecklistPreenchidoTableData(
      id: serializer.fromJson<int>(json['id']),
      atividadeId: serializer.fromJson<String>(json['atividadeId']),
      checklistId: serializer.fromJson<String>(json['checklistId']),
      usuarioId: serializer.fromJson<String>(json['usuarioId']),
      dataPreenchimento:
          serializer.fromJson<DateTime>(json['dataPreenchimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'atividadeId': serializer.toJson<String>(atividadeId),
      'checklistId': serializer.toJson<String>(checklistId),
      'usuarioId': serializer.toJson<String>(usuarioId),
      'dataPreenchimento': serializer.toJson<DateTime>(dataPreenchimento),
    };
  }

  ChecklistPreenchidoTableData copyWith(
          {int? id,
          String? atividadeId,
          String? checklistId,
          String? usuarioId,
          DateTime? dataPreenchimento}) =>
      ChecklistPreenchidoTableData(
        id: id ?? this.id,
        atividadeId: atividadeId ?? this.atividadeId,
        checklistId: checklistId ?? this.checklistId,
        usuarioId: usuarioId ?? this.usuarioId,
        dataPreenchimento: dataPreenchimento ?? this.dataPreenchimento,
      );
  ChecklistPreenchidoTableData copyWithCompanion(
      ChecklistPreenchidoTableCompanion data) {
    return ChecklistPreenchidoTableData(
      id: data.id.present ? data.id.value : this.id,
      atividadeId:
          data.atividadeId.present ? data.atividadeId.value : this.atividadeId,
      checklistId:
          data.checklistId.present ? data.checklistId.value : this.checklistId,
      usuarioId: data.usuarioId.present ? data.usuarioId.value : this.usuarioId,
      dataPreenchimento: data.dataPreenchimento.present
          ? data.dataPreenchimento.value
          : this.dataPreenchimento,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistPreenchidoTableData(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('checklistId: $checklistId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('dataPreenchimento: $dataPreenchimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, atividadeId, checklistId, usuarioId, dataPreenchimento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChecklistPreenchidoTableData &&
          other.id == this.id &&
          other.atividadeId == this.atividadeId &&
          other.checklistId == this.checklistId &&
          other.usuarioId == this.usuarioId &&
          other.dataPreenchimento == this.dataPreenchimento);
}

class ChecklistPreenchidoTableCompanion
    extends UpdateCompanion<ChecklistPreenchidoTableData> {
  final Value<int> id;
  final Value<String> atividadeId;
  final Value<String> checklistId;
  final Value<String> usuarioId;
  final Value<DateTime> dataPreenchimento;
  const ChecklistPreenchidoTableCompanion({
    this.id = const Value.absent(),
    this.atividadeId = const Value.absent(),
    this.checklistId = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.dataPreenchimento = const Value.absent(),
  });
  ChecklistPreenchidoTableCompanion.insert({
    this.id = const Value.absent(),
    required String atividadeId,
    required String checklistId,
    required String usuarioId,
    required DateTime dataPreenchimento,
  })  : atividadeId = Value(atividadeId),
        checklistId = Value(checklistId),
        usuarioId = Value(usuarioId),
        dataPreenchimento = Value(dataPreenchimento);
  static Insertable<ChecklistPreenchidoTableData> custom({
    Expression<int>? id,
    Expression<String>? atividadeId,
    Expression<String>? checklistId,
    Expression<String>? usuarioId,
    Expression<DateTime>? dataPreenchimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (atividadeId != null) 'atividade_id': atividadeId,
      if (checklistId != null) 'checklist_id': checklistId,
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (dataPreenchimento != null) 'data_preenchimento': dataPreenchimento,
    });
  }

  ChecklistPreenchidoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? atividadeId,
      Value<String>? checklistId,
      Value<String>? usuarioId,
      Value<DateTime>? dataPreenchimento}) {
    return ChecklistPreenchidoTableCompanion(
      id: id ?? this.id,
      atividadeId: atividadeId ?? this.atividadeId,
      checklistId: checklistId ?? this.checklistId,
      usuarioId: usuarioId ?? this.usuarioId,
      dataPreenchimento: dataPreenchimento ?? this.dataPreenchimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (atividadeId.present) {
      map['atividade_id'] = Variable<String>(atividadeId.value);
    }
    if (checklistId.present) {
      map['checklist_id'] = Variable<String>(checklistId.value);
    }
    if (usuarioId.present) {
      map['usuario_id'] = Variable<String>(usuarioId.value);
    }
    if (dataPreenchimento.present) {
      map['data_preenchimento'] = Variable<DateTime>(dataPreenchimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistPreenchidoTableCompanion(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('checklistId: $checklistId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('dataPreenchimento: $dataPreenchimento')
          ..write(')'))
        .toString();
  }
}

class $ChecklistRespostaTableTable extends ChecklistRespostaTable
    with TableInfo<$ChecklistRespostaTableTable, ChecklistRespostaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChecklistRespostaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _checklistPreenchidoIdMeta =
      const VerificationMeta('checklistPreenchidoId');
  @override
  late final GeneratedColumn<int> checklistPreenchidoId = GeneratedColumn<int>(
      'checklist_preenchido_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_preenchido_table (id)'));
  static const VerificationMeta _perguntaIdMeta =
      const VerificationMeta('perguntaId');
  @override
  late final GeneratedColumn<String> perguntaId = GeneratedColumn<String>(
      'pergunta_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_pergunta_table (uuid)'));
  static const VerificationMeta _respostaMeta =
      const VerificationMeta('resposta');
  @override
  late final GeneratedColumnWithTypeConverter<RespostaChecklist, String>
      resposta = GeneratedColumn<String>('resposta', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<RespostaChecklist>(
              $ChecklistRespostaTableTable.$converterresposta);
  @override
  List<GeneratedColumn> get $columns =>
      [id, checklistPreenchidoId, perguntaId, resposta];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'checklist_resposta_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<ChecklistRespostaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('checklist_preenchido_id')) {
      context.handle(
          _checklistPreenchidoIdMeta,
          checklistPreenchidoId.isAcceptableOrUnknown(
              data['checklist_preenchido_id']!, _checklistPreenchidoIdMeta));
    } else if (isInserting) {
      context.missing(_checklistPreenchidoIdMeta);
    }
    if (data.containsKey('pergunta_id')) {
      context.handle(
          _perguntaIdMeta,
          perguntaId.isAcceptableOrUnknown(
              data['pergunta_id']!, _perguntaIdMeta));
    } else if (isInserting) {
      context.missing(_perguntaIdMeta);
    }
    context.handle(_respostaMeta, const VerificationResult.success());
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChecklistRespostaTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChecklistRespostaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      checklistPreenchidoId: attachedDatabase.typeMapping.read(
          DriftSqlType.int, data['${effectivePrefix}checklist_preenchido_id'])!,
      perguntaId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}pergunta_id'])!,
      resposta: $ChecklistRespostaTableTable.$converterresposta.fromSql(
          attachedDatabase.typeMapping
              .read(DriftSqlType.string, data['${effectivePrefix}resposta'])!),
    );
  }

  @override
  $ChecklistRespostaTableTable createAlias(String alias) {
    return $ChecklistRespostaTableTable(attachedDatabase, alias);
  }

  static TypeConverter<RespostaChecklist, String> $converterresposta =
      const RespostaChecklistConverter();
}

class ChecklistRespostaTableData extends DataClass
    implements Insertable<ChecklistRespostaTableData> {
  final int id;
  final int checklistPreenchidoId;
  final String perguntaId;
  final RespostaChecklist resposta;
  const ChecklistRespostaTableData(
      {required this.id,
      required this.checklistPreenchidoId,
      required this.perguntaId,
      required this.resposta});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['checklist_preenchido_id'] = Variable<int>(checklistPreenchidoId);
    map['pergunta_id'] = Variable<String>(perguntaId);
    {
      map['resposta'] = Variable<String>(
          $ChecklistRespostaTableTable.$converterresposta.toSql(resposta));
    }
    return map;
  }

  ChecklistRespostaTableCompanion toCompanion(bool nullToAbsent) {
    return ChecklistRespostaTableCompanion(
      id: Value(id),
      checklistPreenchidoId: Value(checklistPreenchidoId),
      perguntaId: Value(perguntaId),
      resposta: Value(resposta),
    );
  }

  factory ChecklistRespostaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChecklistRespostaTableData(
      id: serializer.fromJson<int>(json['id']),
      checklistPreenchidoId:
          serializer.fromJson<int>(json['checklistPreenchidoId']),
      perguntaId: serializer.fromJson<String>(json['perguntaId']),
      resposta: serializer.fromJson<RespostaChecklist>(json['resposta']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'checklistPreenchidoId': serializer.toJson<int>(checklistPreenchidoId),
      'perguntaId': serializer.toJson<String>(perguntaId),
      'resposta': serializer.toJson<RespostaChecklist>(resposta),
    };
  }

  ChecklistRespostaTableData copyWith(
          {int? id,
          int? checklistPreenchidoId,
          String? perguntaId,
          RespostaChecklist? resposta}) =>
      ChecklistRespostaTableData(
        id: id ?? this.id,
        checklistPreenchidoId:
            checklistPreenchidoId ?? this.checklistPreenchidoId,
        perguntaId: perguntaId ?? this.perguntaId,
        resposta: resposta ?? this.resposta,
      );
  ChecklistRespostaTableData copyWithCompanion(
      ChecklistRespostaTableCompanion data) {
    return ChecklistRespostaTableData(
      id: data.id.present ? data.id.value : this.id,
      checklistPreenchidoId: data.checklistPreenchidoId.present
          ? data.checklistPreenchidoId.value
          : this.checklistPreenchidoId,
      perguntaId:
          data.perguntaId.present ? data.perguntaId.value : this.perguntaId,
      resposta: data.resposta.present ? data.resposta.value : this.resposta,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistRespostaTableData(')
          ..write('id: $id, ')
          ..write('checklistPreenchidoId: $checklistPreenchidoId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('resposta: $resposta')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, checklistPreenchidoId, perguntaId, resposta);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChecklistRespostaTableData &&
          other.id == this.id &&
          other.checklistPreenchidoId == this.checklistPreenchidoId &&
          other.perguntaId == this.perguntaId &&
          other.resposta == this.resposta);
}

class ChecklistRespostaTableCompanion
    extends UpdateCompanion<ChecklistRespostaTableData> {
  final Value<int> id;
  final Value<int> checklistPreenchidoId;
  final Value<String> perguntaId;
  final Value<RespostaChecklist> resposta;
  const ChecklistRespostaTableCompanion({
    this.id = const Value.absent(),
    this.checklistPreenchidoId = const Value.absent(),
    this.perguntaId = const Value.absent(),
    this.resposta = const Value.absent(),
  });
  ChecklistRespostaTableCompanion.insert({
    this.id = const Value.absent(),
    required int checklistPreenchidoId,
    required String perguntaId,
    required RespostaChecklist resposta,
  })  : checklistPreenchidoId = Value(checklistPreenchidoId),
        perguntaId = Value(perguntaId),
        resposta = Value(resposta);
  static Insertable<ChecklistRespostaTableData> custom({
    Expression<int>? id,
    Expression<int>? checklistPreenchidoId,
    Expression<String>? perguntaId,
    Expression<String>? resposta,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (checklistPreenchidoId != null)
        'checklist_preenchido_id': checklistPreenchidoId,
      if (perguntaId != null) 'pergunta_id': perguntaId,
      if (resposta != null) 'resposta': resposta,
    });
  }

  ChecklistRespostaTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? checklistPreenchidoId,
      Value<String>? perguntaId,
      Value<RespostaChecklist>? resposta}) {
    return ChecklistRespostaTableCompanion(
      id: id ?? this.id,
      checklistPreenchidoId:
          checklistPreenchidoId ?? this.checklistPreenchidoId,
      perguntaId: perguntaId ?? this.perguntaId,
      resposta: resposta ?? this.resposta,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (checklistPreenchidoId.present) {
      map['checklist_preenchido_id'] =
          Variable<int>(checklistPreenchidoId.value);
    }
    if (perguntaId.present) {
      map['pergunta_id'] = Variable<String>(perguntaId.value);
    }
    if (resposta.present) {
      map['resposta'] = Variable<String>($ChecklistRespostaTableTable
          .$converterresposta
          .toSql(resposta.value));
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistRespostaTableCompanion(')
          ..write('id: $id, ')
          ..write('checklistPreenchidoId: $checklistPreenchidoId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('resposta: $resposta')
          ..write(')'))
        .toString();
  }
}

class $ChecklistTipoAtividadeTableTable extends ChecklistTipoAtividadeTable
    with
        TableInfo<$ChecklistTipoAtividadeTableTable,
            ChecklistTipoAtividadeTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChecklistTipoAtividadeTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _checklistIdMeta =
      const VerificationMeta('checklistId');
  @override
  late final GeneratedColumn<String> checklistId = GeneratedColumn<String>(
      'checklist_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES checklist_table (uuid)'));
  static const VerificationMeta _tipoAtividadeIdMeta =
      const VerificationMeta('tipoAtividadeId');
  @override
  late final GeneratedColumn<String> tipoAtividadeId = GeneratedColumn<String>(
      'tipo_atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES tipo_atividade_table (uuid)'));
  @override
  List<GeneratedColumn> get $columns => [
        id,
        uuid,
        createdAt,
        updatedAt,
        sincronizado,
        checklistId,
        tipoAtividadeId
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'checklist_tipo_atividade_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<ChecklistTipoAtividadeTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('checklist_id')) {
      context.handle(
          _checklistIdMeta,
          checklistId.isAcceptableOrUnknown(
              data['checklist_id']!, _checklistIdMeta));
    } else if (isInserting) {
      context.missing(_checklistIdMeta);
    }
    if (data.containsKey('tipo_atividade_id')) {
      context.handle(
          _tipoAtividadeIdMeta,
          tipoAtividadeId.isAcceptableOrUnknown(
              data['tipo_atividade_id']!, _tipoAtividadeIdMeta));
    } else if (isInserting) {
      context.missing(_tipoAtividadeIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChecklistTipoAtividadeTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChecklistTipoAtividadeTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      checklistId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}checklist_id'])!,
      tipoAtividadeId: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}tipo_atividade_id'])!,
    );
  }

  @override
  $ChecklistTipoAtividadeTableTable createAlias(String alias) {
    return $ChecklistTipoAtividadeTableTable(attachedDatabase, alias);
  }
}

class ChecklistTipoAtividadeTableData extends DataClass
    implements Insertable<ChecklistTipoAtividadeTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String checklistId;
  final String tipoAtividadeId;
  const ChecklistTipoAtividadeTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.checklistId,
      required this.tipoAtividadeId});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['checklist_id'] = Variable<String>(checklistId);
    map['tipo_atividade_id'] = Variable<String>(tipoAtividadeId);
    return map;
  }

  ChecklistTipoAtividadeTableCompanion toCompanion(bool nullToAbsent) {
    return ChecklistTipoAtividadeTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      checklistId: Value(checklistId),
      tipoAtividadeId: Value(tipoAtividadeId),
    );
  }

  factory ChecklistTipoAtividadeTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChecklistTipoAtividadeTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      checklistId: serializer.fromJson<String>(json['checklistId']),
      tipoAtividadeId: serializer.fromJson<String>(json['tipoAtividadeId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'checklistId': serializer.toJson<String>(checklistId),
      'tipoAtividadeId': serializer.toJson<String>(tipoAtividadeId),
    };
  }

  ChecklistTipoAtividadeTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? checklistId,
          String? tipoAtividadeId}) =>
      ChecklistTipoAtividadeTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        checklistId: checklistId ?? this.checklistId,
        tipoAtividadeId: tipoAtividadeId ?? this.tipoAtividadeId,
      );
  ChecklistTipoAtividadeTableData copyWithCompanion(
      ChecklistTipoAtividadeTableCompanion data) {
    return ChecklistTipoAtividadeTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      checklistId:
          data.checklistId.present ? data.checklistId.value : this.checklistId,
      tipoAtividadeId: data.tipoAtividadeId.present
          ? data.tipoAtividadeId.value
          : this.tipoAtividadeId,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistTipoAtividadeTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('checklistId: $checklistId, ')
          ..write('tipoAtividadeId: $tipoAtividadeId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, uuid, createdAt, updatedAt, sincronizado,
      checklistId, tipoAtividadeId);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChecklistTipoAtividadeTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.checklistId == this.checklistId &&
          other.tipoAtividadeId == this.tipoAtividadeId);
}

class ChecklistTipoAtividadeTableCompanion
    extends UpdateCompanion<ChecklistTipoAtividadeTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> checklistId;
  final Value<String> tipoAtividadeId;
  const ChecklistTipoAtividadeTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.checklistId = const Value.absent(),
    this.tipoAtividadeId = const Value.absent(),
  });
  ChecklistTipoAtividadeTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String checklistId,
    required String tipoAtividadeId,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        checklistId = Value(checklistId),
        tipoAtividadeId = Value(tipoAtividadeId);
  static Insertable<ChecklistTipoAtividadeTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? checklistId,
    Expression<String>? tipoAtividadeId,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (checklistId != null) 'checklist_id': checklistId,
      if (tipoAtividadeId != null) 'tipo_atividade_id': tipoAtividadeId,
    });
  }

  ChecklistTipoAtividadeTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? checklistId,
      Value<String>? tipoAtividadeId}) {
    return ChecklistTipoAtividadeTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      checklistId: checklistId ?? this.checklistId,
      tipoAtividadeId: tipoAtividadeId ?? this.tipoAtividadeId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (checklistId.present) {
      map['checklist_id'] = Variable<String>(checklistId.value);
    }
    if (tipoAtividadeId.present) {
      map['tipo_atividade_id'] = Variable<String>(tipoAtividadeId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChecklistTipoAtividadeTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('checklistId: $checklistId, ')
          ..write('tipoAtividadeId: $tipoAtividadeId')
          ..write(')'))
        .toString();
  }
}

class $FormularioMpbbTableTable extends FormularioMpbbTable
    with TableInfo<$FormularioMpbbTableTable, FormularioMpbbTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $FormularioMpbbTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _atividadeIdMeta =
      const VerificationMeta('atividadeId');
  @override
  late final GeneratedColumn<String> atividadeId = GeneratedColumn<String>(
      'atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES atividade_table (uuid)'));
  static const VerificationMeta _fabricanteMeta =
      const VerificationMeta('fabricante');
  @override
  late final GeneratedColumn<String> fabricante = GeneratedColumn<String>(
      'fabricante', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _resistenciaNominalMeta =
      const VerificationMeta('resistenciaNominal');
  @override
  late final GeneratedColumn<double> resistenciaNominal =
      GeneratedColumn<double>('resistencia_nominal', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _densidadeNominalMeta =
      const VerificationMeta('densidadeNominal');
  @override
  late final GeneratedColumn<double> densidadeNominal = GeneratedColumn<double>(
      'densidade_nominal', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _tensaoFlutuacaoCelulaMeta =
      const VerificationMeta('tensaoFlutuacaoCelula');
  @override
  late final GeneratedColumn<double> tensaoFlutuacaoCelula =
      GeneratedColumn<double>('tensao_flutuacao_celula', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _densidadeCriticaMeta =
      const VerificationMeta('densidadeCritica');
  @override
  late final GeneratedColumn<double> densidadeCritica = GeneratedColumn<double>(
      'densidade_critica', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _tipoBateriaMeta =
      const VerificationMeta('tipoBateria');
  @override
  late final GeneratedColumnWithTypeConverter<TipoBateria, String> tipoBateria =
      GeneratedColumn<String>('tipo_bateria', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<TipoBateria>(
              $FormularioMpbbTableTable.$convertertipoBateria);
  static const VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
      'modelo', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _capacidadeAhMeta =
      const VerificationMeta('capacidadeAh');
  @override
  late final GeneratedColumn<int> capacidadeAh = GeneratedColumn<int>(
      'capacidade_ah', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  static const VerificationMeta _quantidadeCelulasMeta =
      const VerificationMeta('quantidadeCelulas');
  @override
  late final GeneratedColumn<int> quantidadeCelulas = GeneratedColumn<int>(
      'quantidade_celulas', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  static const VerificationMeta _tensaoFlutuacaoBancoMeta =
      const VerificationMeta('tensaoFlutuacaoBanco');
  @override
  late final GeneratedColumn<double> tensaoFlutuacaoBanco =
      GeneratedColumn<double>('tensao_flutuacao_banco', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _rippleMedidoMeta =
      const VerificationMeta('rippleMedido');
  @override
  late final GeneratedColumn<double> rippleMedido = GeneratedColumn<double>(
      'ripple_medido', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime,
      requiredDuringInsert: false,
      defaultValue: currentDateAndTime);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        atividadeId,
        fabricante,
        resistenciaNominal,
        densidadeNominal,
        tensaoFlutuacaoCelula,
        densidadeCritica,
        tipoBateria,
        modelo,
        capacidadeAh,
        quantidadeCelulas,
        tensaoFlutuacaoBanco,
        rippleMedido,
        createdAt,
        updatedAt
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'formulario_mpbb_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<FormularioMpbbTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('atividade_id')) {
      context.handle(
          _atividadeIdMeta,
          atividadeId.isAcceptableOrUnknown(
              data['atividade_id']!, _atividadeIdMeta));
    } else if (isInserting) {
      context.missing(_atividadeIdMeta);
    }
    if (data.containsKey('fabricante')) {
      context.handle(
          _fabricanteMeta,
          fabricante.isAcceptableOrUnknown(
              data['fabricante']!, _fabricanteMeta));
    }
    if (data.containsKey('resistencia_nominal')) {
      context.handle(
          _resistenciaNominalMeta,
          resistenciaNominal.isAcceptableOrUnknown(
              data['resistencia_nominal']!, _resistenciaNominalMeta));
    }
    if (data.containsKey('densidade_nominal')) {
      context.handle(
          _densidadeNominalMeta,
          densidadeNominal.isAcceptableOrUnknown(
              data['densidade_nominal']!, _densidadeNominalMeta));
    }
    if (data.containsKey('tensao_flutuacao_celula')) {
      context.handle(
          _tensaoFlutuacaoCelulaMeta,
          tensaoFlutuacaoCelula.isAcceptableOrUnknown(
              data['tensao_flutuacao_celula']!, _tensaoFlutuacaoCelulaMeta));
    }
    if (data.containsKey('densidade_critica')) {
      context.handle(
          _densidadeCriticaMeta,
          densidadeCritica.isAcceptableOrUnknown(
              data['densidade_critica']!, _densidadeCriticaMeta));
    }
    context.handle(_tipoBateriaMeta, const VerificationResult.success());
    if (data.containsKey('modelo')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['modelo']!, _modeloMeta));
    }
    if (data.containsKey('capacidade_ah')) {
      context.handle(
          _capacidadeAhMeta,
          capacidadeAh.isAcceptableOrUnknown(
              data['capacidade_ah']!, _capacidadeAhMeta));
    }
    if (data.containsKey('quantidade_celulas')) {
      context.handle(
          _quantidadeCelulasMeta,
          quantidadeCelulas.isAcceptableOrUnknown(
              data['quantidade_celulas']!, _quantidadeCelulasMeta));
    }
    if (data.containsKey('tensao_flutuacao_banco')) {
      context.handle(
          _tensaoFlutuacaoBancoMeta,
          tensaoFlutuacaoBanco.isAcceptableOrUnknown(
              data['tensao_flutuacao_banco']!, _tensaoFlutuacaoBancoMeta));
    }
    if (data.containsKey('ripple_medido')) {
      context.handle(
          _rippleMedidoMeta,
          rippleMedido.isAcceptableOrUnknown(
              data['ripple_medido']!, _rippleMedidoMeta));
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FormularioMpbbTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return FormularioMpbbTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      atividadeId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}atividade_id'])!,
      fabricante: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}fabricante']),
      resistenciaNominal: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_nominal']),
      densidadeNominal: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}densidade_nominal']),
      tensaoFlutuacaoCelula: attachedDatabase.typeMapping.read(
          DriftSqlType.double,
          data['${effectivePrefix}tensao_flutuacao_celula']),
      densidadeCritica: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}densidade_critica']),
      tipoBateria: $FormularioMpbbTableTable.$convertertipoBateria.fromSql(
          attachedDatabase.typeMapping.read(
              DriftSqlType.string, data['${effectivePrefix}tipo_bateria'])!),
      modelo: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}modelo']),
      capacidadeAh: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}capacidade_ah']),
      quantidadeCelulas: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}quantidade_celulas']),
      tensaoFlutuacaoBanco: attachedDatabase.typeMapping.read(
          DriftSqlType.double,
          data['${effectivePrefix}tensao_flutuacao_banco']),
      rippleMedido: attachedDatabase.typeMapping
          .read(DriftSqlType.double, data['${effectivePrefix}ripple_medido']),
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at']),
    );
  }

  @override
  $FormularioMpbbTableTable createAlias(String alias) {
    return $FormularioMpbbTableTable(attachedDatabase, alias);
  }

  static TypeConverter<TipoBateria, String> $convertertipoBateria =
      const TipoBateriaConverter();
}

class FormularioMpbbTableData extends DataClass
    implements Insertable<FormularioMpbbTableData> {
  final int id;
  final String atividadeId;
  final String? fabricante;
  final double? resistenciaNominal;
  final double? densidadeNominal;
  final double? tensaoFlutuacaoCelula;
  final double? densidadeCritica;
  final TipoBateria tipoBateria;
  final String? modelo;
  final int? capacidadeAh;
  final int? quantidadeCelulas;
  final double? tensaoFlutuacaoBanco;
  final double? rippleMedido;
  final DateTime createdAt;
  final DateTime? updatedAt;
  const FormularioMpbbTableData(
      {required this.id,
      required this.atividadeId,
      this.fabricante,
      this.resistenciaNominal,
      this.densidadeNominal,
      this.tensaoFlutuacaoCelula,
      this.densidadeCritica,
      required this.tipoBateria,
      this.modelo,
      this.capacidadeAh,
      this.quantidadeCelulas,
      this.tensaoFlutuacaoBanco,
      this.rippleMedido,
      required this.createdAt,
      this.updatedAt});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['atividade_id'] = Variable<String>(atividadeId);
    if (!nullToAbsent || fabricante != null) {
      map['fabricante'] = Variable<String>(fabricante);
    }
    if (!nullToAbsent || resistenciaNominal != null) {
      map['resistencia_nominal'] = Variable<double>(resistenciaNominal);
    }
    if (!nullToAbsent || densidadeNominal != null) {
      map['densidade_nominal'] = Variable<double>(densidadeNominal);
    }
    if (!nullToAbsent || tensaoFlutuacaoCelula != null) {
      map['tensao_flutuacao_celula'] = Variable<double>(tensaoFlutuacaoCelula);
    }
    if (!nullToAbsent || densidadeCritica != null) {
      map['densidade_critica'] = Variable<double>(densidadeCritica);
    }
    {
      map['tipo_bateria'] = Variable<String>(
          $FormularioMpbbTableTable.$convertertipoBateria.toSql(tipoBateria));
    }
    if (!nullToAbsent || modelo != null) {
      map['modelo'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || capacidadeAh != null) {
      map['capacidade_ah'] = Variable<int>(capacidadeAh);
    }
    if (!nullToAbsent || quantidadeCelulas != null) {
      map['quantidade_celulas'] = Variable<int>(quantidadeCelulas);
    }
    if (!nullToAbsent || tensaoFlutuacaoBanco != null) {
      map['tensao_flutuacao_banco'] = Variable<double>(tensaoFlutuacaoBanco);
    }
    if (!nullToAbsent || rippleMedido != null) {
      map['ripple_medido'] = Variable<double>(rippleMedido);
    }
    map['created_at'] = Variable<DateTime>(createdAt);
    if (!nullToAbsent || updatedAt != null) {
      map['updated_at'] = Variable<DateTime>(updatedAt);
    }
    return map;
  }

  FormularioMpbbTableCompanion toCompanion(bool nullToAbsent) {
    return FormularioMpbbTableCompanion(
      id: Value(id),
      atividadeId: Value(atividadeId),
      fabricante: fabricante == null && nullToAbsent
          ? const Value.absent()
          : Value(fabricante),
      resistenciaNominal: resistenciaNominal == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaNominal),
      densidadeNominal: densidadeNominal == null && nullToAbsent
          ? const Value.absent()
          : Value(densidadeNominal),
      tensaoFlutuacaoCelula: tensaoFlutuacaoCelula == null && nullToAbsent
          ? const Value.absent()
          : Value(tensaoFlutuacaoCelula),
      densidadeCritica: densidadeCritica == null && nullToAbsent
          ? const Value.absent()
          : Value(densidadeCritica),
      tipoBateria: Value(tipoBateria),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      capacidadeAh: capacidadeAh == null && nullToAbsent
          ? const Value.absent()
          : Value(capacidadeAh),
      quantidadeCelulas: quantidadeCelulas == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeCelulas),
      tensaoFlutuacaoBanco: tensaoFlutuacaoBanco == null && nullToAbsent
          ? const Value.absent()
          : Value(tensaoFlutuacaoBanco),
      rippleMedido: rippleMedido == null && nullToAbsent
          ? const Value.absent()
          : Value(rippleMedido),
      createdAt: Value(createdAt),
      updatedAt: updatedAt == null && nullToAbsent
          ? const Value.absent()
          : Value(updatedAt),
    );
  }

  factory FormularioMpbbTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FormularioMpbbTableData(
      id: serializer.fromJson<int>(json['id']),
      atividadeId: serializer.fromJson<String>(json['atividadeId']),
      fabricante: serializer.fromJson<String?>(json['fabricante']),
      resistenciaNominal:
          serializer.fromJson<double?>(json['resistenciaNominal']),
      densidadeNominal: serializer.fromJson<double?>(json['densidadeNominal']),
      tensaoFlutuacaoCelula:
          serializer.fromJson<double?>(json['tensaoFlutuacaoCelula']),
      densidadeCritica: serializer.fromJson<double?>(json['densidadeCritica']),
      tipoBateria: serializer.fromJson<TipoBateria>(json['tipoBateria']),
      modelo: serializer.fromJson<String?>(json['modelo']),
      capacidadeAh: serializer.fromJson<int?>(json['capacidadeAh']),
      quantidadeCelulas: serializer.fromJson<int?>(json['quantidadeCelulas']),
      tensaoFlutuacaoBanco:
          serializer.fromJson<double?>(json['tensaoFlutuacaoBanco']),
      rippleMedido: serializer.fromJson<double?>(json['rippleMedido']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime?>(json['updatedAt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'atividadeId': serializer.toJson<String>(atividadeId),
      'fabricante': serializer.toJson<String?>(fabricante),
      'resistenciaNominal': serializer.toJson<double?>(resistenciaNominal),
      'densidadeNominal': serializer.toJson<double?>(densidadeNominal),
      'tensaoFlutuacaoCelula':
          serializer.toJson<double?>(tensaoFlutuacaoCelula),
      'densidadeCritica': serializer.toJson<double?>(densidadeCritica),
      'tipoBateria': serializer.toJson<TipoBateria>(tipoBateria),
      'modelo': serializer.toJson<String?>(modelo),
      'capacidadeAh': serializer.toJson<int?>(capacidadeAh),
      'quantidadeCelulas': serializer.toJson<int?>(quantidadeCelulas),
      'tensaoFlutuacaoBanco': serializer.toJson<double?>(tensaoFlutuacaoBanco),
      'rippleMedido': serializer.toJson<double?>(rippleMedido),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime?>(updatedAt),
    };
  }

  FormularioMpbbTableData copyWith(
          {int? id,
          String? atividadeId,
          Value<String?> fabricante = const Value.absent(),
          Value<double?> resistenciaNominal = const Value.absent(),
          Value<double?> densidadeNominal = const Value.absent(),
          Value<double?> tensaoFlutuacaoCelula = const Value.absent(),
          Value<double?> densidadeCritica = const Value.absent(),
          TipoBateria? tipoBateria,
          Value<String?> modelo = const Value.absent(),
          Value<int?> capacidadeAh = const Value.absent(),
          Value<int?> quantidadeCelulas = const Value.absent(),
          Value<double?> tensaoFlutuacaoBanco = const Value.absent(),
          Value<double?> rippleMedido = const Value.absent(),
          DateTime? createdAt,
          Value<DateTime?> updatedAt = const Value.absent()}) =>
      FormularioMpbbTableData(
        id: id ?? this.id,
        atividadeId: atividadeId ?? this.atividadeId,
        fabricante: fabricante.present ? fabricante.value : this.fabricante,
        resistenciaNominal: resistenciaNominal.present
            ? resistenciaNominal.value
            : this.resistenciaNominal,
        densidadeNominal: densidadeNominal.present
            ? densidadeNominal.value
            : this.densidadeNominal,
        tensaoFlutuacaoCelula: tensaoFlutuacaoCelula.present
            ? tensaoFlutuacaoCelula.value
            : this.tensaoFlutuacaoCelula,
        densidadeCritica: densidadeCritica.present
            ? densidadeCritica.value
            : this.densidadeCritica,
        tipoBateria: tipoBateria ?? this.tipoBateria,
        modelo: modelo.present ? modelo.value : this.modelo,
        capacidadeAh:
            capacidadeAh.present ? capacidadeAh.value : this.capacidadeAh,
        quantidadeCelulas: quantidadeCelulas.present
            ? quantidadeCelulas.value
            : this.quantidadeCelulas,
        tensaoFlutuacaoBanco: tensaoFlutuacaoBanco.present
            ? tensaoFlutuacaoBanco.value
            : this.tensaoFlutuacaoBanco,
        rippleMedido:
            rippleMedido.present ? rippleMedido.value : this.rippleMedido,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt.present ? updatedAt.value : this.updatedAt,
      );
  FormularioMpbbTableData copyWithCompanion(FormularioMpbbTableCompanion data) {
    return FormularioMpbbTableData(
      id: data.id.present ? data.id.value : this.id,
      atividadeId:
          data.atividadeId.present ? data.atividadeId.value : this.atividadeId,
      fabricante:
          data.fabricante.present ? data.fabricante.value : this.fabricante,
      resistenciaNominal: data.resistenciaNominal.present
          ? data.resistenciaNominal.value
          : this.resistenciaNominal,
      densidadeNominal: data.densidadeNominal.present
          ? data.densidadeNominal.value
          : this.densidadeNominal,
      tensaoFlutuacaoCelula: data.tensaoFlutuacaoCelula.present
          ? data.tensaoFlutuacaoCelula.value
          : this.tensaoFlutuacaoCelula,
      densidadeCritica: data.densidadeCritica.present
          ? data.densidadeCritica.value
          : this.densidadeCritica,
      tipoBateria:
          data.tipoBateria.present ? data.tipoBateria.value : this.tipoBateria,
      modelo: data.modelo.present ? data.modelo.value : this.modelo,
      capacidadeAh: data.capacidadeAh.present
          ? data.capacidadeAh.value
          : this.capacidadeAh,
      quantidadeCelulas: data.quantidadeCelulas.present
          ? data.quantidadeCelulas.value
          : this.quantidadeCelulas,
      tensaoFlutuacaoBanco: data.tensaoFlutuacaoBanco.present
          ? data.tensaoFlutuacaoBanco.value
          : this.tensaoFlutuacaoBanco,
      rippleMedido: data.rippleMedido.present
          ? data.rippleMedido.value
          : this.rippleMedido,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('FormularioMpbbTableData(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('fabricante: $fabricante, ')
          ..write('resistenciaNominal: $resistenciaNominal, ')
          ..write('densidadeNominal: $densidadeNominal, ')
          ..write('tensaoFlutuacaoCelula: $tensaoFlutuacaoCelula, ')
          ..write('densidadeCritica: $densidadeCritica, ')
          ..write('tipoBateria: $tipoBateria, ')
          ..write('modelo: $modelo, ')
          ..write('capacidadeAh: $capacidadeAh, ')
          ..write('quantidadeCelulas: $quantidadeCelulas, ')
          ..write('tensaoFlutuacaoBanco: $tensaoFlutuacaoBanco, ')
          ..write('rippleMedido: $rippleMedido, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      atividadeId,
      fabricante,
      resistenciaNominal,
      densidadeNominal,
      tensaoFlutuacaoCelula,
      densidadeCritica,
      tipoBateria,
      modelo,
      capacidadeAh,
      quantidadeCelulas,
      tensaoFlutuacaoBanco,
      rippleMedido,
      createdAt,
      updatedAt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FormularioMpbbTableData &&
          other.id == this.id &&
          other.atividadeId == this.atividadeId &&
          other.fabricante == this.fabricante &&
          other.resistenciaNominal == this.resistenciaNominal &&
          other.densidadeNominal == this.densidadeNominal &&
          other.tensaoFlutuacaoCelula == this.tensaoFlutuacaoCelula &&
          other.densidadeCritica == this.densidadeCritica &&
          other.tipoBateria == this.tipoBateria &&
          other.modelo == this.modelo &&
          other.capacidadeAh == this.capacidadeAh &&
          other.quantidadeCelulas == this.quantidadeCelulas &&
          other.tensaoFlutuacaoBanco == this.tensaoFlutuacaoBanco &&
          other.rippleMedido == this.rippleMedido &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class FormularioMpbbTableCompanion
    extends UpdateCompanion<FormularioMpbbTableData> {
  final Value<int> id;
  final Value<String> atividadeId;
  final Value<String?> fabricante;
  final Value<double?> resistenciaNominal;
  final Value<double?> densidadeNominal;
  final Value<double?> tensaoFlutuacaoCelula;
  final Value<double?> densidadeCritica;
  final Value<TipoBateria> tipoBateria;
  final Value<String?> modelo;
  final Value<int?> capacidadeAh;
  final Value<int?> quantidadeCelulas;
  final Value<double?> tensaoFlutuacaoBanco;
  final Value<double?> rippleMedido;
  final Value<DateTime> createdAt;
  final Value<DateTime?> updatedAt;
  const FormularioMpbbTableCompanion({
    this.id = const Value.absent(),
    this.atividadeId = const Value.absent(),
    this.fabricante = const Value.absent(),
    this.resistenciaNominal = const Value.absent(),
    this.densidadeNominal = const Value.absent(),
    this.tensaoFlutuacaoCelula = const Value.absent(),
    this.densidadeCritica = const Value.absent(),
    this.tipoBateria = const Value.absent(),
    this.modelo = const Value.absent(),
    this.capacidadeAh = const Value.absent(),
    this.quantidadeCelulas = const Value.absent(),
    this.tensaoFlutuacaoBanco = const Value.absent(),
    this.rippleMedido = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
  });
  FormularioMpbbTableCompanion.insert({
    this.id = const Value.absent(),
    required String atividadeId,
    this.fabricante = const Value.absent(),
    this.resistenciaNominal = const Value.absent(),
    this.densidadeNominal = const Value.absent(),
    this.tensaoFlutuacaoCelula = const Value.absent(),
    this.densidadeCritica = const Value.absent(),
    required TipoBateria tipoBateria,
    this.modelo = const Value.absent(),
    this.capacidadeAh = const Value.absent(),
    this.quantidadeCelulas = const Value.absent(),
    this.tensaoFlutuacaoBanco = const Value.absent(),
    this.rippleMedido = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
  })  : atividadeId = Value(atividadeId),
        tipoBateria = Value(tipoBateria);
  static Insertable<FormularioMpbbTableData> custom({
    Expression<int>? id,
    Expression<String>? atividadeId,
    Expression<String>? fabricante,
    Expression<double>? resistenciaNominal,
    Expression<double>? densidadeNominal,
    Expression<double>? tensaoFlutuacaoCelula,
    Expression<double>? densidadeCritica,
    Expression<String>? tipoBateria,
    Expression<String>? modelo,
    Expression<int>? capacidadeAh,
    Expression<int>? quantidadeCelulas,
    Expression<double>? tensaoFlutuacaoBanco,
    Expression<double>? rippleMedido,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (atividadeId != null) 'atividade_id': atividadeId,
      if (fabricante != null) 'fabricante': fabricante,
      if (resistenciaNominal != null) 'resistencia_nominal': resistenciaNominal,
      if (densidadeNominal != null) 'densidade_nominal': densidadeNominal,
      if (tensaoFlutuacaoCelula != null)
        'tensao_flutuacao_celula': tensaoFlutuacaoCelula,
      if (densidadeCritica != null) 'densidade_critica': densidadeCritica,
      if (tipoBateria != null) 'tipo_bateria': tipoBateria,
      if (modelo != null) 'modelo': modelo,
      if (capacidadeAh != null) 'capacidade_ah': capacidadeAh,
      if (quantidadeCelulas != null) 'quantidade_celulas': quantidadeCelulas,
      if (tensaoFlutuacaoBanco != null)
        'tensao_flutuacao_banco': tensaoFlutuacaoBanco,
      if (rippleMedido != null) 'ripple_medido': rippleMedido,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    });
  }

  FormularioMpbbTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? atividadeId,
      Value<String?>? fabricante,
      Value<double?>? resistenciaNominal,
      Value<double?>? densidadeNominal,
      Value<double?>? tensaoFlutuacaoCelula,
      Value<double?>? densidadeCritica,
      Value<TipoBateria>? tipoBateria,
      Value<String?>? modelo,
      Value<int?>? capacidadeAh,
      Value<int?>? quantidadeCelulas,
      Value<double?>? tensaoFlutuacaoBanco,
      Value<double?>? rippleMedido,
      Value<DateTime>? createdAt,
      Value<DateTime?>? updatedAt}) {
    return FormularioMpbbTableCompanion(
      id: id ?? this.id,
      atividadeId: atividadeId ?? this.atividadeId,
      fabricante: fabricante ?? this.fabricante,
      resistenciaNominal: resistenciaNominal ?? this.resistenciaNominal,
      densidadeNominal: densidadeNominal ?? this.densidadeNominal,
      tensaoFlutuacaoCelula:
          tensaoFlutuacaoCelula ?? this.tensaoFlutuacaoCelula,
      densidadeCritica: densidadeCritica ?? this.densidadeCritica,
      tipoBateria: tipoBateria ?? this.tipoBateria,
      modelo: modelo ?? this.modelo,
      capacidadeAh: capacidadeAh ?? this.capacidadeAh,
      quantidadeCelulas: quantidadeCelulas ?? this.quantidadeCelulas,
      tensaoFlutuacaoBanco: tensaoFlutuacaoBanco ?? this.tensaoFlutuacaoBanco,
      rippleMedido: rippleMedido ?? this.rippleMedido,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (atividadeId.present) {
      map['atividade_id'] = Variable<String>(atividadeId.value);
    }
    if (fabricante.present) {
      map['fabricante'] = Variable<String>(fabricante.value);
    }
    if (resistenciaNominal.present) {
      map['resistencia_nominal'] = Variable<double>(resistenciaNominal.value);
    }
    if (densidadeNominal.present) {
      map['densidade_nominal'] = Variable<double>(densidadeNominal.value);
    }
    if (tensaoFlutuacaoCelula.present) {
      map['tensao_flutuacao_celula'] =
          Variable<double>(tensaoFlutuacaoCelula.value);
    }
    if (densidadeCritica.present) {
      map['densidade_critica'] = Variable<double>(densidadeCritica.value);
    }
    if (tipoBateria.present) {
      map['tipo_bateria'] = Variable<String>($FormularioMpbbTableTable
          .$convertertipoBateria
          .toSql(tipoBateria.value));
    }
    if (modelo.present) {
      map['modelo'] = Variable<String>(modelo.value);
    }
    if (capacidadeAh.present) {
      map['capacidade_ah'] = Variable<int>(capacidadeAh.value);
    }
    if (quantidadeCelulas.present) {
      map['quantidade_celulas'] = Variable<int>(quantidadeCelulas.value);
    }
    if (tensaoFlutuacaoBanco.present) {
      map['tensao_flutuacao_banco'] =
          Variable<double>(tensaoFlutuacaoBanco.value);
    }
    if (rippleMedido.present) {
      map['ripple_medido'] = Variable<double>(rippleMedido.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FormularioMpbbTableCompanion(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('fabricante: $fabricante, ')
          ..write('resistenciaNominal: $resistenciaNominal, ')
          ..write('densidadeNominal: $densidadeNominal, ')
          ..write('tensaoFlutuacaoCelula: $tensaoFlutuacaoCelula, ')
          ..write('densidadeCritica: $densidadeCritica, ')
          ..write('tipoBateria: $tipoBateria, ')
          ..write('modelo: $modelo, ')
          ..write('capacidadeAh: $capacidadeAh, ')
          ..write('quantidadeCelulas: $quantidadeCelulas, ')
          ..write('tensaoFlutuacaoBanco: $tensaoFlutuacaoBanco, ')
          ..write('rippleMedido: $rippleMedido, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }
}

class $MedicaoElementoMpbbTableTable extends MedicaoElementoMpbbTable
    with
        TableInfo<$MedicaoElementoMpbbTableTable,
            MedicaoElementoMpbbTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MedicaoElementoMpbbTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _formularioMpbbIdMeta =
      const VerificationMeta('formularioMpbbId');
  @override
  late final GeneratedColumn<int> formularioMpbbId = GeneratedColumn<int>(
      'formulario_mpbb_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES formulario_mpbb_table (id) ON DELETE CASCADE'));
  static const VerificationMeta _elementoBateriaNumeroMeta =
      const VerificationMeta('elementoBateriaNumero');
  @override
  late final GeneratedColumn<int> elementoBateriaNumero = GeneratedColumn<int>(
      'elemento_bateria_numero', aliasedName, false,
      type: DriftSqlType.int, requiredDuringInsert: true);
  static const VerificationMeta _tensaoMeta = const VerificationMeta('tensao');
  @override
  late final GeneratedColumn<double> tensao = GeneratedColumn<double>(
      'tensao', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _resistenciaInternaMeta =
      const VerificationMeta('resistenciaInterna');
  @override
  late final GeneratedColumn<double> resistenciaInterna =
      GeneratedColumn<double>('resistencia_interna', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, formularioMpbbId, elementoBateriaNumero, tensao, resistenciaInterna];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'medicao_elemento_mpbb_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<MedicaoElementoMpbbTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('formulario_mpbb_id')) {
      context.handle(
          _formularioMpbbIdMeta,
          formularioMpbbId.isAcceptableOrUnknown(
              data['formulario_mpbb_id']!, _formularioMpbbIdMeta));
    } else if (isInserting) {
      context.missing(_formularioMpbbIdMeta);
    }
    if (data.containsKey('elemento_bateria_numero')) {
      context.handle(
          _elementoBateriaNumeroMeta,
          elementoBateriaNumero.isAcceptableOrUnknown(
              data['elemento_bateria_numero']!, _elementoBateriaNumeroMeta));
    } else if (isInserting) {
      context.missing(_elementoBateriaNumeroMeta);
    }
    if (data.containsKey('tensao')) {
      context.handle(_tensaoMeta,
          tensao.isAcceptableOrUnknown(data['tensao']!, _tensaoMeta));
    }
    if (data.containsKey('resistencia_interna')) {
      context.handle(
          _resistenciaInternaMeta,
          resistenciaInterna.isAcceptableOrUnknown(
              data['resistencia_interna']!, _resistenciaInternaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MedicaoElementoMpbbTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MedicaoElementoMpbbTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      formularioMpbbId: attachedDatabase.typeMapping.read(
          DriftSqlType.int, data['${effectivePrefix}formulario_mpbb_id'])!,
      elementoBateriaNumero: attachedDatabase.typeMapping.read(
          DriftSqlType.int, data['${effectivePrefix}elemento_bateria_numero'])!,
      tensao: attachedDatabase.typeMapping
          .read(DriftSqlType.double, data['${effectivePrefix}tensao']),
      resistenciaInterna: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_interna']),
    );
  }

  @override
  $MedicaoElementoMpbbTableTable createAlias(String alias) {
    return $MedicaoElementoMpbbTableTable(attachedDatabase, alias);
  }
}

class MedicaoElementoMpbbTableData extends DataClass
    implements Insertable<MedicaoElementoMpbbTableData> {
  final int id;
  final int formularioMpbbId;
  final int elementoBateriaNumero;
  final double? tensao;
  final double? resistenciaInterna;
  const MedicaoElementoMpbbTableData(
      {required this.id,
      required this.formularioMpbbId,
      required this.elementoBateriaNumero,
      this.tensao,
      this.resistenciaInterna});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['formulario_mpbb_id'] = Variable<int>(formularioMpbbId);
    map['elemento_bateria_numero'] = Variable<int>(elementoBateriaNumero);
    if (!nullToAbsent || tensao != null) {
      map['tensao'] = Variable<double>(tensao);
    }
    if (!nullToAbsent || resistenciaInterna != null) {
      map['resistencia_interna'] = Variable<double>(resistenciaInterna);
    }
    return map;
  }

  MedicaoElementoMpbbTableCompanion toCompanion(bool nullToAbsent) {
    return MedicaoElementoMpbbTableCompanion(
      id: Value(id),
      formularioMpbbId: Value(formularioMpbbId),
      elementoBateriaNumero: Value(elementoBateriaNumero),
      tensao:
          tensao == null && nullToAbsent ? const Value.absent() : Value(tensao),
      resistenciaInterna: resistenciaInterna == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaInterna),
    );
  }

  factory MedicaoElementoMpbbTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MedicaoElementoMpbbTableData(
      id: serializer.fromJson<int>(json['id']),
      formularioMpbbId: serializer.fromJson<int>(json['formularioMpbbId']),
      elementoBateriaNumero:
          serializer.fromJson<int>(json['elementoBateriaNumero']),
      tensao: serializer.fromJson<double?>(json['tensao']),
      resistenciaInterna:
          serializer.fromJson<double?>(json['resistenciaInterna']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'formularioMpbbId': serializer.toJson<int>(formularioMpbbId),
      'elementoBateriaNumero': serializer.toJson<int>(elementoBateriaNumero),
      'tensao': serializer.toJson<double?>(tensao),
      'resistenciaInterna': serializer.toJson<double?>(resistenciaInterna),
    };
  }

  MedicaoElementoMpbbTableData copyWith(
          {int? id,
          int? formularioMpbbId,
          int? elementoBateriaNumero,
          Value<double?> tensao = const Value.absent(),
          Value<double?> resistenciaInterna = const Value.absent()}) =>
      MedicaoElementoMpbbTableData(
        id: id ?? this.id,
        formularioMpbbId: formularioMpbbId ?? this.formularioMpbbId,
        elementoBateriaNumero:
            elementoBateriaNumero ?? this.elementoBateriaNumero,
        tensao: tensao.present ? tensao.value : this.tensao,
        resistenciaInterna: resistenciaInterna.present
            ? resistenciaInterna.value
            : this.resistenciaInterna,
      );
  MedicaoElementoMpbbTableData copyWithCompanion(
      MedicaoElementoMpbbTableCompanion data) {
    return MedicaoElementoMpbbTableData(
      id: data.id.present ? data.id.value : this.id,
      formularioMpbbId: data.formularioMpbbId.present
          ? data.formularioMpbbId.value
          : this.formularioMpbbId,
      elementoBateriaNumero: data.elementoBateriaNumero.present
          ? data.elementoBateriaNumero.value
          : this.elementoBateriaNumero,
      tensao: data.tensao.present ? data.tensao.value : this.tensao,
      resistenciaInterna: data.resistenciaInterna.present
          ? data.resistenciaInterna.value
          : this.resistenciaInterna,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MedicaoElementoMpbbTableData(')
          ..write('id: $id, ')
          ..write('formularioMpbbId: $formularioMpbbId, ')
          ..write('elementoBateriaNumero: $elementoBateriaNumero, ')
          ..write('tensao: $tensao, ')
          ..write('resistenciaInterna: $resistenciaInterna')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, formularioMpbbId, elementoBateriaNumero, tensao, resistenciaInterna);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MedicaoElementoMpbbTableData &&
          other.id == this.id &&
          other.formularioMpbbId == this.formularioMpbbId &&
          other.elementoBateriaNumero == this.elementoBateriaNumero &&
          other.tensao == this.tensao &&
          other.resistenciaInterna == this.resistenciaInterna);
}

class MedicaoElementoMpbbTableCompanion
    extends UpdateCompanion<MedicaoElementoMpbbTableData> {
  final Value<int> id;
  final Value<int> formularioMpbbId;
  final Value<int> elementoBateriaNumero;
  final Value<double?> tensao;
  final Value<double?> resistenciaInterna;
  const MedicaoElementoMpbbTableCompanion({
    this.id = const Value.absent(),
    this.formularioMpbbId = const Value.absent(),
    this.elementoBateriaNumero = const Value.absent(),
    this.tensao = const Value.absent(),
    this.resistenciaInterna = const Value.absent(),
  });
  MedicaoElementoMpbbTableCompanion.insert({
    this.id = const Value.absent(),
    required int formularioMpbbId,
    required int elementoBateriaNumero,
    this.tensao = const Value.absent(),
    this.resistenciaInterna = const Value.absent(),
  })  : formularioMpbbId = Value(formularioMpbbId),
        elementoBateriaNumero = Value(elementoBateriaNumero);
  static Insertable<MedicaoElementoMpbbTableData> custom({
    Expression<int>? id,
    Expression<int>? formularioMpbbId,
    Expression<int>? elementoBateriaNumero,
    Expression<double>? tensao,
    Expression<double>? resistenciaInterna,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (formularioMpbbId != null) 'formulario_mpbb_id': formularioMpbbId,
      if (elementoBateriaNumero != null)
        'elemento_bateria_numero': elementoBateriaNumero,
      if (tensao != null) 'tensao': tensao,
      if (resistenciaInterna != null) 'resistencia_interna': resistenciaInterna,
    });
  }

  MedicaoElementoMpbbTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? formularioMpbbId,
      Value<int>? elementoBateriaNumero,
      Value<double?>? tensao,
      Value<double?>? resistenciaInterna}) {
    return MedicaoElementoMpbbTableCompanion(
      id: id ?? this.id,
      formularioMpbbId: formularioMpbbId ?? this.formularioMpbbId,
      elementoBateriaNumero:
          elementoBateriaNumero ?? this.elementoBateriaNumero,
      tensao: tensao ?? this.tensao,
      resistenciaInterna: resistenciaInterna ?? this.resistenciaInterna,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (formularioMpbbId.present) {
      map['formulario_mpbb_id'] = Variable<int>(formularioMpbbId.value);
    }
    if (elementoBateriaNumero.present) {
      map['elemento_bateria_numero'] =
          Variable<int>(elementoBateriaNumero.value);
    }
    if (tensao.present) {
      map['tensao'] = Variable<double>(tensao.value);
    }
    if (resistenciaInterna.present) {
      map['resistencia_interna'] = Variable<double>(resistenciaInterna.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MedicaoElementoMpbbTableCompanion(')
          ..write('id: $id, ')
          ..write('formularioMpbbId: $formularioMpbbId, ')
          ..write('elementoBateriaNumero: $elementoBateriaNumero, ')
          ..write('tensao: $tensao, ')
          ..write('resistenciaInterna: $resistenciaInterna')
          ..write(')'))
        .toString();
  }
}

class $MpDjFormTableTable extends MpDjFormTable
    with TableInfo<$MpDjFormTableTable, MpDjFormTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MpDjFormTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _atividadeIdMeta =
      const VerificationMeta('atividadeId');
  @override
  late final GeneratedColumn<String> atividadeId = GeneratedColumn<String>(
      'atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES atividade_table (uuid)'));
  static const VerificationMeta _caracterizacaoEnsaioMeta =
      const VerificationMeta('caracterizacaoEnsaio');
  @override
  late final GeneratedColumnWithTypeConverter<CaracterizacaoEnsaio?, String>
      caracterizacaoEnsaio = GeneratedColumn<String>(
              'caracterizacao_ensaio', aliasedName, true,
              type: DriftSqlType.string, requiredDuringInsert: false)
          .withConverter<CaracterizacaoEnsaio?>(
              $MpDjFormTableTable.$convertercaracterizacaoEnsaion);
  static const VerificationMeta _disjuntorFabricanteMeta =
      const VerificationMeta('disjuntorFabricante');
  @override
  late final GeneratedColumn<String> disjuntorFabricante =
      GeneratedColumn<String>('disjuntor_fabricante', aliasedName, true,
          type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorAnoFabricacaoMeta =
      const VerificationMeta('disjuntorAnoFabricacao');
  @override
  late final GeneratedColumn<String> disjuntorAnoFabricacao =
      GeneratedColumn<String>('disjuntor_ano_fabricacao', aliasedName, true,
          type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorTensaoNominalMeta =
      const VerificationMeta('disjuntorTensaoNominal');
  @override
  late final GeneratedColumn<double> disjuntorTensaoNominal =
      GeneratedColumn<double>('disjuntor_tensao_nominal', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorCorrenteNominalMeta =
      const VerificationMeta('disjuntorCorrenteNominal');
  @override
  late final GeneratedColumn<int> disjuntorCorrenteNominal =
      GeneratedColumn<int>('disjuntor_corrente_nominal', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorCapInterrupcaoNominalMeta =
      const VerificationMeta('disjuntorCapInterrupcaoNominal');
  @override
  late final GeneratedColumn<int> disjuntorCapInterrupcaoNominal =
      GeneratedColumn<int>(
          'disjuntor_cap_interrupcao_nominal', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorTipoExtinsaoMeta =
      const VerificationMeta('disjuntorTipoExtinsao');
  @override
  late final GeneratedColumnWithTypeConverter<TipoExtinsaoDisjuntor?, String>
      disjuntorTipoExtinsao = GeneratedColumn<String>(
              'disjuntor_tipo_extinsao', aliasedName, true,
              type: DriftSqlType.string, requiredDuringInsert: false)
          .withConverter<TipoExtinsaoDisjuntor?>(
              $MpDjFormTableTable.$converterdisjuntorTipoExtinsaon);
  static const VerificationMeta _disjuntorTipoAcionamentoMeta =
      const VerificationMeta('disjuntorTipoAcionamento');
  @override
  late final GeneratedColumn<String> disjuntorTipoAcionamento =
      GeneratedColumn<String>('disjuntor_tipo_acionamento', aliasedName, true,
          type: DriftSqlType.string, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorPressaoSf6NominalMeta =
      const VerificationMeta('disjuntorPressaoSf6Nominal');
  @override
  late final GeneratedColumn<double> disjuntorPressaoSf6Nominal =
      GeneratedColumn<double>(
          'disjuntor_pressao_sf6_nominal', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _disjuntorPressaoSf6NominalTemperaturaMeta =
      const VerificationMeta('disjuntorPressaoSf6NominalTemperatura');
  @override
  late final GeneratedColumn<double> disjuntorPressaoSf6NominalTemperatura =
      GeneratedColumn<double>(
          'disjuntor_pressao_sf6_nominal_temperatura', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _dadoPlacaFechamentoMeta =
      const VerificationMeta('dadoPlacaFechamento');
  @override
  late final GeneratedColumn<double> dadoPlacaFechamento =
      GeneratedColumn<double>('dado_placa_fechamento', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _dadoPlacaAberturaMeta =
      const VerificationMeta('dadoPlacaAbertura');
  @override
  late final GeneratedColumn<double> dadoPlacaAbertura =
      GeneratedColumn<double>('dado_placa_abertura', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _dataEnsaioMeta =
      const VerificationMeta('dataEnsaio');
  @override
  late final GeneratedColumn<DateTime> dataEnsaio = GeneratedColumn<DateTime>(
      'data_ensaio', aliasedName, false,
      type: DriftSqlType.dateTime,
      requiredDuringInsert: false,
      defaultValue: currentDateAndTime);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        atividadeId,
        caracterizacaoEnsaio,
        disjuntorFabricante,
        disjuntorAnoFabricacao,
        disjuntorTensaoNominal,
        disjuntorCorrenteNominal,
        disjuntorCapInterrupcaoNominal,
        disjuntorTipoExtinsao,
        disjuntorTipoAcionamento,
        disjuntorPressaoSf6Nominal,
        disjuntorPressaoSf6NominalTemperatura,
        dadoPlacaFechamento,
        dadoPlacaAbertura,
        dataEnsaio
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'mp_dj_form_table';
  @override
  VerificationContext validateIntegrity(Insertable<MpDjFormTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('atividade_id')) {
      context.handle(
          _atividadeIdMeta,
          atividadeId.isAcceptableOrUnknown(
              data['atividade_id']!, _atividadeIdMeta));
    } else if (isInserting) {
      context.missing(_atividadeIdMeta);
    }
    context.handle(
        _caracterizacaoEnsaioMeta, const VerificationResult.success());
    if (data.containsKey('disjuntor_fabricante')) {
      context.handle(
          _disjuntorFabricanteMeta,
          disjuntorFabricante.isAcceptableOrUnknown(
              data['disjuntor_fabricante']!, _disjuntorFabricanteMeta));
    }
    if (data.containsKey('disjuntor_ano_fabricacao')) {
      context.handle(
          _disjuntorAnoFabricacaoMeta,
          disjuntorAnoFabricacao.isAcceptableOrUnknown(
              data['disjuntor_ano_fabricacao']!, _disjuntorAnoFabricacaoMeta));
    }
    if (data.containsKey('disjuntor_tensao_nominal')) {
      context.handle(
          _disjuntorTensaoNominalMeta,
          disjuntorTensaoNominal.isAcceptableOrUnknown(
              data['disjuntor_tensao_nominal']!, _disjuntorTensaoNominalMeta));
    }
    if (data.containsKey('disjuntor_corrente_nominal')) {
      context.handle(
          _disjuntorCorrenteNominalMeta,
          disjuntorCorrenteNominal.isAcceptableOrUnknown(
              data['disjuntor_corrente_nominal']!,
              _disjuntorCorrenteNominalMeta));
    }
    if (data.containsKey('disjuntor_cap_interrupcao_nominal')) {
      context.handle(
          _disjuntorCapInterrupcaoNominalMeta,
          disjuntorCapInterrupcaoNominal.isAcceptableOrUnknown(
              data['disjuntor_cap_interrupcao_nominal']!,
              _disjuntorCapInterrupcaoNominalMeta));
    }
    context.handle(
        _disjuntorTipoExtinsaoMeta, const VerificationResult.success());
    if (data.containsKey('disjuntor_tipo_acionamento')) {
      context.handle(
          _disjuntorTipoAcionamentoMeta,
          disjuntorTipoAcionamento.isAcceptableOrUnknown(
              data['disjuntor_tipo_acionamento']!,
              _disjuntorTipoAcionamentoMeta));
    }
    if (data.containsKey('disjuntor_pressao_sf6_nominal')) {
      context.handle(
          _disjuntorPressaoSf6NominalMeta,
          disjuntorPressaoSf6Nominal.isAcceptableOrUnknown(
              data['disjuntor_pressao_sf6_nominal']!,
              _disjuntorPressaoSf6NominalMeta));
    }
    if (data.containsKey('disjuntor_pressao_sf6_nominal_temperatura')) {
      context.handle(
          _disjuntorPressaoSf6NominalTemperaturaMeta,
          disjuntorPressaoSf6NominalTemperatura.isAcceptableOrUnknown(
              data['disjuntor_pressao_sf6_nominal_temperatura']!,
              _disjuntorPressaoSf6NominalTemperaturaMeta));
    }
    if (data.containsKey('dado_placa_fechamento')) {
      context.handle(
          _dadoPlacaFechamentoMeta,
          dadoPlacaFechamento.isAcceptableOrUnknown(
              data['dado_placa_fechamento']!, _dadoPlacaFechamentoMeta));
    }
    if (data.containsKey('dado_placa_abertura')) {
      context.handle(
          _dadoPlacaAberturaMeta,
          dadoPlacaAbertura.isAcceptableOrUnknown(
              data['dado_placa_abertura']!, _dadoPlacaAberturaMeta));
    }
    if (data.containsKey('data_ensaio')) {
      context.handle(
          _dataEnsaioMeta,
          dataEnsaio.isAcceptableOrUnknown(
              data['data_ensaio']!, _dataEnsaioMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MpDjFormTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MpDjFormTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      atividadeId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}atividade_id'])!,
      caracterizacaoEnsaio: $MpDjFormTableTable.$convertercaracterizacaoEnsaion
          .fromSql(attachedDatabase.typeMapping.read(DriftSqlType.string,
              data['${effectivePrefix}caracterizacao_ensaio'])),
      disjuntorFabricante: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}disjuntor_fabricante']),
      disjuntorAnoFabricacao: attachedDatabase.typeMapping.read(
          DriftSqlType.string,
          data['${effectivePrefix}disjuntor_ano_fabricacao']),
      disjuntorTensaoNominal: attachedDatabase.typeMapping.read(
          DriftSqlType.double,
          data['${effectivePrefix}disjuntor_tensao_nominal']),
      disjuntorCorrenteNominal: attachedDatabase.typeMapping.read(
          DriftSqlType.int,
          data['${effectivePrefix}disjuntor_corrente_nominal']),
      disjuntorCapInterrupcaoNominal: attachedDatabase.typeMapping.read(
          DriftSqlType.int,
          data['${effectivePrefix}disjuntor_cap_interrupcao_nominal']),
      disjuntorTipoExtinsao: $MpDjFormTableTable
          .$converterdisjuntorTipoExtinsaon
          .fromSql(attachedDatabase.typeMapping.read(DriftSqlType.string,
              data['${effectivePrefix}disjuntor_tipo_extinsao'])),
      disjuntorTipoAcionamento: attachedDatabase.typeMapping.read(
          DriftSqlType.string,
          data['${effectivePrefix}disjuntor_tipo_acionamento']),
      disjuntorPressaoSf6Nominal: attachedDatabase.typeMapping.read(
          DriftSqlType.double,
          data['${effectivePrefix}disjuntor_pressao_sf6_nominal']),
      disjuntorPressaoSf6NominalTemperatura: attachedDatabase.typeMapping.read(
          DriftSqlType.double,
          data['${effectivePrefix}disjuntor_pressao_sf6_nominal_temperatura']),
      dadoPlacaFechamento: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}dado_placa_fechamento']),
      dadoPlacaAbertura: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}dado_placa_abertura']),
      dataEnsaio: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}data_ensaio'])!,
    );
  }

  @override
  $MpDjFormTableTable createAlias(String alias) {
    return $MpDjFormTableTable(attachedDatabase, alias);
  }

  static TypeConverter<CaracterizacaoEnsaio, String>
      $convertercaracterizacaoEnsaio = const CaracterizacaoEnsaioConverter();
  static TypeConverter<CaracterizacaoEnsaio?, String?>
      $convertercaracterizacaoEnsaion =
      NullAwareTypeConverter.wrap($convertercaracterizacaoEnsaio);
  static TypeConverter<TipoExtinsaoDisjuntor, String>
      $converterdisjuntorTipoExtinsao = const TipoExtinsaoDisjuntorConverter();
  static TypeConverter<TipoExtinsaoDisjuntor?, String?>
      $converterdisjuntorTipoExtinsaon =
      NullAwareTypeConverter.wrap($converterdisjuntorTipoExtinsao);
}

class MpDjFormTableData extends DataClass
    implements Insertable<MpDjFormTableData> {
  final int id;
  final String atividadeId;
  final CaracterizacaoEnsaio? caracterizacaoEnsaio;
  final String? disjuntorFabricante;
  final String? disjuntorAnoFabricacao;
  final double? disjuntorTensaoNominal;
  final int? disjuntorCorrenteNominal;
  final int? disjuntorCapInterrupcaoNominal;
  final TipoExtinsaoDisjuntor? disjuntorTipoExtinsao;
  final String? disjuntorTipoAcionamento;
  final double? disjuntorPressaoSf6Nominal;
  final double? disjuntorPressaoSf6NominalTemperatura;
  final double? dadoPlacaFechamento;
  final double? dadoPlacaAbertura;
  final DateTime dataEnsaio;
  const MpDjFormTableData(
      {required this.id,
      required this.atividadeId,
      this.caracterizacaoEnsaio,
      this.disjuntorFabricante,
      this.disjuntorAnoFabricacao,
      this.disjuntorTensaoNominal,
      this.disjuntorCorrenteNominal,
      this.disjuntorCapInterrupcaoNominal,
      this.disjuntorTipoExtinsao,
      this.disjuntorTipoAcionamento,
      this.disjuntorPressaoSf6Nominal,
      this.disjuntorPressaoSf6NominalTemperatura,
      this.dadoPlacaFechamento,
      this.dadoPlacaAbertura,
      required this.dataEnsaio});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['atividade_id'] = Variable<String>(atividadeId);
    if (!nullToAbsent || caracterizacaoEnsaio != null) {
      map['caracterizacao_ensaio'] = Variable<String>($MpDjFormTableTable
          .$convertercaracterizacaoEnsaion
          .toSql(caracterizacaoEnsaio));
    }
    if (!nullToAbsent || disjuntorFabricante != null) {
      map['disjuntor_fabricante'] = Variable<String>(disjuntorFabricante);
    }
    if (!nullToAbsent || disjuntorAnoFabricacao != null) {
      map['disjuntor_ano_fabricacao'] =
          Variable<String>(disjuntorAnoFabricacao);
    }
    if (!nullToAbsent || disjuntorTensaoNominal != null) {
      map['disjuntor_tensao_nominal'] =
          Variable<double>(disjuntorTensaoNominal);
    }
    if (!nullToAbsent || disjuntorCorrenteNominal != null) {
      map['disjuntor_corrente_nominal'] =
          Variable<int>(disjuntorCorrenteNominal);
    }
    if (!nullToAbsent || disjuntorCapInterrupcaoNominal != null) {
      map['disjuntor_cap_interrupcao_nominal'] =
          Variable<int>(disjuntorCapInterrupcaoNominal);
    }
    if (!nullToAbsent || disjuntorTipoExtinsao != null) {
      map['disjuntor_tipo_extinsao'] = Variable<String>($MpDjFormTableTable
          .$converterdisjuntorTipoExtinsaon
          .toSql(disjuntorTipoExtinsao));
    }
    if (!nullToAbsent || disjuntorTipoAcionamento != null) {
      map['disjuntor_tipo_acionamento'] =
          Variable<String>(disjuntorTipoAcionamento);
    }
    if (!nullToAbsent || disjuntorPressaoSf6Nominal != null) {
      map['disjuntor_pressao_sf6_nominal'] =
          Variable<double>(disjuntorPressaoSf6Nominal);
    }
    if (!nullToAbsent || disjuntorPressaoSf6NominalTemperatura != null) {
      map['disjuntor_pressao_sf6_nominal_temperatura'] =
          Variable<double>(disjuntorPressaoSf6NominalTemperatura);
    }
    if (!nullToAbsent || dadoPlacaFechamento != null) {
      map['dado_placa_fechamento'] = Variable<double>(dadoPlacaFechamento);
    }
    if (!nullToAbsent || dadoPlacaAbertura != null) {
      map['dado_placa_abertura'] = Variable<double>(dadoPlacaAbertura);
    }
    map['data_ensaio'] = Variable<DateTime>(dataEnsaio);
    return map;
  }

  MpDjFormTableCompanion toCompanion(bool nullToAbsent) {
    return MpDjFormTableCompanion(
      id: Value(id),
      atividadeId: Value(atividadeId),
      caracterizacaoEnsaio: caracterizacaoEnsaio == null && nullToAbsent
          ? const Value.absent()
          : Value(caracterizacaoEnsaio),
      disjuntorFabricante: disjuntorFabricante == null && nullToAbsent
          ? const Value.absent()
          : Value(disjuntorFabricante),
      disjuntorAnoFabricacao: disjuntorAnoFabricacao == null && nullToAbsent
          ? const Value.absent()
          : Value(disjuntorAnoFabricacao),
      disjuntorTensaoNominal: disjuntorTensaoNominal == null && nullToAbsent
          ? const Value.absent()
          : Value(disjuntorTensaoNominal),
      disjuntorCorrenteNominal: disjuntorCorrenteNominal == null && nullToAbsent
          ? const Value.absent()
          : Value(disjuntorCorrenteNominal),
      disjuntorCapInterrupcaoNominal:
          disjuntorCapInterrupcaoNominal == null && nullToAbsent
              ? const Value.absent()
              : Value(disjuntorCapInterrupcaoNominal),
      disjuntorTipoExtinsao: disjuntorTipoExtinsao == null && nullToAbsent
          ? const Value.absent()
          : Value(disjuntorTipoExtinsao),
      disjuntorTipoAcionamento: disjuntorTipoAcionamento == null && nullToAbsent
          ? const Value.absent()
          : Value(disjuntorTipoAcionamento),
      disjuntorPressaoSf6Nominal:
          disjuntorPressaoSf6Nominal == null && nullToAbsent
              ? const Value.absent()
              : Value(disjuntorPressaoSf6Nominal),
      disjuntorPressaoSf6NominalTemperatura:
          disjuntorPressaoSf6NominalTemperatura == null && nullToAbsent
              ? const Value.absent()
              : Value(disjuntorPressaoSf6NominalTemperatura),
      dadoPlacaFechamento: dadoPlacaFechamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dadoPlacaFechamento),
      dadoPlacaAbertura: dadoPlacaAbertura == null && nullToAbsent
          ? const Value.absent()
          : Value(dadoPlacaAbertura),
      dataEnsaio: Value(dataEnsaio),
    );
  }

  factory MpDjFormTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MpDjFormTableData(
      id: serializer.fromJson<int>(json['id']),
      atividadeId: serializer.fromJson<String>(json['atividadeId']),
      caracterizacaoEnsaio: serializer
          .fromJson<CaracterizacaoEnsaio?>(json['caracterizacaoEnsaio']),
      disjuntorFabricante:
          serializer.fromJson<String?>(json['disjuntorFabricante']),
      disjuntorAnoFabricacao:
          serializer.fromJson<String?>(json['disjuntorAnoFabricacao']),
      disjuntorTensaoNominal:
          serializer.fromJson<double?>(json['disjuntorTensaoNominal']),
      disjuntorCorrenteNominal:
          serializer.fromJson<int?>(json['disjuntorCorrenteNominal']),
      disjuntorCapInterrupcaoNominal:
          serializer.fromJson<int?>(json['disjuntorCapInterrupcaoNominal']),
      disjuntorTipoExtinsao: serializer
          .fromJson<TipoExtinsaoDisjuntor?>(json['disjuntorTipoExtinsao']),
      disjuntorTipoAcionamento:
          serializer.fromJson<String?>(json['disjuntorTipoAcionamento']),
      disjuntorPressaoSf6Nominal:
          serializer.fromJson<double?>(json['disjuntorPressaoSf6Nominal']),
      disjuntorPressaoSf6NominalTemperatura: serializer
          .fromJson<double?>(json['disjuntorPressaoSf6NominalTemperatura']),
      dadoPlacaFechamento:
          serializer.fromJson<double?>(json['dadoPlacaFechamento']),
      dadoPlacaAbertura:
          serializer.fromJson<double?>(json['dadoPlacaAbertura']),
      dataEnsaio: serializer.fromJson<DateTime>(json['dataEnsaio']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'atividadeId': serializer.toJson<String>(atividadeId),
      'caracterizacaoEnsaio':
          serializer.toJson<CaracterizacaoEnsaio?>(caracterizacaoEnsaio),
      'disjuntorFabricante': serializer.toJson<String?>(disjuntorFabricante),
      'disjuntorAnoFabricacao':
          serializer.toJson<String?>(disjuntorAnoFabricacao),
      'disjuntorTensaoNominal':
          serializer.toJson<double?>(disjuntorTensaoNominal),
      'disjuntorCorrenteNominal':
          serializer.toJson<int?>(disjuntorCorrenteNominal),
      'disjuntorCapInterrupcaoNominal':
          serializer.toJson<int?>(disjuntorCapInterrupcaoNominal),
      'disjuntorTipoExtinsao':
          serializer.toJson<TipoExtinsaoDisjuntor?>(disjuntorTipoExtinsao),
      'disjuntorTipoAcionamento':
          serializer.toJson<String?>(disjuntorTipoAcionamento),
      'disjuntorPressaoSf6Nominal':
          serializer.toJson<double?>(disjuntorPressaoSf6Nominal),
      'disjuntorPressaoSf6NominalTemperatura':
          serializer.toJson<double?>(disjuntorPressaoSf6NominalTemperatura),
      'dadoPlacaFechamento': serializer.toJson<double?>(dadoPlacaFechamento),
      'dadoPlacaAbertura': serializer.toJson<double?>(dadoPlacaAbertura),
      'dataEnsaio': serializer.toJson<DateTime>(dataEnsaio),
    };
  }

  MpDjFormTableData copyWith(
          {int? id,
          String? atividadeId,
          Value<CaracterizacaoEnsaio?> caracterizacaoEnsaio =
              const Value.absent(),
          Value<String?> disjuntorFabricante = const Value.absent(),
          Value<String?> disjuntorAnoFabricacao = const Value.absent(),
          Value<double?> disjuntorTensaoNominal = const Value.absent(),
          Value<int?> disjuntorCorrenteNominal = const Value.absent(),
          Value<int?> disjuntorCapInterrupcaoNominal = const Value.absent(),
          Value<TipoExtinsaoDisjuntor?> disjuntorTipoExtinsao =
              const Value.absent(),
          Value<String?> disjuntorTipoAcionamento = const Value.absent(),
          Value<double?> disjuntorPressaoSf6Nominal = const Value.absent(),
          Value<double?> disjuntorPressaoSf6NominalTemperatura =
              const Value.absent(),
          Value<double?> dadoPlacaFechamento = const Value.absent(),
          Value<double?> dadoPlacaAbertura = const Value.absent(),
          DateTime? dataEnsaio}) =>
      MpDjFormTableData(
        id: id ?? this.id,
        atividadeId: atividadeId ?? this.atividadeId,
        caracterizacaoEnsaio: caracterizacaoEnsaio.present
            ? caracterizacaoEnsaio.value
            : this.caracterizacaoEnsaio,
        disjuntorFabricante: disjuntorFabricante.present
            ? disjuntorFabricante.value
            : this.disjuntorFabricante,
        disjuntorAnoFabricacao: disjuntorAnoFabricacao.present
            ? disjuntorAnoFabricacao.value
            : this.disjuntorAnoFabricacao,
        disjuntorTensaoNominal: disjuntorTensaoNominal.present
            ? disjuntorTensaoNominal.value
            : this.disjuntorTensaoNominal,
        disjuntorCorrenteNominal: disjuntorCorrenteNominal.present
            ? disjuntorCorrenteNominal.value
            : this.disjuntorCorrenteNominal,
        disjuntorCapInterrupcaoNominal: disjuntorCapInterrupcaoNominal.present
            ? disjuntorCapInterrupcaoNominal.value
            : this.disjuntorCapInterrupcaoNominal,
        disjuntorTipoExtinsao: disjuntorTipoExtinsao.present
            ? disjuntorTipoExtinsao.value
            : this.disjuntorTipoExtinsao,
        disjuntorTipoAcionamento: disjuntorTipoAcionamento.present
            ? disjuntorTipoAcionamento.value
            : this.disjuntorTipoAcionamento,
        disjuntorPressaoSf6Nominal: disjuntorPressaoSf6Nominal.present
            ? disjuntorPressaoSf6Nominal.value
            : this.disjuntorPressaoSf6Nominal,
        disjuntorPressaoSf6NominalTemperatura:
            disjuntorPressaoSf6NominalTemperatura.present
                ? disjuntorPressaoSf6NominalTemperatura.value
                : this.disjuntorPressaoSf6NominalTemperatura,
        dadoPlacaFechamento: dadoPlacaFechamento.present
            ? dadoPlacaFechamento.value
            : this.dadoPlacaFechamento,
        dadoPlacaAbertura: dadoPlacaAbertura.present
            ? dadoPlacaAbertura.value
            : this.dadoPlacaAbertura,
        dataEnsaio: dataEnsaio ?? this.dataEnsaio,
      );
  MpDjFormTableData copyWithCompanion(MpDjFormTableCompanion data) {
    return MpDjFormTableData(
      id: data.id.present ? data.id.value : this.id,
      atividadeId:
          data.atividadeId.present ? data.atividadeId.value : this.atividadeId,
      caracterizacaoEnsaio: data.caracterizacaoEnsaio.present
          ? data.caracterizacaoEnsaio.value
          : this.caracterizacaoEnsaio,
      disjuntorFabricante: data.disjuntorFabricante.present
          ? data.disjuntorFabricante.value
          : this.disjuntorFabricante,
      disjuntorAnoFabricacao: data.disjuntorAnoFabricacao.present
          ? data.disjuntorAnoFabricacao.value
          : this.disjuntorAnoFabricacao,
      disjuntorTensaoNominal: data.disjuntorTensaoNominal.present
          ? data.disjuntorTensaoNominal.value
          : this.disjuntorTensaoNominal,
      disjuntorCorrenteNominal: data.disjuntorCorrenteNominal.present
          ? data.disjuntorCorrenteNominal.value
          : this.disjuntorCorrenteNominal,
      disjuntorCapInterrupcaoNominal:
          data.disjuntorCapInterrupcaoNominal.present
              ? data.disjuntorCapInterrupcaoNominal.value
              : this.disjuntorCapInterrupcaoNominal,
      disjuntorTipoExtinsao: data.disjuntorTipoExtinsao.present
          ? data.disjuntorTipoExtinsao.value
          : this.disjuntorTipoExtinsao,
      disjuntorTipoAcionamento: data.disjuntorTipoAcionamento.present
          ? data.disjuntorTipoAcionamento.value
          : this.disjuntorTipoAcionamento,
      disjuntorPressaoSf6Nominal: data.disjuntorPressaoSf6Nominal.present
          ? data.disjuntorPressaoSf6Nominal.value
          : this.disjuntorPressaoSf6Nominal,
      disjuntorPressaoSf6NominalTemperatura:
          data.disjuntorPressaoSf6NominalTemperatura.present
              ? data.disjuntorPressaoSf6NominalTemperatura.value
              : this.disjuntorPressaoSf6NominalTemperatura,
      dadoPlacaFechamento: data.dadoPlacaFechamento.present
          ? data.dadoPlacaFechamento.value
          : this.dadoPlacaFechamento,
      dadoPlacaAbertura: data.dadoPlacaAbertura.present
          ? data.dadoPlacaAbertura.value
          : this.dadoPlacaAbertura,
      dataEnsaio:
          data.dataEnsaio.present ? data.dataEnsaio.value : this.dataEnsaio,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MpDjFormTableData(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('caracterizacaoEnsaio: $caracterizacaoEnsaio, ')
          ..write('disjuntorFabricante: $disjuntorFabricante, ')
          ..write('disjuntorAnoFabricacao: $disjuntorAnoFabricacao, ')
          ..write('disjuntorTensaoNominal: $disjuntorTensaoNominal, ')
          ..write('disjuntorCorrenteNominal: $disjuntorCorrenteNominal, ')
          ..write(
              'disjuntorCapInterrupcaoNominal: $disjuntorCapInterrupcaoNominal, ')
          ..write('disjuntorTipoExtinsao: $disjuntorTipoExtinsao, ')
          ..write('disjuntorTipoAcionamento: $disjuntorTipoAcionamento, ')
          ..write('disjuntorPressaoSf6Nominal: $disjuntorPressaoSf6Nominal, ')
          ..write(
              'disjuntorPressaoSf6NominalTemperatura: $disjuntorPressaoSf6NominalTemperatura, ')
          ..write('dadoPlacaFechamento: $dadoPlacaFechamento, ')
          ..write('dadoPlacaAbertura: $dadoPlacaAbertura, ')
          ..write('dataEnsaio: $dataEnsaio')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      atividadeId,
      caracterizacaoEnsaio,
      disjuntorFabricante,
      disjuntorAnoFabricacao,
      disjuntorTensaoNominal,
      disjuntorCorrenteNominal,
      disjuntorCapInterrupcaoNominal,
      disjuntorTipoExtinsao,
      disjuntorTipoAcionamento,
      disjuntorPressaoSf6Nominal,
      disjuntorPressaoSf6NominalTemperatura,
      dadoPlacaFechamento,
      dadoPlacaAbertura,
      dataEnsaio);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MpDjFormTableData &&
          other.id == this.id &&
          other.atividadeId == this.atividadeId &&
          other.caracterizacaoEnsaio == this.caracterizacaoEnsaio &&
          other.disjuntorFabricante == this.disjuntorFabricante &&
          other.disjuntorAnoFabricacao == this.disjuntorAnoFabricacao &&
          other.disjuntorTensaoNominal == this.disjuntorTensaoNominal &&
          other.disjuntorCorrenteNominal == this.disjuntorCorrenteNominal &&
          other.disjuntorCapInterrupcaoNominal ==
              this.disjuntorCapInterrupcaoNominal &&
          other.disjuntorTipoExtinsao == this.disjuntorTipoExtinsao &&
          other.disjuntorTipoAcionamento == this.disjuntorTipoAcionamento &&
          other.disjuntorPressaoSf6Nominal == this.disjuntorPressaoSf6Nominal &&
          other.disjuntorPressaoSf6NominalTemperatura ==
              this.disjuntorPressaoSf6NominalTemperatura &&
          other.dadoPlacaFechamento == this.dadoPlacaFechamento &&
          other.dadoPlacaAbertura == this.dadoPlacaAbertura &&
          other.dataEnsaio == this.dataEnsaio);
}

class MpDjFormTableCompanion extends UpdateCompanion<MpDjFormTableData> {
  final Value<int> id;
  final Value<String> atividadeId;
  final Value<CaracterizacaoEnsaio?> caracterizacaoEnsaio;
  final Value<String?> disjuntorFabricante;
  final Value<String?> disjuntorAnoFabricacao;
  final Value<double?> disjuntorTensaoNominal;
  final Value<int?> disjuntorCorrenteNominal;
  final Value<int?> disjuntorCapInterrupcaoNominal;
  final Value<TipoExtinsaoDisjuntor?> disjuntorTipoExtinsao;
  final Value<String?> disjuntorTipoAcionamento;
  final Value<double?> disjuntorPressaoSf6Nominal;
  final Value<double?> disjuntorPressaoSf6NominalTemperatura;
  final Value<double?> dadoPlacaFechamento;
  final Value<double?> dadoPlacaAbertura;
  final Value<DateTime> dataEnsaio;
  const MpDjFormTableCompanion({
    this.id = const Value.absent(),
    this.atividadeId = const Value.absent(),
    this.caracterizacaoEnsaio = const Value.absent(),
    this.disjuntorFabricante = const Value.absent(),
    this.disjuntorAnoFabricacao = const Value.absent(),
    this.disjuntorTensaoNominal = const Value.absent(),
    this.disjuntorCorrenteNominal = const Value.absent(),
    this.disjuntorCapInterrupcaoNominal = const Value.absent(),
    this.disjuntorTipoExtinsao = const Value.absent(),
    this.disjuntorTipoAcionamento = const Value.absent(),
    this.disjuntorPressaoSf6Nominal = const Value.absent(),
    this.disjuntorPressaoSf6NominalTemperatura = const Value.absent(),
    this.dadoPlacaFechamento = const Value.absent(),
    this.dadoPlacaAbertura = const Value.absent(),
    this.dataEnsaio = const Value.absent(),
  });
  MpDjFormTableCompanion.insert({
    this.id = const Value.absent(),
    required String atividadeId,
    this.caracterizacaoEnsaio = const Value.absent(),
    this.disjuntorFabricante = const Value.absent(),
    this.disjuntorAnoFabricacao = const Value.absent(),
    this.disjuntorTensaoNominal = const Value.absent(),
    this.disjuntorCorrenteNominal = const Value.absent(),
    this.disjuntorCapInterrupcaoNominal = const Value.absent(),
    this.disjuntorTipoExtinsao = const Value.absent(),
    this.disjuntorTipoAcionamento = const Value.absent(),
    this.disjuntorPressaoSf6Nominal = const Value.absent(),
    this.disjuntorPressaoSf6NominalTemperatura = const Value.absent(),
    this.dadoPlacaFechamento = const Value.absent(),
    this.dadoPlacaAbertura = const Value.absent(),
    this.dataEnsaio = const Value.absent(),
  }) : atividadeId = Value(atividadeId);
  static Insertable<MpDjFormTableData> custom({
    Expression<int>? id,
    Expression<String>? atividadeId,
    Expression<String>? caracterizacaoEnsaio,
    Expression<String>? disjuntorFabricante,
    Expression<String>? disjuntorAnoFabricacao,
    Expression<double>? disjuntorTensaoNominal,
    Expression<int>? disjuntorCorrenteNominal,
    Expression<int>? disjuntorCapInterrupcaoNominal,
    Expression<String>? disjuntorTipoExtinsao,
    Expression<String>? disjuntorTipoAcionamento,
    Expression<double>? disjuntorPressaoSf6Nominal,
    Expression<double>? disjuntorPressaoSf6NominalTemperatura,
    Expression<double>? dadoPlacaFechamento,
    Expression<double>? dadoPlacaAbertura,
    Expression<DateTime>? dataEnsaio,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (atividadeId != null) 'atividade_id': atividadeId,
      if (caracterizacaoEnsaio != null)
        'caracterizacao_ensaio': caracterizacaoEnsaio,
      if (disjuntorFabricante != null)
        'disjuntor_fabricante': disjuntorFabricante,
      if (disjuntorAnoFabricacao != null)
        'disjuntor_ano_fabricacao': disjuntorAnoFabricacao,
      if (disjuntorTensaoNominal != null)
        'disjuntor_tensao_nominal': disjuntorTensaoNominal,
      if (disjuntorCorrenteNominal != null)
        'disjuntor_corrente_nominal': disjuntorCorrenteNominal,
      if (disjuntorCapInterrupcaoNominal != null)
        'disjuntor_cap_interrupcao_nominal': disjuntorCapInterrupcaoNominal,
      if (disjuntorTipoExtinsao != null)
        'disjuntor_tipo_extinsao': disjuntorTipoExtinsao,
      if (disjuntorTipoAcionamento != null)
        'disjuntor_tipo_acionamento': disjuntorTipoAcionamento,
      if (disjuntorPressaoSf6Nominal != null)
        'disjuntor_pressao_sf6_nominal': disjuntorPressaoSf6Nominal,
      if (disjuntorPressaoSf6NominalTemperatura != null)
        'disjuntor_pressao_sf6_nominal_temperatura':
            disjuntorPressaoSf6NominalTemperatura,
      if (dadoPlacaFechamento != null)
        'dado_placa_fechamento': dadoPlacaFechamento,
      if (dadoPlacaAbertura != null) 'dado_placa_abertura': dadoPlacaAbertura,
      if (dataEnsaio != null) 'data_ensaio': dataEnsaio,
    });
  }

  MpDjFormTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? atividadeId,
      Value<CaracterizacaoEnsaio?>? caracterizacaoEnsaio,
      Value<String?>? disjuntorFabricante,
      Value<String?>? disjuntorAnoFabricacao,
      Value<double?>? disjuntorTensaoNominal,
      Value<int?>? disjuntorCorrenteNominal,
      Value<int?>? disjuntorCapInterrupcaoNominal,
      Value<TipoExtinsaoDisjuntor?>? disjuntorTipoExtinsao,
      Value<String?>? disjuntorTipoAcionamento,
      Value<double?>? disjuntorPressaoSf6Nominal,
      Value<double?>? disjuntorPressaoSf6NominalTemperatura,
      Value<double?>? dadoPlacaFechamento,
      Value<double?>? dadoPlacaAbertura,
      Value<DateTime>? dataEnsaio}) {
    return MpDjFormTableCompanion(
      id: id ?? this.id,
      atividadeId: atividadeId ?? this.atividadeId,
      caracterizacaoEnsaio: caracterizacaoEnsaio ?? this.caracterizacaoEnsaio,
      disjuntorFabricante: disjuntorFabricante ?? this.disjuntorFabricante,
      disjuntorAnoFabricacao:
          disjuntorAnoFabricacao ?? this.disjuntorAnoFabricacao,
      disjuntorTensaoNominal:
          disjuntorTensaoNominal ?? this.disjuntorTensaoNominal,
      disjuntorCorrenteNominal:
          disjuntorCorrenteNominal ?? this.disjuntorCorrenteNominal,
      disjuntorCapInterrupcaoNominal:
          disjuntorCapInterrupcaoNominal ?? this.disjuntorCapInterrupcaoNominal,
      disjuntorTipoExtinsao:
          disjuntorTipoExtinsao ?? this.disjuntorTipoExtinsao,
      disjuntorTipoAcionamento:
          disjuntorTipoAcionamento ?? this.disjuntorTipoAcionamento,
      disjuntorPressaoSf6Nominal:
          disjuntorPressaoSf6Nominal ?? this.disjuntorPressaoSf6Nominal,
      disjuntorPressaoSf6NominalTemperatura:
          disjuntorPressaoSf6NominalTemperatura ??
              this.disjuntorPressaoSf6NominalTemperatura,
      dadoPlacaFechamento: dadoPlacaFechamento ?? this.dadoPlacaFechamento,
      dadoPlacaAbertura: dadoPlacaAbertura ?? this.dadoPlacaAbertura,
      dataEnsaio: dataEnsaio ?? this.dataEnsaio,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (atividadeId.present) {
      map['atividade_id'] = Variable<String>(atividadeId.value);
    }
    if (caracterizacaoEnsaio.present) {
      map['caracterizacao_ensaio'] = Variable<String>($MpDjFormTableTable
          .$convertercaracterizacaoEnsaion
          .toSql(caracterizacaoEnsaio.value));
    }
    if (disjuntorFabricante.present) {
      map['disjuntor_fabricante'] = Variable<String>(disjuntorFabricante.value);
    }
    if (disjuntorAnoFabricacao.present) {
      map['disjuntor_ano_fabricacao'] =
          Variable<String>(disjuntorAnoFabricacao.value);
    }
    if (disjuntorTensaoNominal.present) {
      map['disjuntor_tensao_nominal'] =
          Variable<double>(disjuntorTensaoNominal.value);
    }
    if (disjuntorCorrenteNominal.present) {
      map['disjuntor_corrente_nominal'] =
          Variable<int>(disjuntorCorrenteNominal.value);
    }
    if (disjuntorCapInterrupcaoNominal.present) {
      map['disjuntor_cap_interrupcao_nominal'] =
          Variable<int>(disjuntorCapInterrupcaoNominal.value);
    }
    if (disjuntorTipoExtinsao.present) {
      map['disjuntor_tipo_extinsao'] = Variable<String>($MpDjFormTableTable
          .$converterdisjuntorTipoExtinsaon
          .toSql(disjuntorTipoExtinsao.value));
    }
    if (disjuntorTipoAcionamento.present) {
      map['disjuntor_tipo_acionamento'] =
          Variable<String>(disjuntorTipoAcionamento.value);
    }
    if (disjuntorPressaoSf6Nominal.present) {
      map['disjuntor_pressao_sf6_nominal'] =
          Variable<double>(disjuntorPressaoSf6Nominal.value);
    }
    if (disjuntorPressaoSf6NominalTemperatura.present) {
      map['disjuntor_pressao_sf6_nominal_temperatura'] =
          Variable<double>(disjuntorPressaoSf6NominalTemperatura.value);
    }
    if (dadoPlacaFechamento.present) {
      map['dado_placa_fechamento'] =
          Variable<double>(dadoPlacaFechamento.value);
    }
    if (dadoPlacaAbertura.present) {
      map['dado_placa_abertura'] = Variable<double>(dadoPlacaAbertura.value);
    }
    if (dataEnsaio.present) {
      map['data_ensaio'] = Variable<DateTime>(dataEnsaio.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MpDjFormTableCompanion(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('caracterizacaoEnsaio: $caracterizacaoEnsaio, ')
          ..write('disjuntorFabricante: $disjuntorFabricante, ')
          ..write('disjuntorAnoFabricacao: $disjuntorAnoFabricacao, ')
          ..write('disjuntorTensaoNominal: $disjuntorTensaoNominal, ')
          ..write('disjuntorCorrenteNominal: $disjuntorCorrenteNominal, ')
          ..write(
              'disjuntorCapInterrupcaoNominal: $disjuntorCapInterrupcaoNominal, ')
          ..write('disjuntorTipoExtinsao: $disjuntorTipoExtinsao, ')
          ..write('disjuntorTipoAcionamento: $disjuntorTipoAcionamento, ')
          ..write('disjuntorPressaoSf6Nominal: $disjuntorPressaoSf6Nominal, ')
          ..write(
              'disjuntorPressaoSf6NominalTemperatura: $disjuntorPressaoSf6NominalTemperatura, ')
          ..write('dadoPlacaFechamento: $dadoPlacaFechamento, ')
          ..write('dadoPlacaAbertura: $dadoPlacaAbertura, ')
          ..write('dataEnsaio: $dataEnsaio')
          ..write(')'))
        .toString();
  }
}

class $MpDjPressaoSf6TableTable extends MpDjPressaoSf6Table
    with TableInfo<$MpDjPressaoSf6TableTable, MpDjPressaoSf6TableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MpDjPressaoSf6TableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _mpDjFormIdMeta =
      const VerificationMeta('mpDjFormId');
  @override
  late final GeneratedColumn<int> mpDjFormId = GeneratedColumn<int>(
      'mp_dj_form_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES mp_dj_form_table (id)'));
  static const VerificationMeta _faseMeta = const VerificationMeta('fase');
  @override
  late final GeneratedColumnWithTypeConverter<FaseAnomalia, String> fase =
      GeneratedColumn<String>('fase', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<FaseAnomalia>(
              $MpDjPressaoSf6TableTable.$converterfase);
  static const VerificationMeta _valorPressaoMeta =
      const VerificationMeta('valorPressao');
  @override
  late final GeneratedColumn<double> valorPressao = GeneratedColumn<double>(
      'valor_pressao', aliasedName, false,
      type: DriftSqlType.double, requiredDuringInsert: true);
  static const VerificationMeta _temperaturaMeta =
      const VerificationMeta('temperatura');
  @override
  late final GeneratedColumn<double> temperatura = GeneratedColumn<double>(
      'temperatura', aliasedName, false,
      type: DriftSqlType.double, requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, mpDjFormId, fase, valorPressao, temperatura];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'mp_dj_pressao_sf6_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<MpDjPressaoSf6TableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('mp_dj_form_id')) {
      context.handle(
          _mpDjFormIdMeta,
          mpDjFormId.isAcceptableOrUnknown(
              data['mp_dj_form_id']!, _mpDjFormIdMeta));
    } else if (isInserting) {
      context.missing(_mpDjFormIdMeta);
    }
    context.handle(_faseMeta, const VerificationResult.success());
    if (data.containsKey('valor_pressao')) {
      context.handle(
          _valorPressaoMeta,
          valorPressao.isAcceptableOrUnknown(
              data['valor_pressao']!, _valorPressaoMeta));
    } else if (isInserting) {
      context.missing(_valorPressaoMeta);
    }
    if (data.containsKey('temperatura')) {
      context.handle(
          _temperaturaMeta,
          temperatura.isAcceptableOrUnknown(
              data['temperatura']!, _temperaturaMeta));
    } else if (isInserting) {
      context.missing(_temperaturaMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MpDjPressaoSf6TableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MpDjPressaoSf6TableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      mpDjFormId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}mp_dj_form_id'])!,
      fase: $MpDjPressaoSf6TableTable.$converterfase.fromSql(attachedDatabase
          .typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}fase'])!),
      valorPressao: attachedDatabase.typeMapping
          .read(DriftSqlType.double, data['${effectivePrefix}valor_pressao'])!,
      temperatura: attachedDatabase.typeMapping
          .read(DriftSqlType.double, data['${effectivePrefix}temperatura'])!,
    );
  }

  @override
  $MpDjPressaoSf6TableTable createAlias(String alias) {
    return $MpDjPressaoSf6TableTable(attachedDatabase, alias);
  }

  static TypeConverter<FaseAnomalia, String> $converterfase =
      const FaseAnomaliaConverter();
}

class MpDjPressaoSf6TableData extends DataClass
    implements Insertable<MpDjPressaoSf6TableData> {
  final int id;
  final int mpDjFormId;
  final FaseAnomalia fase;
  final double valorPressao;
  final double temperatura;
  const MpDjPressaoSf6TableData(
      {required this.id,
      required this.mpDjFormId,
      required this.fase,
      required this.valorPressao,
      required this.temperatura});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['mp_dj_form_id'] = Variable<int>(mpDjFormId);
    {
      map['fase'] = Variable<String>(
          $MpDjPressaoSf6TableTable.$converterfase.toSql(fase));
    }
    map['valor_pressao'] = Variable<double>(valorPressao);
    map['temperatura'] = Variable<double>(temperatura);
    return map;
  }

  MpDjPressaoSf6TableCompanion toCompanion(bool nullToAbsent) {
    return MpDjPressaoSf6TableCompanion(
      id: Value(id),
      mpDjFormId: Value(mpDjFormId),
      fase: Value(fase),
      valorPressao: Value(valorPressao),
      temperatura: Value(temperatura),
    );
  }

  factory MpDjPressaoSf6TableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MpDjPressaoSf6TableData(
      id: serializer.fromJson<int>(json['id']),
      mpDjFormId: serializer.fromJson<int>(json['mpDjFormId']),
      fase: serializer.fromJson<FaseAnomalia>(json['fase']),
      valorPressao: serializer.fromJson<double>(json['valorPressao']),
      temperatura: serializer.fromJson<double>(json['temperatura']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'mpDjFormId': serializer.toJson<int>(mpDjFormId),
      'fase': serializer.toJson<FaseAnomalia>(fase),
      'valorPressao': serializer.toJson<double>(valorPressao),
      'temperatura': serializer.toJson<double>(temperatura),
    };
  }

  MpDjPressaoSf6TableData copyWith(
          {int? id,
          int? mpDjFormId,
          FaseAnomalia? fase,
          double? valorPressao,
          double? temperatura}) =>
      MpDjPressaoSf6TableData(
        id: id ?? this.id,
        mpDjFormId: mpDjFormId ?? this.mpDjFormId,
        fase: fase ?? this.fase,
        valorPressao: valorPressao ?? this.valorPressao,
        temperatura: temperatura ?? this.temperatura,
      );
  MpDjPressaoSf6TableData copyWithCompanion(MpDjPressaoSf6TableCompanion data) {
    return MpDjPressaoSf6TableData(
      id: data.id.present ? data.id.value : this.id,
      mpDjFormId:
          data.mpDjFormId.present ? data.mpDjFormId.value : this.mpDjFormId,
      fase: data.fase.present ? data.fase.value : this.fase,
      valorPressao: data.valorPressao.present
          ? data.valorPressao.value
          : this.valorPressao,
      temperatura:
          data.temperatura.present ? data.temperatura.value : this.temperatura,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MpDjPressaoSf6TableData(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('fase: $fase, ')
          ..write('valorPressao: $valorPressao, ')
          ..write('temperatura: $temperatura')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, mpDjFormId, fase, valorPressao, temperatura);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MpDjPressaoSf6TableData &&
          other.id == this.id &&
          other.mpDjFormId == this.mpDjFormId &&
          other.fase == this.fase &&
          other.valorPressao == this.valorPressao &&
          other.temperatura == this.temperatura);
}

class MpDjPressaoSf6TableCompanion
    extends UpdateCompanion<MpDjPressaoSf6TableData> {
  final Value<int> id;
  final Value<int> mpDjFormId;
  final Value<FaseAnomalia> fase;
  final Value<double> valorPressao;
  final Value<double> temperatura;
  const MpDjPressaoSf6TableCompanion({
    this.id = const Value.absent(),
    this.mpDjFormId = const Value.absent(),
    this.fase = const Value.absent(),
    this.valorPressao = const Value.absent(),
    this.temperatura = const Value.absent(),
  });
  MpDjPressaoSf6TableCompanion.insert({
    this.id = const Value.absent(),
    required int mpDjFormId,
    required FaseAnomalia fase,
    required double valorPressao,
    required double temperatura,
  })  : mpDjFormId = Value(mpDjFormId),
        fase = Value(fase),
        valorPressao = Value(valorPressao),
        temperatura = Value(temperatura);
  static Insertable<MpDjPressaoSf6TableData> custom({
    Expression<int>? id,
    Expression<int>? mpDjFormId,
    Expression<String>? fase,
    Expression<double>? valorPressao,
    Expression<double>? temperatura,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (mpDjFormId != null) 'mp_dj_form_id': mpDjFormId,
      if (fase != null) 'fase': fase,
      if (valorPressao != null) 'valor_pressao': valorPressao,
      if (temperatura != null) 'temperatura': temperatura,
    });
  }

  MpDjPressaoSf6TableCompanion copyWith(
      {Value<int>? id,
      Value<int>? mpDjFormId,
      Value<FaseAnomalia>? fase,
      Value<double>? valorPressao,
      Value<double>? temperatura}) {
    return MpDjPressaoSf6TableCompanion(
      id: id ?? this.id,
      mpDjFormId: mpDjFormId ?? this.mpDjFormId,
      fase: fase ?? this.fase,
      valorPressao: valorPressao ?? this.valorPressao,
      temperatura: temperatura ?? this.temperatura,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (mpDjFormId.present) {
      map['mp_dj_form_id'] = Variable<int>(mpDjFormId.value);
    }
    if (fase.present) {
      map['fase'] = Variable<String>(
          $MpDjPressaoSf6TableTable.$converterfase.toSql(fase.value));
    }
    if (valorPressao.present) {
      map['valor_pressao'] = Variable<double>(valorPressao.value);
    }
    if (temperatura.present) {
      map['temperatura'] = Variable<double>(temperatura.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MpDjPressaoSf6TableCompanion(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('fase: $fase, ')
          ..write('valorPressao: $valorPressao, ')
          ..write('temperatura: $temperatura')
          ..write(')'))
        .toString();
  }
}

class $MpDjTempoOperacaoTableTable extends MpDjTempoOperacaoTable
    with TableInfo<$MpDjTempoOperacaoTableTable, MpDjTempoOperacaoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MpDjTempoOperacaoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _mpDjFormIdMeta =
      const VerificationMeta('mpDjFormId');
  @override
  late final GeneratedColumn<int> mpDjFormId = GeneratedColumn<int>(
      'mp_dj_form_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES mp_dj_form_table (id)'));
  static const VerificationMeta _formularioDisjuntorIdMeta =
      const VerificationMeta('formularioDisjuntorId');
  @override
  late final GeneratedColumn<int> formularioDisjuntorId = GeneratedColumn<int>(
      'formulario_disjuntor_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES mp_dj_form_table (id)'));
  static const VerificationMeta _faseMeta = const VerificationMeta('fase');
  @override
  late final GeneratedColumnWithTypeConverter<FaseAnomalia, String> fase =
      GeneratedColumn<String>('fase', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<FaseAnomalia>(
              $MpDjTempoOperacaoTableTable.$converterfase);
  static const VerificationMeta _fechamentoBobina1Meta =
      const VerificationMeta('fechamentoBobina1');
  @override
  late final GeneratedColumn<double> fechamentoBobina1 =
      GeneratedColumn<double>('fechamento_bobina1', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _fechamentoBobina2Meta =
      const VerificationMeta('fechamentoBobina2');
  @override
  late final GeneratedColumn<double> fechamentoBobina2 =
      GeneratedColumn<double>('fechamento_bobina2', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _aberturaBobina1Meta =
      const VerificationMeta('aberturaBobina1');
  @override
  late final GeneratedColumn<double> aberturaBobina1 = GeneratedColumn<double>(
      'abertura_bobina1', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _aberturaBobina2Meta =
      const VerificationMeta('aberturaBobina2');
  @override
  late final GeneratedColumn<double> aberturaBobina2 = GeneratedColumn<double>(
      'abertura_bobina2', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        mpDjFormId,
        formularioDisjuntorId,
        fase,
        fechamentoBobina1,
        fechamentoBobina2,
        aberturaBobina1,
        aberturaBobina2
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'mp_dj_tempo_operacao_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<MpDjTempoOperacaoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('mp_dj_form_id')) {
      context.handle(
          _mpDjFormIdMeta,
          mpDjFormId.isAcceptableOrUnknown(
              data['mp_dj_form_id']!, _mpDjFormIdMeta));
    } else if (isInserting) {
      context.missing(_mpDjFormIdMeta);
    }
    if (data.containsKey('formulario_disjuntor_id')) {
      context.handle(
          _formularioDisjuntorIdMeta,
          formularioDisjuntorId.isAcceptableOrUnknown(
              data['formulario_disjuntor_id']!, _formularioDisjuntorIdMeta));
    } else if (isInserting) {
      context.missing(_formularioDisjuntorIdMeta);
    }
    context.handle(_faseMeta, const VerificationResult.success());
    if (data.containsKey('fechamento_bobina1')) {
      context.handle(
          _fechamentoBobina1Meta,
          fechamentoBobina1.isAcceptableOrUnknown(
              data['fechamento_bobina1']!, _fechamentoBobina1Meta));
    }
    if (data.containsKey('fechamento_bobina2')) {
      context.handle(
          _fechamentoBobina2Meta,
          fechamentoBobina2.isAcceptableOrUnknown(
              data['fechamento_bobina2']!, _fechamentoBobina2Meta));
    }
    if (data.containsKey('abertura_bobina1')) {
      context.handle(
          _aberturaBobina1Meta,
          aberturaBobina1.isAcceptableOrUnknown(
              data['abertura_bobina1']!, _aberturaBobina1Meta));
    }
    if (data.containsKey('abertura_bobina2')) {
      context.handle(
          _aberturaBobina2Meta,
          aberturaBobina2.isAcceptableOrUnknown(
              data['abertura_bobina2']!, _aberturaBobina2Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MpDjTempoOperacaoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MpDjTempoOperacaoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      mpDjFormId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}mp_dj_form_id'])!,
      formularioDisjuntorId: attachedDatabase.typeMapping.read(
          DriftSqlType.int, data['${effectivePrefix}formulario_disjuntor_id'])!,
      fase: $MpDjTempoOperacaoTableTable.$converterfase.fromSql(attachedDatabase
          .typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}fase'])!),
      fechamentoBobina1: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}fechamento_bobina1']),
      fechamentoBobina2: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}fechamento_bobina2']),
      aberturaBobina1: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}abertura_bobina1']),
      aberturaBobina2: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}abertura_bobina2']),
    );
  }

  @override
  $MpDjTempoOperacaoTableTable createAlias(String alias) {
    return $MpDjTempoOperacaoTableTable(attachedDatabase, alias);
  }

  static TypeConverter<FaseAnomalia, String> $converterfase =
      const FaseAnomaliaConverter();
}

class MpDjTempoOperacaoTableData extends DataClass
    implements Insertable<MpDjTempoOperacaoTableData> {
  final int id;
  final int mpDjFormId;
  final int formularioDisjuntorId;
  final FaseAnomalia fase;
  final double? fechamentoBobina1;
  final double? fechamentoBobina2;
  final double? aberturaBobina1;
  final double? aberturaBobina2;
  const MpDjTempoOperacaoTableData(
      {required this.id,
      required this.mpDjFormId,
      required this.formularioDisjuntorId,
      required this.fase,
      this.fechamentoBobina1,
      this.fechamentoBobina2,
      this.aberturaBobina1,
      this.aberturaBobina2});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['mp_dj_form_id'] = Variable<int>(mpDjFormId);
    map['formulario_disjuntor_id'] = Variable<int>(formularioDisjuntorId);
    {
      map['fase'] = Variable<String>(
          $MpDjTempoOperacaoTableTable.$converterfase.toSql(fase));
    }
    if (!nullToAbsent || fechamentoBobina1 != null) {
      map['fechamento_bobina1'] = Variable<double>(fechamentoBobina1);
    }
    if (!nullToAbsent || fechamentoBobina2 != null) {
      map['fechamento_bobina2'] = Variable<double>(fechamentoBobina2);
    }
    if (!nullToAbsent || aberturaBobina1 != null) {
      map['abertura_bobina1'] = Variable<double>(aberturaBobina1);
    }
    if (!nullToAbsent || aberturaBobina2 != null) {
      map['abertura_bobina2'] = Variable<double>(aberturaBobina2);
    }
    return map;
  }

  MpDjTempoOperacaoTableCompanion toCompanion(bool nullToAbsent) {
    return MpDjTempoOperacaoTableCompanion(
      id: Value(id),
      mpDjFormId: Value(mpDjFormId),
      formularioDisjuntorId: Value(formularioDisjuntorId),
      fase: Value(fase),
      fechamentoBobina1: fechamentoBobina1 == null && nullToAbsent
          ? const Value.absent()
          : Value(fechamentoBobina1),
      fechamentoBobina2: fechamentoBobina2 == null && nullToAbsent
          ? const Value.absent()
          : Value(fechamentoBobina2),
      aberturaBobina1: aberturaBobina1 == null && nullToAbsent
          ? const Value.absent()
          : Value(aberturaBobina1),
      aberturaBobina2: aberturaBobina2 == null && nullToAbsent
          ? const Value.absent()
          : Value(aberturaBobina2),
    );
  }

  factory MpDjTempoOperacaoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MpDjTempoOperacaoTableData(
      id: serializer.fromJson<int>(json['id']),
      mpDjFormId: serializer.fromJson<int>(json['mpDjFormId']),
      formularioDisjuntorId:
          serializer.fromJson<int>(json['formularioDisjuntorId']),
      fase: serializer.fromJson<FaseAnomalia>(json['fase']),
      fechamentoBobina1:
          serializer.fromJson<double?>(json['fechamentoBobina1']),
      fechamentoBobina2:
          serializer.fromJson<double?>(json['fechamentoBobina2']),
      aberturaBobina1: serializer.fromJson<double?>(json['aberturaBobina1']),
      aberturaBobina2: serializer.fromJson<double?>(json['aberturaBobina2']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'mpDjFormId': serializer.toJson<int>(mpDjFormId),
      'formularioDisjuntorId': serializer.toJson<int>(formularioDisjuntorId),
      'fase': serializer.toJson<FaseAnomalia>(fase),
      'fechamentoBobina1': serializer.toJson<double?>(fechamentoBobina1),
      'fechamentoBobina2': serializer.toJson<double?>(fechamentoBobina2),
      'aberturaBobina1': serializer.toJson<double?>(aberturaBobina1),
      'aberturaBobina2': serializer.toJson<double?>(aberturaBobina2),
    };
  }

  MpDjTempoOperacaoTableData copyWith(
          {int? id,
          int? mpDjFormId,
          int? formularioDisjuntorId,
          FaseAnomalia? fase,
          Value<double?> fechamentoBobina1 = const Value.absent(),
          Value<double?> fechamentoBobina2 = const Value.absent(),
          Value<double?> aberturaBobina1 = const Value.absent(),
          Value<double?> aberturaBobina2 = const Value.absent()}) =>
      MpDjTempoOperacaoTableData(
        id: id ?? this.id,
        mpDjFormId: mpDjFormId ?? this.mpDjFormId,
        formularioDisjuntorId:
            formularioDisjuntorId ?? this.formularioDisjuntorId,
        fase: fase ?? this.fase,
        fechamentoBobina1: fechamentoBobina1.present
            ? fechamentoBobina1.value
            : this.fechamentoBobina1,
        fechamentoBobina2: fechamentoBobina2.present
            ? fechamentoBobina2.value
            : this.fechamentoBobina2,
        aberturaBobina1: aberturaBobina1.present
            ? aberturaBobina1.value
            : this.aberturaBobina1,
        aberturaBobina2: aberturaBobina2.present
            ? aberturaBobina2.value
            : this.aberturaBobina2,
      );
  MpDjTempoOperacaoTableData copyWithCompanion(
      MpDjTempoOperacaoTableCompanion data) {
    return MpDjTempoOperacaoTableData(
      id: data.id.present ? data.id.value : this.id,
      mpDjFormId:
          data.mpDjFormId.present ? data.mpDjFormId.value : this.mpDjFormId,
      formularioDisjuntorId: data.formularioDisjuntorId.present
          ? data.formularioDisjuntorId.value
          : this.formularioDisjuntorId,
      fase: data.fase.present ? data.fase.value : this.fase,
      fechamentoBobina1: data.fechamentoBobina1.present
          ? data.fechamentoBobina1.value
          : this.fechamentoBobina1,
      fechamentoBobina2: data.fechamentoBobina2.present
          ? data.fechamentoBobina2.value
          : this.fechamentoBobina2,
      aberturaBobina1: data.aberturaBobina1.present
          ? data.aberturaBobina1.value
          : this.aberturaBobina1,
      aberturaBobina2: data.aberturaBobina2.present
          ? data.aberturaBobina2.value
          : this.aberturaBobina2,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MpDjTempoOperacaoTableData(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('formularioDisjuntorId: $formularioDisjuntorId, ')
          ..write('fase: $fase, ')
          ..write('fechamentoBobina1: $fechamentoBobina1, ')
          ..write('fechamentoBobina2: $fechamentoBobina2, ')
          ..write('aberturaBobina1: $aberturaBobina1, ')
          ..write('aberturaBobina2: $aberturaBobina2')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, mpDjFormId, formularioDisjuntorId, fase,
      fechamentoBobina1, fechamentoBobina2, aberturaBobina1, aberturaBobina2);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MpDjTempoOperacaoTableData &&
          other.id == this.id &&
          other.mpDjFormId == this.mpDjFormId &&
          other.formularioDisjuntorId == this.formularioDisjuntorId &&
          other.fase == this.fase &&
          other.fechamentoBobina1 == this.fechamentoBobina1 &&
          other.fechamentoBobina2 == this.fechamentoBobina2 &&
          other.aberturaBobina1 == this.aberturaBobina1 &&
          other.aberturaBobina2 == this.aberturaBobina2);
}

class MpDjTempoOperacaoTableCompanion
    extends UpdateCompanion<MpDjTempoOperacaoTableData> {
  final Value<int> id;
  final Value<int> mpDjFormId;
  final Value<int> formularioDisjuntorId;
  final Value<FaseAnomalia> fase;
  final Value<double?> fechamentoBobina1;
  final Value<double?> fechamentoBobina2;
  final Value<double?> aberturaBobina1;
  final Value<double?> aberturaBobina2;
  const MpDjTempoOperacaoTableCompanion({
    this.id = const Value.absent(),
    this.mpDjFormId = const Value.absent(),
    this.formularioDisjuntorId = const Value.absent(),
    this.fase = const Value.absent(),
    this.fechamentoBobina1 = const Value.absent(),
    this.fechamentoBobina2 = const Value.absent(),
    this.aberturaBobina1 = const Value.absent(),
    this.aberturaBobina2 = const Value.absent(),
  });
  MpDjTempoOperacaoTableCompanion.insert({
    this.id = const Value.absent(),
    required int mpDjFormId,
    required int formularioDisjuntorId,
    required FaseAnomalia fase,
    this.fechamentoBobina1 = const Value.absent(),
    this.fechamentoBobina2 = const Value.absent(),
    this.aberturaBobina1 = const Value.absent(),
    this.aberturaBobina2 = const Value.absent(),
  })  : mpDjFormId = Value(mpDjFormId),
        formularioDisjuntorId = Value(formularioDisjuntorId),
        fase = Value(fase);
  static Insertable<MpDjTempoOperacaoTableData> custom({
    Expression<int>? id,
    Expression<int>? mpDjFormId,
    Expression<int>? formularioDisjuntorId,
    Expression<String>? fase,
    Expression<double>? fechamentoBobina1,
    Expression<double>? fechamentoBobina2,
    Expression<double>? aberturaBobina1,
    Expression<double>? aberturaBobina2,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (mpDjFormId != null) 'mp_dj_form_id': mpDjFormId,
      if (formularioDisjuntorId != null)
        'formulario_disjuntor_id': formularioDisjuntorId,
      if (fase != null) 'fase': fase,
      if (fechamentoBobina1 != null) 'fechamento_bobina1': fechamentoBobina1,
      if (fechamentoBobina2 != null) 'fechamento_bobina2': fechamentoBobina2,
      if (aberturaBobina1 != null) 'abertura_bobina1': aberturaBobina1,
      if (aberturaBobina2 != null) 'abertura_bobina2': aberturaBobina2,
    });
  }

  MpDjTempoOperacaoTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? mpDjFormId,
      Value<int>? formularioDisjuntorId,
      Value<FaseAnomalia>? fase,
      Value<double?>? fechamentoBobina1,
      Value<double?>? fechamentoBobina2,
      Value<double?>? aberturaBobina1,
      Value<double?>? aberturaBobina2}) {
    return MpDjTempoOperacaoTableCompanion(
      id: id ?? this.id,
      mpDjFormId: mpDjFormId ?? this.mpDjFormId,
      formularioDisjuntorId:
          formularioDisjuntorId ?? this.formularioDisjuntorId,
      fase: fase ?? this.fase,
      fechamentoBobina1: fechamentoBobina1 ?? this.fechamentoBobina1,
      fechamentoBobina2: fechamentoBobina2 ?? this.fechamentoBobina2,
      aberturaBobina1: aberturaBobina1 ?? this.aberturaBobina1,
      aberturaBobina2: aberturaBobina2 ?? this.aberturaBobina2,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (mpDjFormId.present) {
      map['mp_dj_form_id'] = Variable<int>(mpDjFormId.value);
    }
    if (formularioDisjuntorId.present) {
      map['formulario_disjuntor_id'] =
          Variable<int>(formularioDisjuntorId.value);
    }
    if (fase.present) {
      map['fase'] = Variable<String>(
          $MpDjTempoOperacaoTableTable.$converterfase.toSql(fase.value));
    }
    if (fechamentoBobina1.present) {
      map['fechamento_bobina1'] = Variable<double>(fechamentoBobina1.value);
    }
    if (fechamentoBobina2.present) {
      map['fechamento_bobina2'] = Variable<double>(fechamentoBobina2.value);
    }
    if (aberturaBobina1.present) {
      map['abertura_bobina1'] = Variable<double>(aberturaBobina1.value);
    }
    if (aberturaBobina2.present) {
      map['abertura_bobina2'] = Variable<double>(aberturaBobina2.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MpDjTempoOperacaoTableCompanion(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('formularioDisjuntorId: $formularioDisjuntorId, ')
          ..write('fase: $fase, ')
          ..write('fechamentoBobina1: $fechamentoBobina1, ')
          ..write('fechamentoBobina2: $fechamentoBobina2, ')
          ..write('aberturaBobina1: $aberturaBobina1, ')
          ..write('aberturaBobina2: $aberturaBobina2')
          ..write(')'))
        .toString();
  }
}

class $MpDjResistenciaContatoTableTable extends MpDjResistenciaContatoTable
    with
        TableInfo<$MpDjResistenciaContatoTableTable,
            MpDjResistenciaContatoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MpDjResistenciaContatoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _mpDjFormIdMeta =
      const VerificationMeta('mpDjFormId');
  @override
  late final GeneratedColumn<int> mpDjFormId = GeneratedColumn<int>(
      'mp_dj_form_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES mp_dj_form_table (id)'));
  static const VerificationMeta _numeroCamaraMeta =
      const VerificationMeta('numeroCamara');
  @override
  late final GeneratedColumn<int> numeroCamara = GeneratedColumn<int>(
      'numero_camara', aliasedName, false,
      type: DriftSqlType.int, requiredDuringInsert: true);
  static const VerificationMeta _resistenciaFaseAMeta =
      const VerificationMeta('resistenciaFaseA');
  @override
  late final GeneratedColumn<double> resistenciaFaseA = GeneratedColumn<double>(
      'resistencia_fase_a', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _resistenciaFaseBMeta =
      const VerificationMeta('resistenciaFaseB');
  @override
  late final GeneratedColumn<double> resistenciaFaseB = GeneratedColumn<double>(
      'resistencia_fase_b', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _resistenciaFaseCMeta =
      const VerificationMeta('resistenciaFaseC');
  @override
  late final GeneratedColumn<double> resistenciaFaseC = GeneratedColumn<double>(
      'resistencia_fase_c', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _temperaturaDisjuntorMeta =
      const VerificationMeta('temperaturaDisjuntor');
  @override
  late final GeneratedColumn<double> temperaturaDisjuntor =
      GeneratedColumn<double>('temperatura_disjuntor', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _umidadeRelativaArMeta =
      const VerificationMeta('umidadeRelativaAr');
  @override
  late final GeneratedColumn<double> umidadeRelativaAr =
      GeneratedColumn<double>('umidade_relativa_ar', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        mpDjFormId,
        numeroCamara,
        resistenciaFaseA,
        resistenciaFaseB,
        resistenciaFaseC,
        temperaturaDisjuntor,
        umidadeRelativaAr
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'mp_dj_resistencia_contato_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<MpDjResistenciaContatoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('mp_dj_form_id')) {
      context.handle(
          _mpDjFormIdMeta,
          mpDjFormId.isAcceptableOrUnknown(
              data['mp_dj_form_id']!, _mpDjFormIdMeta));
    } else if (isInserting) {
      context.missing(_mpDjFormIdMeta);
    }
    if (data.containsKey('numero_camara')) {
      context.handle(
          _numeroCamaraMeta,
          numeroCamara.isAcceptableOrUnknown(
              data['numero_camara']!, _numeroCamaraMeta));
    } else if (isInserting) {
      context.missing(_numeroCamaraMeta);
    }
    if (data.containsKey('resistencia_fase_a')) {
      context.handle(
          _resistenciaFaseAMeta,
          resistenciaFaseA.isAcceptableOrUnknown(
              data['resistencia_fase_a']!, _resistenciaFaseAMeta));
    }
    if (data.containsKey('resistencia_fase_b')) {
      context.handle(
          _resistenciaFaseBMeta,
          resistenciaFaseB.isAcceptableOrUnknown(
              data['resistencia_fase_b']!, _resistenciaFaseBMeta));
    }
    if (data.containsKey('resistencia_fase_c')) {
      context.handle(
          _resistenciaFaseCMeta,
          resistenciaFaseC.isAcceptableOrUnknown(
              data['resistencia_fase_c']!, _resistenciaFaseCMeta));
    }
    if (data.containsKey('temperatura_disjuntor')) {
      context.handle(
          _temperaturaDisjuntorMeta,
          temperaturaDisjuntor.isAcceptableOrUnknown(
              data['temperatura_disjuntor']!, _temperaturaDisjuntorMeta));
    }
    if (data.containsKey('umidade_relativa_ar')) {
      context.handle(
          _umidadeRelativaArMeta,
          umidadeRelativaAr.isAcceptableOrUnknown(
              data['umidade_relativa_ar']!, _umidadeRelativaArMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MpDjResistenciaContatoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MpDjResistenciaContatoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      mpDjFormId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}mp_dj_form_id'])!,
      numeroCamara: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}numero_camara'])!,
      resistenciaFaseA: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_fase_a']),
      resistenciaFaseB: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_fase_b']),
      resistenciaFaseC: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_fase_c']),
      temperaturaDisjuntor: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}temperatura_disjuntor']),
      umidadeRelativaAr: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}umidade_relativa_ar']),
    );
  }

  @override
  $MpDjResistenciaContatoTableTable createAlias(String alias) {
    return $MpDjResistenciaContatoTableTable(attachedDatabase, alias);
  }
}

class MpDjResistenciaContatoTableData extends DataClass
    implements Insertable<MpDjResistenciaContatoTableData> {
  final int id;
  final int mpDjFormId;
  final int numeroCamara;
  final double? resistenciaFaseA;
  final double? resistenciaFaseB;
  final double? resistenciaFaseC;
  final double? temperaturaDisjuntor;
  final double? umidadeRelativaAr;
  const MpDjResistenciaContatoTableData(
      {required this.id,
      required this.mpDjFormId,
      required this.numeroCamara,
      this.resistenciaFaseA,
      this.resistenciaFaseB,
      this.resistenciaFaseC,
      this.temperaturaDisjuntor,
      this.umidadeRelativaAr});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['mp_dj_form_id'] = Variable<int>(mpDjFormId);
    map['numero_camara'] = Variable<int>(numeroCamara);
    if (!nullToAbsent || resistenciaFaseA != null) {
      map['resistencia_fase_a'] = Variable<double>(resistenciaFaseA);
    }
    if (!nullToAbsent || resistenciaFaseB != null) {
      map['resistencia_fase_b'] = Variable<double>(resistenciaFaseB);
    }
    if (!nullToAbsent || resistenciaFaseC != null) {
      map['resistencia_fase_c'] = Variable<double>(resistenciaFaseC);
    }
    if (!nullToAbsent || temperaturaDisjuntor != null) {
      map['temperatura_disjuntor'] = Variable<double>(temperaturaDisjuntor);
    }
    if (!nullToAbsent || umidadeRelativaAr != null) {
      map['umidade_relativa_ar'] = Variable<double>(umidadeRelativaAr);
    }
    return map;
  }

  MpDjResistenciaContatoTableCompanion toCompanion(bool nullToAbsent) {
    return MpDjResistenciaContatoTableCompanion(
      id: Value(id),
      mpDjFormId: Value(mpDjFormId),
      numeroCamara: Value(numeroCamara),
      resistenciaFaseA: resistenciaFaseA == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaFaseA),
      resistenciaFaseB: resistenciaFaseB == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaFaseB),
      resistenciaFaseC: resistenciaFaseC == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaFaseC),
      temperaturaDisjuntor: temperaturaDisjuntor == null && nullToAbsent
          ? const Value.absent()
          : Value(temperaturaDisjuntor),
      umidadeRelativaAr: umidadeRelativaAr == null && nullToAbsent
          ? const Value.absent()
          : Value(umidadeRelativaAr),
    );
  }

  factory MpDjResistenciaContatoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MpDjResistenciaContatoTableData(
      id: serializer.fromJson<int>(json['id']),
      mpDjFormId: serializer.fromJson<int>(json['mpDjFormId']),
      numeroCamara: serializer.fromJson<int>(json['numeroCamara']),
      resistenciaFaseA: serializer.fromJson<double?>(json['resistenciaFaseA']),
      resistenciaFaseB: serializer.fromJson<double?>(json['resistenciaFaseB']),
      resistenciaFaseC: serializer.fromJson<double?>(json['resistenciaFaseC']),
      temperaturaDisjuntor:
          serializer.fromJson<double?>(json['temperaturaDisjuntor']),
      umidadeRelativaAr:
          serializer.fromJson<double?>(json['umidadeRelativaAr']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'mpDjFormId': serializer.toJson<int>(mpDjFormId),
      'numeroCamara': serializer.toJson<int>(numeroCamara),
      'resistenciaFaseA': serializer.toJson<double?>(resistenciaFaseA),
      'resistenciaFaseB': serializer.toJson<double?>(resistenciaFaseB),
      'resistenciaFaseC': serializer.toJson<double?>(resistenciaFaseC),
      'temperaturaDisjuntor': serializer.toJson<double?>(temperaturaDisjuntor),
      'umidadeRelativaAr': serializer.toJson<double?>(umidadeRelativaAr),
    };
  }

  MpDjResistenciaContatoTableData copyWith(
          {int? id,
          int? mpDjFormId,
          int? numeroCamara,
          Value<double?> resistenciaFaseA = const Value.absent(),
          Value<double?> resistenciaFaseB = const Value.absent(),
          Value<double?> resistenciaFaseC = const Value.absent(),
          Value<double?> temperaturaDisjuntor = const Value.absent(),
          Value<double?> umidadeRelativaAr = const Value.absent()}) =>
      MpDjResistenciaContatoTableData(
        id: id ?? this.id,
        mpDjFormId: mpDjFormId ?? this.mpDjFormId,
        numeroCamara: numeroCamara ?? this.numeroCamara,
        resistenciaFaseA: resistenciaFaseA.present
            ? resistenciaFaseA.value
            : this.resistenciaFaseA,
        resistenciaFaseB: resistenciaFaseB.present
            ? resistenciaFaseB.value
            : this.resistenciaFaseB,
        resistenciaFaseC: resistenciaFaseC.present
            ? resistenciaFaseC.value
            : this.resistenciaFaseC,
        temperaturaDisjuntor: temperaturaDisjuntor.present
            ? temperaturaDisjuntor.value
            : this.temperaturaDisjuntor,
        umidadeRelativaAr: umidadeRelativaAr.present
            ? umidadeRelativaAr.value
            : this.umidadeRelativaAr,
      );
  MpDjResistenciaContatoTableData copyWithCompanion(
      MpDjResistenciaContatoTableCompanion data) {
    return MpDjResistenciaContatoTableData(
      id: data.id.present ? data.id.value : this.id,
      mpDjFormId:
          data.mpDjFormId.present ? data.mpDjFormId.value : this.mpDjFormId,
      numeroCamara: data.numeroCamara.present
          ? data.numeroCamara.value
          : this.numeroCamara,
      resistenciaFaseA: data.resistenciaFaseA.present
          ? data.resistenciaFaseA.value
          : this.resistenciaFaseA,
      resistenciaFaseB: data.resistenciaFaseB.present
          ? data.resistenciaFaseB.value
          : this.resistenciaFaseB,
      resistenciaFaseC: data.resistenciaFaseC.present
          ? data.resistenciaFaseC.value
          : this.resistenciaFaseC,
      temperaturaDisjuntor: data.temperaturaDisjuntor.present
          ? data.temperaturaDisjuntor.value
          : this.temperaturaDisjuntor,
      umidadeRelativaAr: data.umidadeRelativaAr.present
          ? data.umidadeRelativaAr.value
          : this.umidadeRelativaAr,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MpDjResistenciaContatoTableData(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('numeroCamara: $numeroCamara, ')
          ..write('resistenciaFaseA: $resistenciaFaseA, ')
          ..write('resistenciaFaseB: $resistenciaFaseB, ')
          ..write('resistenciaFaseC: $resistenciaFaseC, ')
          ..write('temperaturaDisjuntor: $temperaturaDisjuntor, ')
          ..write('umidadeRelativaAr: $umidadeRelativaAr')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      mpDjFormId,
      numeroCamara,
      resistenciaFaseA,
      resistenciaFaseB,
      resistenciaFaseC,
      temperaturaDisjuntor,
      umidadeRelativaAr);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MpDjResistenciaContatoTableData &&
          other.id == this.id &&
          other.mpDjFormId == this.mpDjFormId &&
          other.numeroCamara == this.numeroCamara &&
          other.resistenciaFaseA == this.resistenciaFaseA &&
          other.resistenciaFaseB == this.resistenciaFaseB &&
          other.resistenciaFaseC == this.resistenciaFaseC &&
          other.temperaturaDisjuntor == this.temperaturaDisjuntor &&
          other.umidadeRelativaAr == this.umidadeRelativaAr);
}

class MpDjResistenciaContatoTableCompanion
    extends UpdateCompanion<MpDjResistenciaContatoTableData> {
  final Value<int> id;
  final Value<int> mpDjFormId;
  final Value<int> numeroCamara;
  final Value<double?> resistenciaFaseA;
  final Value<double?> resistenciaFaseB;
  final Value<double?> resistenciaFaseC;
  final Value<double?> temperaturaDisjuntor;
  final Value<double?> umidadeRelativaAr;
  const MpDjResistenciaContatoTableCompanion({
    this.id = const Value.absent(),
    this.mpDjFormId = const Value.absent(),
    this.numeroCamara = const Value.absent(),
    this.resistenciaFaseA = const Value.absent(),
    this.resistenciaFaseB = const Value.absent(),
    this.resistenciaFaseC = const Value.absent(),
    this.temperaturaDisjuntor = const Value.absent(),
    this.umidadeRelativaAr = const Value.absent(),
  });
  MpDjResistenciaContatoTableCompanion.insert({
    this.id = const Value.absent(),
    required int mpDjFormId,
    required int numeroCamara,
    this.resistenciaFaseA = const Value.absent(),
    this.resistenciaFaseB = const Value.absent(),
    this.resistenciaFaseC = const Value.absent(),
    this.temperaturaDisjuntor = const Value.absent(),
    this.umidadeRelativaAr = const Value.absent(),
  })  : mpDjFormId = Value(mpDjFormId),
        numeroCamara = Value(numeroCamara);
  static Insertable<MpDjResistenciaContatoTableData> custom({
    Expression<int>? id,
    Expression<int>? mpDjFormId,
    Expression<int>? numeroCamara,
    Expression<double>? resistenciaFaseA,
    Expression<double>? resistenciaFaseB,
    Expression<double>? resistenciaFaseC,
    Expression<double>? temperaturaDisjuntor,
    Expression<double>? umidadeRelativaAr,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (mpDjFormId != null) 'mp_dj_form_id': mpDjFormId,
      if (numeroCamara != null) 'numero_camara': numeroCamara,
      if (resistenciaFaseA != null) 'resistencia_fase_a': resistenciaFaseA,
      if (resistenciaFaseB != null) 'resistencia_fase_b': resistenciaFaseB,
      if (resistenciaFaseC != null) 'resistencia_fase_c': resistenciaFaseC,
      if (temperaturaDisjuntor != null)
        'temperatura_disjuntor': temperaturaDisjuntor,
      if (umidadeRelativaAr != null) 'umidade_relativa_ar': umidadeRelativaAr,
    });
  }

  MpDjResistenciaContatoTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? mpDjFormId,
      Value<int>? numeroCamara,
      Value<double?>? resistenciaFaseA,
      Value<double?>? resistenciaFaseB,
      Value<double?>? resistenciaFaseC,
      Value<double?>? temperaturaDisjuntor,
      Value<double?>? umidadeRelativaAr}) {
    return MpDjResistenciaContatoTableCompanion(
      id: id ?? this.id,
      mpDjFormId: mpDjFormId ?? this.mpDjFormId,
      numeroCamara: numeroCamara ?? this.numeroCamara,
      resistenciaFaseA: resistenciaFaseA ?? this.resistenciaFaseA,
      resistenciaFaseB: resistenciaFaseB ?? this.resistenciaFaseB,
      resistenciaFaseC: resistenciaFaseC ?? this.resistenciaFaseC,
      temperaturaDisjuntor: temperaturaDisjuntor ?? this.temperaturaDisjuntor,
      umidadeRelativaAr: umidadeRelativaAr ?? this.umidadeRelativaAr,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (mpDjFormId.present) {
      map['mp_dj_form_id'] = Variable<int>(mpDjFormId.value);
    }
    if (numeroCamara.present) {
      map['numero_camara'] = Variable<int>(numeroCamara.value);
    }
    if (resistenciaFaseA.present) {
      map['resistencia_fase_a'] = Variable<double>(resistenciaFaseA.value);
    }
    if (resistenciaFaseB.present) {
      map['resistencia_fase_b'] = Variable<double>(resistenciaFaseB.value);
    }
    if (resistenciaFaseC.present) {
      map['resistencia_fase_c'] = Variable<double>(resistenciaFaseC.value);
    }
    if (temperaturaDisjuntor.present) {
      map['temperatura_disjuntor'] =
          Variable<double>(temperaturaDisjuntor.value);
    }
    if (umidadeRelativaAr.present) {
      map['umidade_relativa_ar'] = Variable<double>(umidadeRelativaAr.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MpDjResistenciaContatoTableCompanion(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('numeroCamara: $numeroCamara, ')
          ..write('resistenciaFaseA: $resistenciaFaseA, ')
          ..write('resistenciaFaseB: $resistenciaFaseB, ')
          ..write('resistenciaFaseC: $resistenciaFaseC, ')
          ..write('temperaturaDisjuntor: $temperaturaDisjuntor, ')
          ..write('umidadeRelativaAr: $umidadeRelativaAr')
          ..write(')'))
        .toString();
  }
}

class $MpDjResistenciaIsolamentoTableTable
    extends MpDjResistenciaIsolamentoTable
    with
        TableInfo<$MpDjResistenciaIsolamentoTableTable,
            MpDjResistenciaIsolamentoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MpDjResistenciaIsolamentoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _mpDjFormIdMeta =
      const VerificationMeta('mpDjFormId');
  @override
  late final GeneratedColumn<int> mpDjFormId = GeneratedColumn<int>(
      'mp_dj_form_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES mp_dj_form_table (id)'));
  static const VerificationMeta _numeroCamaraMeta =
      const VerificationMeta('numeroCamara');
  @override
  late final GeneratedColumn<int> numeroCamara = GeneratedColumn<int>(
      'numero_camara', aliasedName, false,
      type: DriftSqlType.int, requiredDuringInsert: true);
  static const VerificationMeta _linhaMeta = const VerificationMeta('linha');
  @override
  late final GeneratedColumnWithTypeConverter<PosicaoDisjuntorEnsaio, String>
      linha = GeneratedColumn<String>('linha', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<PosicaoDisjuntorEnsaio>(
              $MpDjResistenciaIsolamentoTableTable.$converterlinha);
  static const VerificationMeta _terraMeta = const VerificationMeta('terra');
  @override
  late final GeneratedColumnWithTypeConverter<PosicaoDisjuntorEnsaio, String>
      terra = GeneratedColumn<String>('terra', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<PosicaoDisjuntorEnsaio>(
              $MpDjResistenciaIsolamentoTableTable.$converterterra);
  static const VerificationMeta _guardaMeta = const VerificationMeta('guarda');
  @override
  late final GeneratedColumnWithTypeConverter<PosicaoDisjuntorEnsaio, String>
      guarda = GeneratedColumn<String>('guarda', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<PosicaoDisjuntorEnsaio>(
              $MpDjResistenciaIsolamentoTableTable.$converterguarda);
  static const VerificationMeta _tensaoKvMeta =
      const VerificationMeta('tensaoKv');
  @override
  late final GeneratedColumn<double> tensaoKv = GeneratedColumn<double>(
      'tensao_kv', aliasedName, false,
      type: DriftSqlType.double, requiredDuringInsert: true);
  static const VerificationMeta _resistenciaFaseAMeta =
      const VerificationMeta('resistenciaFaseA');
  @override
  late final GeneratedColumn<double> resistenciaFaseA = GeneratedColumn<double>(
      'resistencia_fase_a', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _resistenciaFaseBMeta =
      const VerificationMeta('resistenciaFaseB');
  @override
  late final GeneratedColumn<double> resistenciaFaseB = GeneratedColumn<double>(
      'resistencia_fase_b', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _resistenciaFaseCMeta =
      const VerificationMeta('resistenciaFaseC');
  @override
  late final GeneratedColumn<double> resistenciaFaseC = GeneratedColumn<double>(
      'resistencia_fase_c', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _temperaturaDisjuntorMeta =
      const VerificationMeta('temperaturaDisjuntor');
  @override
  late final GeneratedColumn<double> temperaturaDisjuntor =
      GeneratedColumn<double>('temperatura_disjuntor', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  static const VerificationMeta _umidadeRelativaArMeta =
      const VerificationMeta('umidadeRelativaAr');
  @override
  late final GeneratedColumn<double> umidadeRelativaAr =
      GeneratedColumn<double>('umidade_relativa_ar', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        mpDjFormId,
        numeroCamara,
        linha,
        terra,
        guarda,
        tensaoKv,
        resistenciaFaseA,
        resistenciaFaseB,
        resistenciaFaseC,
        temperaturaDisjuntor,
        umidadeRelativaAr
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'mp_dj_resistencia_isolamento_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<MpDjResistenciaIsolamentoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('mp_dj_form_id')) {
      context.handle(
          _mpDjFormIdMeta,
          mpDjFormId.isAcceptableOrUnknown(
              data['mp_dj_form_id']!, _mpDjFormIdMeta));
    } else if (isInserting) {
      context.missing(_mpDjFormIdMeta);
    }
    if (data.containsKey('numero_camara')) {
      context.handle(
          _numeroCamaraMeta,
          numeroCamara.isAcceptableOrUnknown(
              data['numero_camara']!, _numeroCamaraMeta));
    } else if (isInserting) {
      context.missing(_numeroCamaraMeta);
    }
    context.handle(_linhaMeta, const VerificationResult.success());
    context.handle(_terraMeta, const VerificationResult.success());
    context.handle(_guardaMeta, const VerificationResult.success());
    if (data.containsKey('tensao_kv')) {
      context.handle(_tensaoKvMeta,
          tensaoKv.isAcceptableOrUnknown(data['tensao_kv']!, _tensaoKvMeta));
    } else if (isInserting) {
      context.missing(_tensaoKvMeta);
    }
    if (data.containsKey('resistencia_fase_a')) {
      context.handle(
          _resistenciaFaseAMeta,
          resistenciaFaseA.isAcceptableOrUnknown(
              data['resistencia_fase_a']!, _resistenciaFaseAMeta));
    }
    if (data.containsKey('resistencia_fase_b')) {
      context.handle(
          _resistenciaFaseBMeta,
          resistenciaFaseB.isAcceptableOrUnknown(
              data['resistencia_fase_b']!, _resistenciaFaseBMeta));
    }
    if (data.containsKey('resistencia_fase_c')) {
      context.handle(
          _resistenciaFaseCMeta,
          resistenciaFaseC.isAcceptableOrUnknown(
              data['resistencia_fase_c']!, _resistenciaFaseCMeta));
    }
    if (data.containsKey('temperatura_disjuntor')) {
      context.handle(
          _temperaturaDisjuntorMeta,
          temperaturaDisjuntor.isAcceptableOrUnknown(
              data['temperatura_disjuntor']!, _temperaturaDisjuntorMeta));
    }
    if (data.containsKey('umidade_relativa_ar')) {
      context.handle(
          _umidadeRelativaArMeta,
          umidadeRelativaAr.isAcceptableOrUnknown(
              data['umidade_relativa_ar']!, _umidadeRelativaArMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MpDjResistenciaIsolamentoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MpDjResistenciaIsolamentoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      mpDjFormId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}mp_dj_form_id'])!,
      numeroCamara: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}numero_camara'])!,
      linha: $MpDjResistenciaIsolamentoTableTable.$converterlinha.fromSql(
          attachedDatabase.typeMapping
              .read(DriftSqlType.string, data['${effectivePrefix}linha'])!),
      terra: $MpDjResistenciaIsolamentoTableTable.$converterterra.fromSql(
          attachedDatabase.typeMapping
              .read(DriftSqlType.string, data['${effectivePrefix}terra'])!),
      guarda: $MpDjResistenciaIsolamentoTableTable.$converterguarda.fromSql(
          attachedDatabase.typeMapping
              .read(DriftSqlType.string, data['${effectivePrefix}guarda'])!),
      tensaoKv: attachedDatabase.typeMapping
          .read(DriftSqlType.double, data['${effectivePrefix}tensao_kv'])!,
      resistenciaFaseA: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_fase_a']),
      resistenciaFaseB: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_fase_b']),
      resistenciaFaseC: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}resistencia_fase_c']),
      temperaturaDisjuntor: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}temperatura_disjuntor']),
      umidadeRelativaAr: attachedDatabase.typeMapping.read(
          DriftSqlType.double, data['${effectivePrefix}umidade_relativa_ar']),
    );
  }

  @override
  $MpDjResistenciaIsolamentoTableTable createAlias(String alias) {
    return $MpDjResistenciaIsolamentoTableTable(attachedDatabase, alias);
  }

  static TypeConverter<PosicaoDisjuntorEnsaio, String> $converterlinha =
      const PosicaoDisjuntorEnsaioConverter();
  static TypeConverter<PosicaoDisjuntorEnsaio, String> $converterterra =
      const PosicaoDisjuntorEnsaioConverter();
  static TypeConverter<PosicaoDisjuntorEnsaio, String> $converterguarda =
      const PosicaoDisjuntorEnsaioConverter();
}

class MpDjResistenciaIsolamentoTableData extends DataClass
    implements Insertable<MpDjResistenciaIsolamentoTableData> {
  final int id;
  final int mpDjFormId;
  final int numeroCamara;
  final PosicaoDisjuntorEnsaio linha;
  final PosicaoDisjuntorEnsaio terra;
  final PosicaoDisjuntorEnsaio guarda;
  final double tensaoKv;
  final double? resistenciaFaseA;
  final double? resistenciaFaseB;
  final double? resistenciaFaseC;
  final double? temperaturaDisjuntor;
  final double? umidadeRelativaAr;
  const MpDjResistenciaIsolamentoTableData(
      {required this.id,
      required this.mpDjFormId,
      required this.numeroCamara,
      required this.linha,
      required this.terra,
      required this.guarda,
      required this.tensaoKv,
      this.resistenciaFaseA,
      this.resistenciaFaseB,
      this.resistenciaFaseC,
      this.temperaturaDisjuntor,
      this.umidadeRelativaAr});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['mp_dj_form_id'] = Variable<int>(mpDjFormId);
    map['numero_camara'] = Variable<int>(numeroCamara);
    {
      map['linha'] = Variable<String>(
          $MpDjResistenciaIsolamentoTableTable.$converterlinha.toSql(linha));
    }
    {
      map['terra'] = Variable<String>(
          $MpDjResistenciaIsolamentoTableTable.$converterterra.toSql(terra));
    }
    {
      map['guarda'] = Variable<String>(
          $MpDjResistenciaIsolamentoTableTable.$converterguarda.toSql(guarda));
    }
    map['tensao_kv'] = Variable<double>(tensaoKv);
    if (!nullToAbsent || resistenciaFaseA != null) {
      map['resistencia_fase_a'] = Variable<double>(resistenciaFaseA);
    }
    if (!nullToAbsent || resistenciaFaseB != null) {
      map['resistencia_fase_b'] = Variable<double>(resistenciaFaseB);
    }
    if (!nullToAbsent || resistenciaFaseC != null) {
      map['resistencia_fase_c'] = Variable<double>(resistenciaFaseC);
    }
    if (!nullToAbsent || temperaturaDisjuntor != null) {
      map['temperatura_disjuntor'] = Variable<double>(temperaturaDisjuntor);
    }
    if (!nullToAbsent || umidadeRelativaAr != null) {
      map['umidade_relativa_ar'] = Variable<double>(umidadeRelativaAr);
    }
    return map;
  }

  MpDjResistenciaIsolamentoTableCompanion toCompanion(bool nullToAbsent) {
    return MpDjResistenciaIsolamentoTableCompanion(
      id: Value(id),
      mpDjFormId: Value(mpDjFormId),
      numeroCamara: Value(numeroCamara),
      linha: Value(linha),
      terra: Value(terra),
      guarda: Value(guarda),
      tensaoKv: Value(tensaoKv),
      resistenciaFaseA: resistenciaFaseA == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaFaseA),
      resistenciaFaseB: resistenciaFaseB == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaFaseB),
      resistenciaFaseC: resistenciaFaseC == null && nullToAbsent
          ? const Value.absent()
          : Value(resistenciaFaseC),
      temperaturaDisjuntor: temperaturaDisjuntor == null && nullToAbsent
          ? const Value.absent()
          : Value(temperaturaDisjuntor),
      umidadeRelativaAr: umidadeRelativaAr == null && nullToAbsent
          ? const Value.absent()
          : Value(umidadeRelativaAr),
    );
  }

  factory MpDjResistenciaIsolamentoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MpDjResistenciaIsolamentoTableData(
      id: serializer.fromJson<int>(json['id']),
      mpDjFormId: serializer.fromJson<int>(json['mpDjFormId']),
      numeroCamara: serializer.fromJson<int>(json['numeroCamara']),
      linha: serializer.fromJson<PosicaoDisjuntorEnsaio>(json['linha']),
      terra: serializer.fromJson<PosicaoDisjuntorEnsaio>(json['terra']),
      guarda: serializer.fromJson<PosicaoDisjuntorEnsaio>(json['guarda']),
      tensaoKv: serializer.fromJson<double>(json['tensaoKv']),
      resistenciaFaseA: serializer.fromJson<double?>(json['resistenciaFaseA']),
      resistenciaFaseB: serializer.fromJson<double?>(json['resistenciaFaseB']),
      resistenciaFaseC: serializer.fromJson<double?>(json['resistenciaFaseC']),
      temperaturaDisjuntor:
          serializer.fromJson<double?>(json['temperaturaDisjuntor']),
      umidadeRelativaAr:
          serializer.fromJson<double?>(json['umidadeRelativaAr']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'mpDjFormId': serializer.toJson<int>(mpDjFormId),
      'numeroCamara': serializer.toJson<int>(numeroCamara),
      'linha': serializer.toJson<PosicaoDisjuntorEnsaio>(linha),
      'terra': serializer.toJson<PosicaoDisjuntorEnsaio>(terra),
      'guarda': serializer.toJson<PosicaoDisjuntorEnsaio>(guarda),
      'tensaoKv': serializer.toJson<double>(tensaoKv),
      'resistenciaFaseA': serializer.toJson<double?>(resistenciaFaseA),
      'resistenciaFaseB': serializer.toJson<double?>(resistenciaFaseB),
      'resistenciaFaseC': serializer.toJson<double?>(resistenciaFaseC),
      'temperaturaDisjuntor': serializer.toJson<double?>(temperaturaDisjuntor),
      'umidadeRelativaAr': serializer.toJson<double?>(umidadeRelativaAr),
    };
  }

  MpDjResistenciaIsolamentoTableData copyWith(
          {int? id,
          int? mpDjFormId,
          int? numeroCamara,
          PosicaoDisjuntorEnsaio? linha,
          PosicaoDisjuntorEnsaio? terra,
          PosicaoDisjuntorEnsaio? guarda,
          double? tensaoKv,
          Value<double?> resistenciaFaseA = const Value.absent(),
          Value<double?> resistenciaFaseB = const Value.absent(),
          Value<double?> resistenciaFaseC = const Value.absent(),
          Value<double?> temperaturaDisjuntor = const Value.absent(),
          Value<double?> umidadeRelativaAr = const Value.absent()}) =>
      MpDjResistenciaIsolamentoTableData(
        id: id ?? this.id,
        mpDjFormId: mpDjFormId ?? this.mpDjFormId,
        numeroCamara: numeroCamara ?? this.numeroCamara,
        linha: linha ?? this.linha,
        terra: terra ?? this.terra,
        guarda: guarda ?? this.guarda,
        tensaoKv: tensaoKv ?? this.tensaoKv,
        resistenciaFaseA: resistenciaFaseA.present
            ? resistenciaFaseA.value
            : this.resistenciaFaseA,
        resistenciaFaseB: resistenciaFaseB.present
            ? resistenciaFaseB.value
            : this.resistenciaFaseB,
        resistenciaFaseC: resistenciaFaseC.present
            ? resistenciaFaseC.value
            : this.resistenciaFaseC,
        temperaturaDisjuntor: temperaturaDisjuntor.present
            ? temperaturaDisjuntor.value
            : this.temperaturaDisjuntor,
        umidadeRelativaAr: umidadeRelativaAr.present
            ? umidadeRelativaAr.value
            : this.umidadeRelativaAr,
      );
  MpDjResistenciaIsolamentoTableData copyWithCompanion(
      MpDjResistenciaIsolamentoTableCompanion data) {
    return MpDjResistenciaIsolamentoTableData(
      id: data.id.present ? data.id.value : this.id,
      mpDjFormId:
          data.mpDjFormId.present ? data.mpDjFormId.value : this.mpDjFormId,
      numeroCamara: data.numeroCamara.present
          ? data.numeroCamara.value
          : this.numeroCamara,
      linha: data.linha.present ? data.linha.value : this.linha,
      terra: data.terra.present ? data.terra.value : this.terra,
      guarda: data.guarda.present ? data.guarda.value : this.guarda,
      tensaoKv: data.tensaoKv.present ? data.tensaoKv.value : this.tensaoKv,
      resistenciaFaseA: data.resistenciaFaseA.present
          ? data.resistenciaFaseA.value
          : this.resistenciaFaseA,
      resistenciaFaseB: data.resistenciaFaseB.present
          ? data.resistenciaFaseB.value
          : this.resistenciaFaseB,
      resistenciaFaseC: data.resistenciaFaseC.present
          ? data.resistenciaFaseC.value
          : this.resistenciaFaseC,
      temperaturaDisjuntor: data.temperaturaDisjuntor.present
          ? data.temperaturaDisjuntor.value
          : this.temperaturaDisjuntor,
      umidadeRelativaAr: data.umidadeRelativaAr.present
          ? data.umidadeRelativaAr.value
          : this.umidadeRelativaAr,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MpDjResistenciaIsolamentoTableData(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('numeroCamara: $numeroCamara, ')
          ..write('linha: $linha, ')
          ..write('terra: $terra, ')
          ..write('guarda: $guarda, ')
          ..write('tensaoKv: $tensaoKv, ')
          ..write('resistenciaFaseA: $resistenciaFaseA, ')
          ..write('resistenciaFaseB: $resistenciaFaseB, ')
          ..write('resistenciaFaseC: $resistenciaFaseC, ')
          ..write('temperaturaDisjuntor: $temperaturaDisjuntor, ')
          ..write('umidadeRelativaAr: $umidadeRelativaAr')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      mpDjFormId,
      numeroCamara,
      linha,
      terra,
      guarda,
      tensaoKv,
      resistenciaFaseA,
      resistenciaFaseB,
      resistenciaFaseC,
      temperaturaDisjuntor,
      umidadeRelativaAr);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MpDjResistenciaIsolamentoTableData &&
          other.id == this.id &&
          other.mpDjFormId == this.mpDjFormId &&
          other.numeroCamara == this.numeroCamara &&
          other.linha == this.linha &&
          other.terra == this.terra &&
          other.guarda == this.guarda &&
          other.tensaoKv == this.tensaoKv &&
          other.resistenciaFaseA == this.resistenciaFaseA &&
          other.resistenciaFaseB == this.resistenciaFaseB &&
          other.resistenciaFaseC == this.resistenciaFaseC &&
          other.temperaturaDisjuntor == this.temperaturaDisjuntor &&
          other.umidadeRelativaAr == this.umidadeRelativaAr);
}

class MpDjResistenciaIsolamentoTableCompanion
    extends UpdateCompanion<MpDjResistenciaIsolamentoTableData> {
  final Value<int> id;
  final Value<int> mpDjFormId;
  final Value<int> numeroCamara;
  final Value<PosicaoDisjuntorEnsaio> linha;
  final Value<PosicaoDisjuntorEnsaio> terra;
  final Value<PosicaoDisjuntorEnsaio> guarda;
  final Value<double> tensaoKv;
  final Value<double?> resistenciaFaseA;
  final Value<double?> resistenciaFaseB;
  final Value<double?> resistenciaFaseC;
  final Value<double?> temperaturaDisjuntor;
  final Value<double?> umidadeRelativaAr;
  const MpDjResistenciaIsolamentoTableCompanion({
    this.id = const Value.absent(),
    this.mpDjFormId = const Value.absent(),
    this.numeroCamara = const Value.absent(),
    this.linha = const Value.absent(),
    this.terra = const Value.absent(),
    this.guarda = const Value.absent(),
    this.tensaoKv = const Value.absent(),
    this.resistenciaFaseA = const Value.absent(),
    this.resistenciaFaseB = const Value.absent(),
    this.resistenciaFaseC = const Value.absent(),
    this.temperaturaDisjuntor = const Value.absent(),
    this.umidadeRelativaAr = const Value.absent(),
  });
  MpDjResistenciaIsolamentoTableCompanion.insert({
    this.id = const Value.absent(),
    required int mpDjFormId,
    required int numeroCamara,
    required PosicaoDisjuntorEnsaio linha,
    required PosicaoDisjuntorEnsaio terra,
    required PosicaoDisjuntorEnsaio guarda,
    required double tensaoKv,
    this.resistenciaFaseA = const Value.absent(),
    this.resistenciaFaseB = const Value.absent(),
    this.resistenciaFaseC = const Value.absent(),
    this.temperaturaDisjuntor = const Value.absent(),
    this.umidadeRelativaAr = const Value.absent(),
  })  : mpDjFormId = Value(mpDjFormId),
        numeroCamara = Value(numeroCamara),
        linha = Value(linha),
        terra = Value(terra),
        guarda = Value(guarda),
        tensaoKv = Value(tensaoKv);
  static Insertable<MpDjResistenciaIsolamentoTableData> custom({
    Expression<int>? id,
    Expression<int>? mpDjFormId,
    Expression<int>? numeroCamara,
    Expression<String>? linha,
    Expression<String>? terra,
    Expression<String>? guarda,
    Expression<double>? tensaoKv,
    Expression<double>? resistenciaFaseA,
    Expression<double>? resistenciaFaseB,
    Expression<double>? resistenciaFaseC,
    Expression<double>? temperaturaDisjuntor,
    Expression<double>? umidadeRelativaAr,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (mpDjFormId != null) 'mp_dj_form_id': mpDjFormId,
      if (numeroCamara != null) 'numero_camara': numeroCamara,
      if (linha != null) 'linha': linha,
      if (terra != null) 'terra': terra,
      if (guarda != null) 'guarda': guarda,
      if (tensaoKv != null) 'tensao_kv': tensaoKv,
      if (resistenciaFaseA != null) 'resistencia_fase_a': resistenciaFaseA,
      if (resistenciaFaseB != null) 'resistencia_fase_b': resistenciaFaseB,
      if (resistenciaFaseC != null) 'resistencia_fase_c': resistenciaFaseC,
      if (temperaturaDisjuntor != null)
        'temperatura_disjuntor': temperaturaDisjuntor,
      if (umidadeRelativaAr != null) 'umidade_relativa_ar': umidadeRelativaAr,
    });
  }

  MpDjResistenciaIsolamentoTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? mpDjFormId,
      Value<int>? numeroCamara,
      Value<PosicaoDisjuntorEnsaio>? linha,
      Value<PosicaoDisjuntorEnsaio>? terra,
      Value<PosicaoDisjuntorEnsaio>? guarda,
      Value<double>? tensaoKv,
      Value<double?>? resistenciaFaseA,
      Value<double?>? resistenciaFaseB,
      Value<double?>? resistenciaFaseC,
      Value<double?>? temperaturaDisjuntor,
      Value<double?>? umidadeRelativaAr}) {
    return MpDjResistenciaIsolamentoTableCompanion(
      id: id ?? this.id,
      mpDjFormId: mpDjFormId ?? this.mpDjFormId,
      numeroCamara: numeroCamara ?? this.numeroCamara,
      linha: linha ?? this.linha,
      terra: terra ?? this.terra,
      guarda: guarda ?? this.guarda,
      tensaoKv: tensaoKv ?? this.tensaoKv,
      resistenciaFaseA: resistenciaFaseA ?? this.resistenciaFaseA,
      resistenciaFaseB: resistenciaFaseB ?? this.resistenciaFaseB,
      resistenciaFaseC: resistenciaFaseC ?? this.resistenciaFaseC,
      temperaturaDisjuntor: temperaturaDisjuntor ?? this.temperaturaDisjuntor,
      umidadeRelativaAr: umidadeRelativaAr ?? this.umidadeRelativaAr,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (mpDjFormId.present) {
      map['mp_dj_form_id'] = Variable<int>(mpDjFormId.value);
    }
    if (numeroCamara.present) {
      map['numero_camara'] = Variable<int>(numeroCamara.value);
    }
    if (linha.present) {
      map['linha'] = Variable<String>($MpDjResistenciaIsolamentoTableTable
          .$converterlinha
          .toSql(linha.value));
    }
    if (terra.present) {
      map['terra'] = Variable<String>($MpDjResistenciaIsolamentoTableTable
          .$converterterra
          .toSql(terra.value));
    }
    if (guarda.present) {
      map['guarda'] = Variable<String>($MpDjResistenciaIsolamentoTableTable
          .$converterguarda
          .toSql(guarda.value));
    }
    if (tensaoKv.present) {
      map['tensao_kv'] = Variable<double>(tensaoKv.value);
    }
    if (resistenciaFaseA.present) {
      map['resistencia_fase_a'] = Variable<double>(resistenciaFaseA.value);
    }
    if (resistenciaFaseB.present) {
      map['resistencia_fase_b'] = Variable<double>(resistenciaFaseB.value);
    }
    if (resistenciaFaseC.present) {
      map['resistencia_fase_c'] = Variable<double>(resistenciaFaseC.value);
    }
    if (temperaturaDisjuntor.present) {
      map['temperatura_disjuntor'] =
          Variable<double>(temperaturaDisjuntor.value);
    }
    if (umidadeRelativaAr.present) {
      map['umidade_relativa_ar'] = Variable<double>(umidadeRelativaAr.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MpDjResistenciaIsolamentoTableCompanion(')
          ..write('id: $id, ')
          ..write('mpDjFormId: $mpDjFormId, ')
          ..write('numeroCamara: $numeroCamara, ')
          ..write('linha: $linha, ')
          ..write('terra: $terra, ')
          ..write('guarda: $guarda, ')
          ..write('tensaoKv: $tensaoKv, ')
          ..write('resistenciaFaseA: $resistenciaFaseA, ')
          ..write('resistenciaFaseB: $resistenciaFaseB, ')
          ..write('resistenciaFaseC: $resistenciaFaseC, ')
          ..write('temperaturaDisjuntor: $temperaturaDisjuntor, ')
          ..write('umidadeRelativaAr: $umidadeRelativaAr')
          ..write(')'))
        .toString();
  }
}

class $TecnicoTableTable extends TecnicoTable
    with TableInfo<$TecnicoTableTable, TecnicoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TecnicoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _matriculaMeta =
      const VerificationMeta('matricula');
  @override
  late final GeneratedColumn<String> matricula = GeneratedColumn<String>(
      'matricula', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 2, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, nome, matricula];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'tecnico_table';
  @override
  VerificationContext validateIntegrity(Insertable<TecnicoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('matricula')) {
      context.handle(_matriculaMeta,
          matricula.isAcceptableOrUnknown(data['matricula']!, _matriculaMeta));
    } else if (isInserting) {
      context.missing(_matriculaMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TecnicoTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return TecnicoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      matricula: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}matricula'])!,
    );
  }

  @override
  $TecnicoTableTable createAlias(String alias) {
    return $TecnicoTableTable(attachedDatabase, alias);
  }
}

class TecnicoTableData extends DataClass
    implements Insertable<TecnicoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final String matricula;
  const TecnicoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      required this.matricula});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    map['matricula'] = Variable<String>(matricula);
    return map;
  }

  TecnicoTableCompanion toCompanion(bool nullToAbsent) {
    return TecnicoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      matricula: Value(matricula),
    );
  }

  factory TecnicoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TecnicoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      matricula: serializer.fromJson<String>(json['matricula']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'matricula': serializer.toJson<String>(matricula),
    };
  }

  TecnicoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          String? matricula}) =>
      TecnicoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        matricula: matricula ?? this.matricula,
      );
  TecnicoTableData copyWithCompanion(TecnicoTableCompanion data) {
    return TecnicoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      matricula: data.matricula.present ? data.matricula.value : this.matricula,
    );
  }

  @override
  String toString() {
    return (StringBuffer('TecnicoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('matricula: $matricula')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, nome, matricula);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TecnicoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.matricula == this.matricula);
}

class TecnicoTableCompanion extends UpdateCompanion<TecnicoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<String> matricula;
  const TecnicoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.matricula = const Value.absent(),
  });
  TecnicoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    required String matricula,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome),
        matricula = Value(matricula);
  static Insertable<TecnicoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? matricula,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (matricula != null) 'matricula': matricula,
    });
  }

  TecnicoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<String>? matricula}) {
    return TecnicoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      matricula: matricula ?? this.matricula,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (matricula.present) {
      map['matricula'] = Variable<String>(matricula.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TecnicoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('matricula: $matricula')
          ..write(')'))
        .toString();
  }
}

class $AprTableTable extends AprTable
    with TableInfo<$AprTableTable, AprTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'nome', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _descricaoMeta =
      const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'descricao', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, nome, descricao];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_table';
  @override
  VerificationContext validateIntegrity(Insertable<AprTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta));
    } else if (isInserting) {
      context.missing(_nomeMeta);
    }
    if (data.containsKey('descricao')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      nome: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}nome'])!,
      descricao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}descricao']),
    );
  }

  @override
  $AprTableTable createAlias(String alias) {
    return $AprTableTable(attachedDatabase, alias);
  }
}

class AprTableData extends DataClass implements Insertable<AprTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String nome;
  final String? descricao;
  const AprTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.nome,
      this.descricao});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['nome'] = Variable<String>(nome);
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    return map;
  }

  AprTableCompanion toCompanion(bool nullToAbsent) {
    return AprTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      nome: Value(nome),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory AprTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      nome: serializer.fromJson<String>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'nome': serializer.toJson<String>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  AprTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? nome,
          Value<String?> descricao = const Value.absent()}) =>
      AprTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        nome: nome ?? this.nome,
        descricao: descricao.present ? descricao.value : this.descricao,
      );
  AprTableData copyWithCompanion(AprTableCompanion data) {
    return AprTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class AprTableCompanion extends UpdateCompanion<AprTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> nome;
  final Value<String?> descricao;
  const AprTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  AprTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String nome,
    this.descricao = const Value.absent(),
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        nome = Value(nome);
  static Insertable<AprTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
    });
  }

  AprTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? nome,
      Value<String?>? descricao}) {
    return AprTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $AprQuestionTableTable extends AprQuestionTable
    with TableInfo<$AprQuestionTableTable, AprQuestionTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprQuestionTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _textoMeta = const VerificationMeta('texto');
  @override
  late final GeneratedColumn<String> texto = GeneratedColumn<String>(
      'texto', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, texto];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_question_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<AprQuestionTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('texto')) {
      context.handle(
          _textoMeta, texto.isAcceptableOrUnknown(data['texto']!, _textoMeta));
    } else if (isInserting) {
      context.missing(_textoMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprQuestionTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprQuestionTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      texto: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}texto'])!,
    );
  }

  @override
  $AprQuestionTableTable createAlias(String alias) {
    return $AprQuestionTableTable(attachedDatabase, alias);
  }
}

class AprQuestionTableData extends DataClass
    implements Insertable<AprQuestionTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String texto;
  const AprQuestionTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.texto});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['texto'] = Variable<String>(texto);
    return map;
  }

  AprQuestionTableCompanion toCompanion(bool nullToAbsent) {
    return AprQuestionTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      texto: Value(texto),
    );
  }

  factory AprQuestionTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprQuestionTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      texto: serializer.fromJson<String>(json['texto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'texto': serializer.toJson<String>(texto),
    };
  }

  AprQuestionTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? texto}) =>
      AprQuestionTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        texto: texto ?? this.texto,
      );
  AprQuestionTableData copyWithCompanion(AprQuestionTableCompanion data) {
    return AprQuestionTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      texto: data.texto.present ? data.texto.value : this.texto,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprQuestionTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('texto: $texto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, uuid, createdAt, updatedAt, sincronizado, texto);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprQuestionTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.texto == this.texto);
}

class AprQuestionTableCompanion extends UpdateCompanion<AprQuestionTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> texto;
  const AprQuestionTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.texto = const Value.absent(),
  });
  AprQuestionTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String texto,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        texto = Value(texto);
  static Insertable<AprQuestionTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? texto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (texto != null) 'texto': texto,
    });
  }

  AprQuestionTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? texto}) {
    return AprQuestionTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      texto: texto ?? this.texto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (texto.present) {
      map['texto'] = Variable<String>(texto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprQuestionTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('texto: $texto')
          ..write(')'))
        .toString();
  }
}

class $AprPerguntaRelacionamentoTableTable
    extends AprPerguntaRelacionamentoTable
    with
        TableInfo<$AprPerguntaRelacionamentoTableTable,
            AprPerguntaRelacionamentoTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprPerguntaRelacionamentoTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _aprIdMeta = const VerificationMeta('aprId');
  @override
  late final GeneratedColumn<String> aprId = GeneratedColumn<String>(
      'apr_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('REFERENCES apr_table (uuid)'));
  static const VerificationMeta _perguntaIdMeta =
      const VerificationMeta('perguntaId');
  @override
  late final GeneratedColumn<String> perguntaId = GeneratedColumn<String>(
      'pergunta_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES apr_question_table (uuid)'));
  static const VerificationMeta _ordemMeta = const VerificationMeta('ordem');
  @override
  late final GeneratedColumn<int> ordem = GeneratedColumn<int>(
      'ordem', aliasedName, false,
      type: DriftSqlType.int, requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, aprId, perguntaId, ordem];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_pergunta_relacionamento_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<AprPerguntaRelacionamentoTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('apr_id')) {
      context.handle(
          _aprIdMeta, aprId.isAcceptableOrUnknown(data['apr_id']!, _aprIdMeta));
    } else if (isInserting) {
      context.missing(_aprIdMeta);
    }
    if (data.containsKey('pergunta_id')) {
      context.handle(
          _perguntaIdMeta,
          perguntaId.isAcceptableOrUnknown(
              data['pergunta_id']!, _perguntaIdMeta));
    } else if (isInserting) {
      context.missing(_perguntaIdMeta);
    }
    if (data.containsKey('ordem')) {
      context.handle(
          _ordemMeta, ordem.isAcceptableOrUnknown(data['ordem']!, _ordemMeta));
    } else if (isInserting) {
      context.missing(_ordemMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprPerguntaRelacionamentoTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprPerguntaRelacionamentoTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      aprId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}apr_id'])!,
      perguntaId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}pergunta_id'])!,
      ordem: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}ordem'])!,
    );
  }

  @override
  $AprPerguntaRelacionamentoTableTable createAlias(String alias) {
    return $AprPerguntaRelacionamentoTableTable(attachedDatabase, alias);
  }
}

class AprPerguntaRelacionamentoTableData extends DataClass
    implements Insertable<AprPerguntaRelacionamentoTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String aprId;
  final String perguntaId;
  final int ordem;
  const AprPerguntaRelacionamentoTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.aprId,
      required this.perguntaId,
      required this.ordem});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['apr_id'] = Variable<String>(aprId);
    map['pergunta_id'] = Variable<String>(perguntaId);
    map['ordem'] = Variable<int>(ordem);
    return map;
  }

  AprPerguntaRelacionamentoTableCompanion toCompanion(bool nullToAbsent) {
    return AprPerguntaRelacionamentoTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      aprId: Value(aprId),
      perguntaId: Value(perguntaId),
      ordem: Value(ordem),
    );
  }

  factory AprPerguntaRelacionamentoTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprPerguntaRelacionamentoTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      aprId: serializer.fromJson<String>(json['aprId']),
      perguntaId: serializer.fromJson<String>(json['perguntaId']),
      ordem: serializer.fromJson<int>(json['ordem']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'aprId': serializer.toJson<String>(aprId),
      'perguntaId': serializer.toJson<String>(perguntaId),
      'ordem': serializer.toJson<int>(ordem),
    };
  }

  AprPerguntaRelacionamentoTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? aprId,
          String? perguntaId,
          int? ordem}) =>
      AprPerguntaRelacionamentoTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        aprId: aprId ?? this.aprId,
        perguntaId: perguntaId ?? this.perguntaId,
        ordem: ordem ?? this.ordem,
      );
  AprPerguntaRelacionamentoTableData copyWithCompanion(
      AprPerguntaRelacionamentoTableCompanion data) {
    return AprPerguntaRelacionamentoTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      aprId: data.aprId.present ? data.aprId.value : this.aprId,
      perguntaId:
          data.perguntaId.present ? data.perguntaId.value : this.perguntaId,
      ordem: data.ordem.present ? data.ordem.value : this.ordem,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprPerguntaRelacionamentoTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('aprId: $aprId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('ordem: $ordem')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, aprId, perguntaId, ordem);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprPerguntaRelacionamentoTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.aprId == this.aprId &&
          other.perguntaId == this.perguntaId &&
          other.ordem == this.ordem);
}

class AprPerguntaRelacionamentoTableCompanion
    extends UpdateCompanion<AprPerguntaRelacionamentoTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> aprId;
  final Value<String> perguntaId;
  final Value<int> ordem;
  const AprPerguntaRelacionamentoTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.aprId = const Value.absent(),
    this.perguntaId = const Value.absent(),
    this.ordem = const Value.absent(),
  });
  AprPerguntaRelacionamentoTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String aprId,
    required String perguntaId,
    required int ordem,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        aprId = Value(aprId),
        perguntaId = Value(perguntaId),
        ordem = Value(ordem);
  static Insertable<AprPerguntaRelacionamentoTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? aprId,
    Expression<String>? perguntaId,
    Expression<int>? ordem,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (aprId != null) 'apr_id': aprId,
      if (perguntaId != null) 'pergunta_id': perguntaId,
      if (ordem != null) 'ordem': ordem,
    });
  }

  AprPerguntaRelacionamentoTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? aprId,
      Value<String>? perguntaId,
      Value<int>? ordem}) {
    return AprPerguntaRelacionamentoTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      aprId: aprId ?? this.aprId,
      perguntaId: perguntaId ?? this.perguntaId,
      ordem: ordem ?? this.ordem,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (aprId.present) {
      map['apr_id'] = Variable<String>(aprId.value);
    }
    if (perguntaId.present) {
      map['pergunta_id'] = Variable<String>(perguntaId.value);
    }
    if (ordem.present) {
      map['ordem'] = Variable<int>(ordem.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprPerguntaRelacionamentoTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('aprId: $aprId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('ordem: $ordem')
          ..write(')'))
        .toString();
  }
}

class $AprTipoAtividadeTableTable extends AprTipoAtividadeTable
    with TableInfo<$AprTipoAtividadeTableTable, AprTipoAtividadeTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprTipoAtividadeTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  @override
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
      'uuid', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: true);
  static const VerificationMeta _createdAtMeta =
      const VerificationMeta('createdAt');
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
      'created_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _updatedAtMeta =
      const VerificationMeta('updatedAt');
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
      'updated_at', aliasedName, false,
      type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _sincronizadoMeta =
      const VerificationMeta('sincronizado');
  @override
  late final GeneratedColumn<bool> sincronizado = GeneratedColumn<bool>(
      'sincronizado', aliasedName, false,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'CHECK ("sincronizado" IN (0, 1))'),
      defaultValue: const Constant(false));
  static const VerificationMeta _tipoAtividadeIdMeta =
      const VerificationMeta('tipoAtividadeId');
  @override
  late final GeneratedColumn<String> tipoAtividadeId = GeneratedColumn<String>(
      'tipo_atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES tipo_atividade_table (uuid)'));
  static const VerificationMeta _aprIdMeta = const VerificationMeta('aprId');
  @override
  late final GeneratedColumn<String> aprId = GeneratedColumn<String>(
      'apr_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('REFERENCES apr_table (uuid)'));
  @override
  List<GeneratedColumn> get $columns =>
      [id, uuid, createdAt, updatedAt, sincronizado, tipoAtividadeId, aprId];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_tipo_atividade_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<AprTipoAtividadeTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('uuid')) {
      context.handle(
          _uuidMeta, uuid.isAcceptableOrUnknown(data['uuid']!, _uuidMeta));
    } else if (isInserting) {
      context.missing(_uuidMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(_createdAtMeta,
          createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta));
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(_updatedAtMeta,
          updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta));
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    if (data.containsKey('sincronizado')) {
      context.handle(
          _sincronizadoMeta,
          sincronizado.isAcceptableOrUnknown(
              data['sincronizado']!, _sincronizadoMeta));
    }
    if (data.containsKey('tipo_atividade_id')) {
      context.handle(
          _tipoAtividadeIdMeta,
          tipoAtividadeId.isAcceptableOrUnknown(
              data['tipo_atividade_id']!, _tipoAtividadeIdMeta));
    } else if (isInserting) {
      context.missing(_tipoAtividadeIdMeta);
    }
    if (data.containsKey('apr_id')) {
      context.handle(
          _aprIdMeta, aprId.isAcceptableOrUnknown(data['apr_id']!, _aprIdMeta));
    } else if (isInserting) {
      context.missing(_aprIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprTipoAtividadeTableData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprTipoAtividadeTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      uuid: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}uuid'])!,
      createdAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}created_at'])!,
      updatedAt: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}updated_at'])!,
      sincronizado: attachedDatabase.typeMapping
          .read(DriftSqlType.bool, data['${effectivePrefix}sincronizado'])!,
      tipoAtividadeId: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}tipo_atividade_id'])!,
      aprId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}apr_id'])!,
    );
  }

  @override
  $AprTipoAtividadeTableTable createAlias(String alias) {
    return $AprTipoAtividadeTableTable(attachedDatabase, alias);
  }
}

class AprTipoAtividadeTableData extends DataClass
    implements Insertable<AprTipoAtividadeTableData> {
  final int id;
  final String uuid;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool sincronizado;
  final String tipoAtividadeId;
  final String aprId;
  const AprTipoAtividadeTableData(
      {required this.id,
      required this.uuid,
      required this.createdAt,
      required this.updatedAt,
      required this.sincronizado,
      required this.tipoAtividadeId,
      required this.aprId});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['uuid'] = Variable<String>(uuid);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['sincronizado'] = Variable<bool>(sincronizado);
    map['tipo_atividade_id'] = Variable<String>(tipoAtividadeId);
    map['apr_id'] = Variable<String>(aprId);
    return map;
  }

  AprTipoAtividadeTableCompanion toCompanion(bool nullToAbsent) {
    return AprTipoAtividadeTableCompanion(
      id: Value(id),
      uuid: Value(uuid),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      sincronizado: Value(sincronizado),
      tipoAtividadeId: Value(tipoAtividadeId),
      aprId: Value(aprId),
    );
  }

  factory AprTipoAtividadeTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprTipoAtividadeTableData(
      id: serializer.fromJson<int>(json['id']),
      uuid: serializer.fromJson<String>(json['uuid']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      sincronizado: serializer.fromJson<bool>(json['sincronizado']),
      tipoAtividadeId: serializer.fromJson<String>(json['tipoAtividadeId']),
      aprId: serializer.fromJson<String>(json['aprId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'uuid': serializer.toJson<String>(uuid),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'sincronizado': serializer.toJson<bool>(sincronizado),
      'tipoAtividadeId': serializer.toJson<String>(tipoAtividadeId),
      'aprId': serializer.toJson<String>(aprId),
    };
  }

  AprTipoAtividadeTableData copyWith(
          {int? id,
          String? uuid,
          DateTime? createdAt,
          DateTime? updatedAt,
          bool? sincronizado,
          String? tipoAtividadeId,
          String? aprId}) =>
      AprTipoAtividadeTableData(
        id: id ?? this.id,
        uuid: uuid ?? this.uuid,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        sincronizado: sincronizado ?? this.sincronizado,
        tipoAtividadeId: tipoAtividadeId ?? this.tipoAtividadeId,
        aprId: aprId ?? this.aprId,
      );
  AprTipoAtividadeTableData copyWithCompanion(
      AprTipoAtividadeTableCompanion data) {
    return AprTipoAtividadeTableData(
      id: data.id.present ? data.id.value : this.id,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      sincronizado: data.sincronizado.present
          ? data.sincronizado.value
          : this.sincronizado,
      tipoAtividadeId: data.tipoAtividadeId.present
          ? data.tipoAtividadeId.value
          : this.tipoAtividadeId,
      aprId: data.aprId.present ? data.aprId.value : this.aprId,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprTipoAtividadeTableData(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('tipoAtividadeId: $tipoAtividadeId, ')
          ..write('aprId: $aprId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, uuid, createdAt, updatedAt, sincronizado, tipoAtividadeId, aprId);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprTipoAtividadeTableData &&
          other.id == this.id &&
          other.uuid == this.uuid &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.sincronizado == this.sincronizado &&
          other.tipoAtividadeId == this.tipoAtividadeId &&
          other.aprId == this.aprId);
}

class AprTipoAtividadeTableCompanion
    extends UpdateCompanion<AprTipoAtividadeTableData> {
  final Value<int> id;
  final Value<String> uuid;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> sincronizado;
  final Value<String> tipoAtividadeId;
  final Value<String> aprId;
  const AprTipoAtividadeTableCompanion({
    this.id = const Value.absent(),
    this.uuid = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.sincronizado = const Value.absent(),
    this.tipoAtividadeId = const Value.absent(),
    this.aprId = const Value.absent(),
  });
  AprTipoAtividadeTableCompanion.insert({
    this.id = const Value.absent(),
    required String uuid,
    required DateTime createdAt,
    required DateTime updatedAt,
    this.sincronizado = const Value.absent(),
    required String tipoAtividadeId,
    required String aprId,
  })  : uuid = Value(uuid),
        createdAt = Value(createdAt),
        updatedAt = Value(updatedAt),
        tipoAtividadeId = Value(tipoAtividadeId),
        aprId = Value(aprId);
  static Insertable<AprTipoAtividadeTableData> custom({
    Expression<int>? id,
    Expression<String>? uuid,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? sincronizado,
    Expression<String>? tipoAtividadeId,
    Expression<String>? aprId,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (uuid != null) 'uuid': uuid,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (sincronizado != null) 'sincronizado': sincronizado,
      if (tipoAtividadeId != null) 'tipo_atividade_id': tipoAtividadeId,
      if (aprId != null) 'apr_id': aprId,
    });
  }

  AprTipoAtividadeTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? uuid,
      Value<DateTime>? createdAt,
      Value<DateTime>? updatedAt,
      Value<bool>? sincronizado,
      Value<String>? tipoAtividadeId,
      Value<String>? aprId}) {
    return AprTipoAtividadeTableCompanion(
      id: id ?? this.id,
      uuid: uuid ?? this.uuid,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sincronizado: sincronizado ?? this.sincronizado,
      tipoAtividadeId: tipoAtividadeId ?? this.tipoAtividadeId,
      aprId: aprId ?? this.aprId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (uuid.present) {
      map['uuid'] = Variable<String>(uuid.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (sincronizado.present) {
      map['sincronizado'] = Variable<bool>(sincronizado.value);
    }
    if (tipoAtividadeId.present) {
      map['tipo_atividade_id'] = Variable<String>(tipoAtividadeId.value);
    }
    if (aprId.present) {
      map['apr_id'] = Variable<String>(aprId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprTipoAtividadeTableCompanion(')
          ..write('id: $id, ')
          ..write('uuid: $uuid, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('sincronizado: $sincronizado, ')
          ..write('tipoAtividadeId: $tipoAtividadeId, ')
          ..write('aprId: $aprId')
          ..write(')'))
        .toString();
  }
}

class $AprPreenchidaTableTable extends AprPreenchidaTable
    with TableInfo<$AprPreenchidaTableTable, AprPreenchidaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprPreenchidaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _atividadeIdMeta =
      const VerificationMeta('atividadeId');
  @override
  late final GeneratedColumn<String> atividadeId = GeneratedColumn<String>(
      'atividade_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES atividade_table (uuid)'));
  static const VerificationMeta _aprIdMeta = const VerificationMeta('aprId');
  @override
  late final GeneratedColumn<String> aprId = GeneratedColumn<String>(
      'apr_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('REFERENCES apr_table (uuid)'));
  static const VerificationMeta _usuarioIdMeta =
      const VerificationMeta('usuarioId');
  @override
  late final GeneratedColumn<String> usuarioId = GeneratedColumn<String>(
      'usuario_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES usuario_table (uuid)'));
  static const VerificationMeta _dataPreenchimentoMeta =
      const VerificationMeta('dataPreenchimento');
  @override
  late final GeneratedColumn<DateTime> dataPreenchimento =
      GeneratedColumn<DateTime>('data_preenchimento', aliasedName, false,
          type: DriftSqlType.dateTime, requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [id, atividadeId, aprId, usuarioId, dataPreenchimento];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_preenchida_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<AprPreenchidaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('atividade_id')) {
      context.handle(
          _atividadeIdMeta,
          atividadeId.isAcceptableOrUnknown(
              data['atividade_id']!, _atividadeIdMeta));
    } else if (isInserting) {
      context.missing(_atividadeIdMeta);
    }
    if (data.containsKey('apr_id')) {
      context.handle(
          _aprIdMeta, aprId.isAcceptableOrUnknown(data['apr_id']!, _aprIdMeta));
    } else if (isInserting) {
      context.missing(_aprIdMeta);
    }
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    } else if (isInserting) {
      context.missing(_usuarioIdMeta);
    }
    if (data.containsKey('data_preenchimento')) {
      context.handle(
          _dataPreenchimentoMeta,
          dataPreenchimento.isAcceptableOrUnknown(
              data['data_preenchimento']!, _dataPreenchimentoMeta));
    } else if (isInserting) {
      context.missing(_dataPreenchimentoMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprPreenchidaTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprPreenchidaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      atividadeId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}atividade_id'])!,
      aprId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}apr_id'])!,
      usuarioId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}usuario_id'])!,
      dataPreenchimento: attachedDatabase.typeMapping.read(
          DriftSqlType.dateTime, data['${effectivePrefix}data_preenchimento'])!,
    );
  }

  @override
  $AprPreenchidaTableTable createAlias(String alias) {
    return $AprPreenchidaTableTable(attachedDatabase, alias);
  }
}

class AprPreenchidaTableData extends DataClass
    implements Insertable<AprPreenchidaTableData> {
  final int id;
  final String atividadeId;
  final String aprId;
  final String usuarioId;
  final DateTime dataPreenchimento;
  const AprPreenchidaTableData(
      {required this.id,
      required this.atividadeId,
      required this.aprId,
      required this.usuarioId,
      required this.dataPreenchimento});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['atividade_id'] = Variable<String>(atividadeId);
    map['apr_id'] = Variable<String>(aprId);
    map['usuario_id'] = Variable<String>(usuarioId);
    map['data_preenchimento'] = Variable<DateTime>(dataPreenchimento);
    return map;
  }

  AprPreenchidaTableCompanion toCompanion(bool nullToAbsent) {
    return AprPreenchidaTableCompanion(
      id: Value(id),
      atividadeId: Value(atividadeId),
      aprId: Value(aprId),
      usuarioId: Value(usuarioId),
      dataPreenchimento: Value(dataPreenchimento),
    );
  }

  factory AprPreenchidaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprPreenchidaTableData(
      id: serializer.fromJson<int>(json['id']),
      atividadeId: serializer.fromJson<String>(json['atividadeId']),
      aprId: serializer.fromJson<String>(json['aprId']),
      usuarioId: serializer.fromJson<String>(json['usuarioId']),
      dataPreenchimento:
          serializer.fromJson<DateTime>(json['dataPreenchimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'atividadeId': serializer.toJson<String>(atividadeId),
      'aprId': serializer.toJson<String>(aprId),
      'usuarioId': serializer.toJson<String>(usuarioId),
      'dataPreenchimento': serializer.toJson<DateTime>(dataPreenchimento),
    };
  }

  AprPreenchidaTableData copyWith(
          {int? id,
          String? atividadeId,
          String? aprId,
          String? usuarioId,
          DateTime? dataPreenchimento}) =>
      AprPreenchidaTableData(
        id: id ?? this.id,
        atividadeId: atividadeId ?? this.atividadeId,
        aprId: aprId ?? this.aprId,
        usuarioId: usuarioId ?? this.usuarioId,
        dataPreenchimento: dataPreenchimento ?? this.dataPreenchimento,
      );
  AprPreenchidaTableData copyWithCompanion(AprPreenchidaTableCompanion data) {
    return AprPreenchidaTableData(
      id: data.id.present ? data.id.value : this.id,
      atividadeId:
          data.atividadeId.present ? data.atividadeId.value : this.atividadeId,
      aprId: data.aprId.present ? data.aprId.value : this.aprId,
      usuarioId: data.usuarioId.present ? data.usuarioId.value : this.usuarioId,
      dataPreenchimento: data.dataPreenchimento.present
          ? data.dataPreenchimento.value
          : this.dataPreenchimento,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprPreenchidaTableData(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('aprId: $aprId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('dataPreenchimento: $dataPreenchimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, atividadeId, aprId, usuarioId, dataPreenchimento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprPreenchidaTableData &&
          other.id == this.id &&
          other.atividadeId == this.atividadeId &&
          other.aprId == this.aprId &&
          other.usuarioId == this.usuarioId &&
          other.dataPreenchimento == this.dataPreenchimento);
}

class AprPreenchidaTableCompanion
    extends UpdateCompanion<AprPreenchidaTableData> {
  final Value<int> id;
  final Value<String> atividadeId;
  final Value<String> aprId;
  final Value<String> usuarioId;
  final Value<DateTime> dataPreenchimento;
  const AprPreenchidaTableCompanion({
    this.id = const Value.absent(),
    this.atividadeId = const Value.absent(),
    this.aprId = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.dataPreenchimento = const Value.absent(),
  });
  AprPreenchidaTableCompanion.insert({
    this.id = const Value.absent(),
    required String atividadeId,
    required String aprId,
    required String usuarioId,
    required DateTime dataPreenchimento,
  })  : atividadeId = Value(atividadeId),
        aprId = Value(aprId),
        usuarioId = Value(usuarioId),
        dataPreenchimento = Value(dataPreenchimento);
  static Insertable<AprPreenchidaTableData> custom({
    Expression<int>? id,
    Expression<String>? atividadeId,
    Expression<String>? aprId,
    Expression<String>? usuarioId,
    Expression<DateTime>? dataPreenchimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (atividadeId != null) 'atividade_id': atividadeId,
      if (aprId != null) 'apr_id': aprId,
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (dataPreenchimento != null) 'data_preenchimento': dataPreenchimento,
    });
  }

  AprPreenchidaTableCompanion copyWith(
      {Value<int>? id,
      Value<String>? atividadeId,
      Value<String>? aprId,
      Value<String>? usuarioId,
      Value<DateTime>? dataPreenchimento}) {
    return AprPreenchidaTableCompanion(
      id: id ?? this.id,
      atividadeId: atividadeId ?? this.atividadeId,
      aprId: aprId ?? this.aprId,
      usuarioId: usuarioId ?? this.usuarioId,
      dataPreenchimento: dataPreenchimento ?? this.dataPreenchimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (atividadeId.present) {
      map['atividade_id'] = Variable<String>(atividadeId.value);
    }
    if (aprId.present) {
      map['apr_id'] = Variable<String>(aprId.value);
    }
    if (usuarioId.present) {
      map['usuario_id'] = Variable<String>(usuarioId.value);
    }
    if (dataPreenchimento.present) {
      map['data_preenchimento'] = Variable<DateTime>(dataPreenchimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprPreenchidaTableCompanion(')
          ..write('id: $id, ')
          ..write('atividadeId: $atividadeId, ')
          ..write('aprId: $aprId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('dataPreenchimento: $dataPreenchimento')
          ..write(')'))
        .toString();
  }
}

class $AprRespostaTableTable extends AprRespostaTable
    with TableInfo<$AprRespostaTableTable, AprRespostaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprRespostaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _aprPreenchidaIdMeta =
      const VerificationMeta('aprPreenchidaId');
  @override
  late final GeneratedColumn<int> aprPreenchidaId = GeneratedColumn<int>(
      'apr_preenchida_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES apr_preenchida_table (id)'));
  static const VerificationMeta _perguntaIdMeta =
      const VerificationMeta('perguntaId');
  @override
  late final GeneratedColumn<String> perguntaId = GeneratedColumn<String>(
      'pergunta_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES apr_question_table (uuid)'));
  static const VerificationMeta _respostaMeta =
      const VerificationMeta('resposta');
  @override
  late final GeneratedColumnWithTypeConverter<RespostaApr, String> resposta =
      GeneratedColumn<String>('resposta', aliasedName, false,
              type: DriftSqlType.string, requiredDuringInsert: true)
          .withConverter<RespostaApr>(
              $AprRespostaTableTable.$converterresposta);
  static const VerificationMeta _observacaoMeta =
      const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'observacao', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, aprPreenchidaId, perguntaId, resposta, observacao];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_resposta_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<AprRespostaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('apr_preenchida_id')) {
      context.handle(
          _aprPreenchidaIdMeta,
          aprPreenchidaId.isAcceptableOrUnknown(
              data['apr_preenchida_id']!, _aprPreenchidaIdMeta));
    } else if (isInserting) {
      context.missing(_aprPreenchidaIdMeta);
    }
    if (data.containsKey('pergunta_id')) {
      context.handle(
          _perguntaIdMeta,
          perguntaId.isAcceptableOrUnknown(
              data['pergunta_id']!, _perguntaIdMeta));
    } else if (isInserting) {
      context.missing(_perguntaIdMeta);
    }
    context.handle(_respostaMeta, const VerificationResult.success());
    if (data.containsKey('observacao')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['observacao']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprRespostaTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprRespostaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      aprPreenchidaId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}apr_preenchida_id'])!,
      perguntaId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}pergunta_id'])!,
      resposta: $AprRespostaTableTable.$converterresposta.fromSql(
          attachedDatabase.typeMapping
              .read(DriftSqlType.string, data['${effectivePrefix}resposta'])!),
      observacao: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}observacao']),
    );
  }

  @override
  $AprRespostaTableTable createAlias(String alias) {
    return $AprRespostaTableTable(attachedDatabase, alias);
  }

  static TypeConverter<RespostaApr, String> $converterresposta =
      const RespostaAprConverter();
}

class AprRespostaTableData extends DataClass
    implements Insertable<AprRespostaTableData> {
  final int id;
  final int aprPreenchidaId;
  final String perguntaId;
  final RespostaApr resposta;
  final String? observacao;
  const AprRespostaTableData(
      {required this.id,
      required this.aprPreenchidaId,
      required this.perguntaId,
      required this.resposta,
      this.observacao});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['apr_preenchida_id'] = Variable<int>(aprPreenchidaId);
    map['pergunta_id'] = Variable<String>(perguntaId);
    {
      map['resposta'] = Variable<String>(
          $AprRespostaTableTable.$converterresposta.toSql(resposta));
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    return map;
  }

  AprRespostaTableCompanion toCompanion(bool nullToAbsent) {
    return AprRespostaTableCompanion(
      id: Value(id),
      aprPreenchidaId: Value(aprPreenchidaId),
      perguntaId: Value(perguntaId),
      resposta: Value(resposta),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory AprRespostaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprRespostaTableData(
      id: serializer.fromJson<int>(json['id']),
      aprPreenchidaId: serializer.fromJson<int>(json['aprPreenchidaId']),
      perguntaId: serializer.fromJson<String>(json['perguntaId']),
      resposta: serializer.fromJson<RespostaApr>(json['resposta']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'aprPreenchidaId': serializer.toJson<int>(aprPreenchidaId),
      'perguntaId': serializer.toJson<String>(perguntaId),
      'resposta': serializer.toJson<RespostaApr>(resposta),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  AprRespostaTableData copyWith(
          {int? id,
          int? aprPreenchidaId,
          String? perguntaId,
          RespostaApr? resposta,
          Value<String?> observacao = const Value.absent()}) =>
      AprRespostaTableData(
        id: id ?? this.id,
        aprPreenchidaId: aprPreenchidaId ?? this.aprPreenchidaId,
        perguntaId: perguntaId ?? this.perguntaId,
        resposta: resposta ?? this.resposta,
        observacao: observacao.present ? observacao.value : this.observacao,
      );
  AprRespostaTableData copyWithCompanion(AprRespostaTableCompanion data) {
    return AprRespostaTableData(
      id: data.id.present ? data.id.value : this.id,
      aprPreenchidaId: data.aprPreenchidaId.present
          ? data.aprPreenchidaId.value
          : this.aprPreenchidaId,
      perguntaId:
          data.perguntaId.present ? data.perguntaId.value : this.perguntaId,
      resposta: data.resposta.present ? data.resposta.value : this.resposta,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprRespostaTableData(')
          ..write('id: $id, ')
          ..write('aprPreenchidaId: $aprPreenchidaId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('resposta: $resposta, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, aprPreenchidaId, perguntaId, resposta, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprRespostaTableData &&
          other.id == this.id &&
          other.aprPreenchidaId == this.aprPreenchidaId &&
          other.perguntaId == this.perguntaId &&
          other.resposta == this.resposta &&
          other.observacao == this.observacao);
}

class AprRespostaTableCompanion extends UpdateCompanion<AprRespostaTableData> {
  final Value<int> id;
  final Value<int> aprPreenchidaId;
  final Value<String> perguntaId;
  final Value<RespostaApr> resposta;
  final Value<String?> observacao;
  const AprRespostaTableCompanion({
    this.id = const Value.absent(),
    this.aprPreenchidaId = const Value.absent(),
    this.perguntaId = const Value.absent(),
    this.resposta = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  AprRespostaTableCompanion.insert({
    this.id = const Value.absent(),
    required int aprPreenchidaId,
    required String perguntaId,
    required RespostaApr resposta,
    this.observacao = const Value.absent(),
  })  : aprPreenchidaId = Value(aprPreenchidaId),
        perguntaId = Value(perguntaId),
        resposta = Value(resposta);
  static Insertable<AprRespostaTableData> custom({
    Expression<int>? id,
    Expression<int>? aprPreenchidaId,
    Expression<String>? perguntaId,
    Expression<String>? resposta,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (aprPreenchidaId != null) 'apr_preenchida_id': aprPreenchidaId,
      if (perguntaId != null) 'pergunta_id': perguntaId,
      if (resposta != null) 'resposta': resposta,
      if (observacao != null) 'observacao': observacao,
    });
  }

  AprRespostaTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? aprPreenchidaId,
      Value<String>? perguntaId,
      Value<RespostaApr>? resposta,
      Value<String?>? observacao}) {
    return AprRespostaTableCompanion(
      id: id ?? this.id,
      aprPreenchidaId: aprPreenchidaId ?? this.aprPreenchidaId,
      perguntaId: perguntaId ?? this.perguntaId,
      resposta: resposta ?? this.resposta,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (aprPreenchidaId.present) {
      map['apr_preenchida_id'] = Variable<int>(aprPreenchidaId.value);
    }
    if (perguntaId.present) {
      map['pergunta_id'] = Variable<String>(perguntaId.value);
    }
    if (resposta.present) {
      map['resposta'] = Variable<String>(
          $AprRespostaTableTable.$converterresposta.toSql(resposta.value));
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprRespostaTableCompanion(')
          ..write('id: $id, ')
          ..write('aprPreenchidaId: $aprPreenchidaId, ')
          ..write('perguntaId: $perguntaId, ')
          ..write('resposta: $resposta, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $AprAssinaturaTableTable extends AprAssinaturaTable
    with TableInfo<$AprAssinaturaTableTable, AprAssinaturaTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AprAssinaturaTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'id', aliasedName, false,
      hasAutoIncrement: true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      defaultConstraints:
          GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
  static const VerificationMeta _aprPreenchidaIdMeta =
      const VerificationMeta('aprPreenchidaId');
  @override
  late final GeneratedColumn<int> aprPreenchidaId = GeneratedColumn<int>(
      'apr_preenchida_id', aliasedName, false,
      type: DriftSqlType.int,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES apr_preenchida_table (id)'));
  static const VerificationMeta _usuarioIdMeta =
      const VerificationMeta('usuarioId');
  @override
  late final GeneratedColumn<String> usuarioId = GeneratedColumn<String>(
      'usuario_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES usuario_table (uuid)'));
  static const VerificationMeta _dataAssinaturaMeta =
      const VerificationMeta('dataAssinatura');
  @override
  late final GeneratedColumn<DateTime> dataAssinatura =
      GeneratedColumn<DateTime>('data_assinatura', aliasedName, false,
          type: DriftSqlType.dateTime, requiredDuringInsert: true);
  static const VerificationMeta _tecnicoIdMeta =
      const VerificationMeta('tecnicoId');
  @override
  late final GeneratedColumn<String> tecnicoId = GeneratedColumn<String>(
      'tecnico_id', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways(
          'REFERENCES tecnico_table (uuid)'));
  static const VerificationMeta _assinaturaMeta =
      const VerificationMeta('assinatura');
  @override
  late final GeneratedColumn<Uint8List> assinatura = GeneratedColumn<Uint8List>(
      'assinatura', aliasedName, false,
      type: DriftSqlType.blob, requiredDuringInsert: true);
  static const VerificationMeta _assinaturaPathMeta =
      const VerificationMeta('assinaturaPath');
  @override
  late final GeneratedColumn<String> assinaturaPath = GeneratedColumn<String>(
      'assinatura_path', aliasedName, true,
      type: DriftSqlType.string, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        aprPreenchidaId,
        usuarioId,
        dataAssinatura,
        tecnicoId,
        assinatura,
        assinaturaPath
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'apr_assinatura_table';
  @override
  VerificationContext validateIntegrity(
      Insertable<AprAssinaturaTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('apr_preenchida_id')) {
      context.handle(
          _aprPreenchidaIdMeta,
          aprPreenchidaId.isAcceptableOrUnknown(
              data['apr_preenchida_id']!, _aprPreenchidaIdMeta));
    } else if (isInserting) {
      context.missing(_aprPreenchidaIdMeta);
    }
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    } else if (isInserting) {
      context.missing(_usuarioIdMeta);
    }
    if (data.containsKey('data_assinatura')) {
      context.handle(
          _dataAssinaturaMeta,
          dataAssinatura.isAcceptableOrUnknown(
              data['data_assinatura']!, _dataAssinaturaMeta));
    } else if (isInserting) {
      context.missing(_dataAssinaturaMeta);
    }
    if (data.containsKey('tecnico_id')) {
      context.handle(_tecnicoIdMeta,
          tecnicoId.isAcceptableOrUnknown(data['tecnico_id']!, _tecnicoIdMeta));
    } else if (isInserting) {
      context.missing(_tecnicoIdMeta);
    }
    if (data.containsKey('assinatura')) {
      context.handle(
          _assinaturaMeta,
          assinatura.isAcceptableOrUnknown(
              data['assinatura']!, _assinaturaMeta));
    } else if (isInserting) {
      context.missing(_assinaturaMeta);
    }
    if (data.containsKey('assinatura_path')) {
      context.handle(
          _assinaturaPathMeta,
          assinaturaPath.isAcceptableOrUnknown(
              data['assinatura_path']!, _assinaturaPathMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AprAssinaturaTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AprAssinaturaTableData(
      id: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}id'])!,
      aprPreenchidaId: attachedDatabase.typeMapping
          .read(DriftSqlType.int, data['${effectivePrefix}apr_preenchida_id'])!,
      usuarioId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}usuario_id'])!,
      dataAssinatura: attachedDatabase.typeMapping.read(
          DriftSqlType.dateTime, data['${effectivePrefix}data_assinatura'])!,
      tecnicoId: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}tecnico_id'])!,
      assinatura: attachedDatabase.typeMapping
          .read(DriftSqlType.blob, data['${effectivePrefix}assinatura'])!,
      assinaturaPath: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}assinatura_path']),
    );
  }

  @override
  $AprAssinaturaTableTable createAlias(String alias) {
    return $AprAssinaturaTableTable(attachedDatabase, alias);
  }
}

class AprAssinaturaTableData extends DataClass
    implements Insertable<AprAssinaturaTableData> {
  final int id;
  final int aprPreenchidaId;
  final String usuarioId;
  final DateTime dataAssinatura;
  final String tecnicoId;
  final Uint8List assinatura;
  final String? assinaturaPath;
  const AprAssinaturaTableData(
      {required this.id,
      required this.aprPreenchidaId,
      required this.usuarioId,
      required this.dataAssinatura,
      required this.tecnicoId,
      required this.assinatura,
      this.assinaturaPath});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['apr_preenchida_id'] = Variable<int>(aprPreenchidaId);
    map['usuario_id'] = Variable<String>(usuarioId);
    map['data_assinatura'] = Variable<DateTime>(dataAssinatura);
    map['tecnico_id'] = Variable<String>(tecnicoId);
    map['assinatura'] = Variable<Uint8List>(assinatura);
    if (!nullToAbsent || assinaturaPath != null) {
      map['assinatura_path'] = Variable<String>(assinaturaPath);
    }
    return map;
  }

  AprAssinaturaTableCompanion toCompanion(bool nullToAbsent) {
    return AprAssinaturaTableCompanion(
      id: Value(id),
      aprPreenchidaId: Value(aprPreenchidaId),
      usuarioId: Value(usuarioId),
      dataAssinatura: Value(dataAssinatura),
      tecnicoId: Value(tecnicoId),
      assinatura: Value(assinatura),
      assinaturaPath: assinaturaPath == null && nullToAbsent
          ? const Value.absent()
          : Value(assinaturaPath),
    );
  }

  factory AprAssinaturaTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AprAssinaturaTableData(
      id: serializer.fromJson<int>(json['id']),
      aprPreenchidaId: serializer.fromJson<int>(json['aprPreenchidaId']),
      usuarioId: serializer.fromJson<String>(json['usuarioId']),
      dataAssinatura: serializer.fromJson<DateTime>(json['dataAssinatura']),
      tecnicoId: serializer.fromJson<String>(json['tecnicoId']),
      assinatura: serializer.fromJson<Uint8List>(json['assinatura']),
      assinaturaPath: serializer.fromJson<String?>(json['assinaturaPath']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'aprPreenchidaId': serializer.toJson<int>(aprPreenchidaId),
      'usuarioId': serializer.toJson<String>(usuarioId),
      'dataAssinatura': serializer.toJson<DateTime>(dataAssinatura),
      'tecnicoId': serializer.toJson<String>(tecnicoId),
      'assinatura': serializer.toJson<Uint8List>(assinatura),
      'assinaturaPath': serializer.toJson<String?>(assinaturaPath),
    };
  }

  AprAssinaturaTableData copyWith(
          {int? id,
          int? aprPreenchidaId,
          String? usuarioId,
          DateTime? dataAssinatura,
          String? tecnicoId,
          Uint8List? assinatura,
          Value<String?> assinaturaPath = const Value.absent()}) =>
      AprAssinaturaTableData(
        id: id ?? this.id,
        aprPreenchidaId: aprPreenchidaId ?? this.aprPreenchidaId,
        usuarioId: usuarioId ?? this.usuarioId,
        dataAssinatura: dataAssinatura ?? this.dataAssinatura,
        tecnicoId: tecnicoId ?? this.tecnicoId,
        assinatura: assinatura ?? this.assinatura,
        assinaturaPath:
            assinaturaPath.present ? assinaturaPath.value : this.assinaturaPath,
      );
  AprAssinaturaTableData copyWithCompanion(AprAssinaturaTableCompanion data) {
    return AprAssinaturaTableData(
      id: data.id.present ? data.id.value : this.id,
      aprPreenchidaId: data.aprPreenchidaId.present
          ? data.aprPreenchidaId.value
          : this.aprPreenchidaId,
      usuarioId: data.usuarioId.present ? data.usuarioId.value : this.usuarioId,
      dataAssinatura: data.dataAssinatura.present
          ? data.dataAssinatura.value
          : this.dataAssinatura,
      tecnicoId: data.tecnicoId.present ? data.tecnicoId.value : this.tecnicoId,
      assinatura:
          data.assinatura.present ? data.assinatura.value : this.assinatura,
      assinaturaPath: data.assinaturaPath.present
          ? data.assinaturaPath.value
          : this.assinaturaPath,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AprAssinaturaTableData(')
          ..write('id: $id, ')
          ..write('aprPreenchidaId: $aprPreenchidaId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('dataAssinatura: $dataAssinatura, ')
          ..write('tecnicoId: $tecnicoId, ')
          ..write('assinatura: $assinatura, ')
          ..write('assinaturaPath: $assinaturaPath')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      aprPreenchidaId,
      usuarioId,
      dataAssinatura,
      tecnicoId,
      $driftBlobEquality.hash(assinatura),
      assinaturaPath);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AprAssinaturaTableData &&
          other.id == this.id &&
          other.aprPreenchidaId == this.aprPreenchidaId &&
          other.usuarioId == this.usuarioId &&
          other.dataAssinatura == this.dataAssinatura &&
          other.tecnicoId == this.tecnicoId &&
          $driftBlobEquality.equals(other.assinatura, this.assinatura) &&
          other.assinaturaPath == this.assinaturaPath);
}

class AprAssinaturaTableCompanion
    extends UpdateCompanion<AprAssinaturaTableData> {
  final Value<int> id;
  final Value<int> aprPreenchidaId;
  final Value<String> usuarioId;
  final Value<DateTime> dataAssinatura;
  final Value<String> tecnicoId;
  final Value<Uint8List> assinatura;
  final Value<String?> assinaturaPath;
  const AprAssinaturaTableCompanion({
    this.id = const Value.absent(),
    this.aprPreenchidaId = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.dataAssinatura = const Value.absent(),
    this.tecnicoId = const Value.absent(),
    this.assinatura = const Value.absent(),
    this.assinaturaPath = const Value.absent(),
  });
  AprAssinaturaTableCompanion.insert({
    this.id = const Value.absent(),
    required int aprPreenchidaId,
    required String usuarioId,
    required DateTime dataAssinatura,
    required String tecnicoId,
    required Uint8List assinatura,
    this.assinaturaPath = const Value.absent(),
  })  : aprPreenchidaId = Value(aprPreenchidaId),
        usuarioId = Value(usuarioId),
        dataAssinatura = Value(dataAssinatura),
        tecnicoId = Value(tecnicoId),
        assinatura = Value(assinatura);
  static Insertable<AprAssinaturaTableData> custom({
    Expression<int>? id,
    Expression<int>? aprPreenchidaId,
    Expression<String>? usuarioId,
    Expression<DateTime>? dataAssinatura,
    Expression<String>? tecnicoId,
    Expression<Uint8List>? assinatura,
    Expression<String>? assinaturaPath,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (aprPreenchidaId != null) 'apr_preenchida_id': aprPreenchidaId,
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (dataAssinatura != null) 'data_assinatura': dataAssinatura,
      if (tecnicoId != null) 'tecnico_id': tecnicoId,
      if (assinatura != null) 'assinatura': assinatura,
      if (assinaturaPath != null) 'assinatura_path': assinaturaPath,
    });
  }

  AprAssinaturaTableCompanion copyWith(
      {Value<int>? id,
      Value<int>? aprPreenchidaId,
      Value<String>? usuarioId,
      Value<DateTime>? dataAssinatura,
      Value<String>? tecnicoId,
      Value<Uint8List>? assinatura,
      Value<String?>? assinaturaPath}) {
    return AprAssinaturaTableCompanion(
      id: id ?? this.id,
      aprPreenchidaId: aprPreenchidaId ?? this.aprPreenchidaId,
      usuarioId: usuarioId ?? this.usuarioId,
      dataAssinatura: dataAssinatura ?? this.dataAssinatura,
      tecnicoId: tecnicoId ?? this.tecnicoId,
      assinatura: assinatura ?? this.assinatura,
      assinaturaPath: assinaturaPath ?? this.assinaturaPath,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (aprPreenchidaId.present) {
      map['apr_preenchida_id'] = Variable<int>(aprPreenchidaId.value);
    }
    if (usuarioId.present) {
      map['usuario_id'] = Variable<String>(usuarioId.value);
    }
    if (dataAssinatura.present) {
      map['data_assinatura'] = Variable<DateTime>(dataAssinatura.value);
    }
    if (tecnicoId.present) {
      map['tecnico_id'] = Variable<String>(tecnicoId.value);
    }
    if (assinatura.present) {
      map['assinatura'] = Variable<Uint8List>(assinatura.value);
    }
    if (assinaturaPath.present) {
      map['assinatura_path'] = Variable<String>(assinaturaPath.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AprAssinaturaTableCompanion(')
          ..write('id: $id, ')
          ..write('aprPreenchidaId: $aprPreenchidaId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('dataAssinatura: $dataAssinatura, ')
          ..write('tecnicoId: $tecnicoId, ')
          ..write('assinatura: $assinatura, ')
          ..write('assinaturaPath: $assinaturaPath')
          ..write(')'))
        .toString();
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(e);
  $AppDatabaseManager get managers => $AppDatabaseManager(this);
  late final $UsuarioTableTable usuarioTable = $UsuarioTableTable(this);
  late final $TipoAtividadeTableTable tipoAtividadeTable =
      $TipoAtividadeTableTable(this);
  late final $GrupoDefeitoEquipamentoTableTable grupoDefeitoEquipamentoTable =
      $GrupoDefeitoEquipamentoTableTable(this);
  late final $EquipamentoTableTable equipamentoTable =
      $EquipamentoTableTable(this);
  late final $AtividadeTableTable atividadeTable = $AtividadeTableTable(this);
  late final $SubgrupoDefeitoEquipamentoTableTable
      subgrupoDefeitoEquipamentoTable =
      $SubgrupoDefeitoEquipamentoTableTable(this);
  late final $DefeitoTableTable defeitoTable = $DefeitoTableTable(this);
  late final $ChecklistPerguntaTableTable checklistPerguntaTable =
      $ChecklistPerguntaTableTable(this);
  late final $AnomaliaTableTable anomaliaTable = $AnomaliaTableTable(this);
  late final $CorrecaoAnomaliaTableTable correcaoAnomaliaTable =
      $CorrecaoAnomaliaTableTable(this);
  late final $ChecklistTableTable checklistTable = $ChecklistTableTable(this);
  late final $ChecklistPerguntaRelacionamentoTableTable
      checklistPerguntaRelacionamentoTable =
      $ChecklistPerguntaRelacionamentoTableTable(this);
  late final $ChecklistPreenchidoTableTable checklistPreenchidoTable =
      $ChecklistPreenchidoTableTable(this);
  late final $ChecklistRespostaTableTable checklistRespostaTable =
      $ChecklistRespostaTableTable(this);
  late final $ChecklistTipoAtividadeTableTable checklistTipoAtividadeTable =
      $ChecklistTipoAtividadeTableTable(this);
  late final $FormularioMpbbTableTable formularioMpbbTable =
      $FormularioMpbbTableTable(this);
  late final $MedicaoElementoMpbbTableTable medicaoElementoMpbbTable =
      $MedicaoElementoMpbbTableTable(this);
  late final $MpDjFormTableTable mpDjFormTable = $MpDjFormTableTable(this);
  late final $MpDjPressaoSf6TableTable mpDjPressaoSf6Table =
      $MpDjPressaoSf6TableTable(this);
  late final $MpDjTempoOperacaoTableTable mpDjTempoOperacaoTable =
      $MpDjTempoOperacaoTableTable(this);
  late final $MpDjResistenciaContatoTableTable mpDjResistenciaContatoTable =
      $MpDjResistenciaContatoTableTable(this);
  late final $MpDjResistenciaIsolamentoTableTable
      mpDjResistenciaIsolamentoTable =
      $MpDjResistenciaIsolamentoTableTable(this);
  late final $TecnicoTableTable tecnicoTable = $TecnicoTableTable(this);
  late final $AprTableTable aprTable = $AprTableTable(this);
  late final $AprQuestionTableTable aprQuestionTable =
      $AprQuestionTableTable(this);
  late final $AprPerguntaRelacionamentoTableTable
      aprPerguntaRelacionamentoTable =
      $AprPerguntaRelacionamentoTableTable(this);
  late final $AprTipoAtividadeTableTable aprTipoAtividadeTable =
      $AprTipoAtividadeTableTable(this);
  late final $AprPreenchidaTableTable aprPreenchidaTable =
      $AprPreenchidaTableTable(this);
  late final $AprRespostaTableTable aprRespostaTable =
      $AprRespostaTableTable(this);
  late final $AprAssinaturaTableTable aprAssinaturaTable =
      $AprAssinaturaTableTable(this);
  late final UsuarioDao usuarioDao = UsuarioDao(this as AppDatabase);
  late final AtividadeDao atividadeDao = AtividadeDao(this as AppDatabase);
  late final EquipamentoDao equipamentoDao =
      EquipamentoDao(this as AppDatabase);
  late final DefeitoDao defeitoDao = DefeitoDao(this as AppDatabase);
  late final AprDao aprDao = AprDao(this as AppDatabase);
  late final ChecklistDao checklistDao = ChecklistDao(this as AppDatabase);
  late final MpbbDao mpbbDao = MpbbDao(this as AppDatabase);
  late final MpdjDao mpdjDao = MpdjDao(this as AppDatabase);
  late final TecnicoDao tecnicoDao = TecnicoDao(this as AppDatabase);
  late final AnomaliaDao anomaliaDao = AnomaliaDao(this as AppDatabase);
  @override
  Iterable<TableInfo<Table, Object?>> get allTables =>
      allSchemaEntities.whereType<TableInfo<Table, Object?>>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        usuarioTable,
        tipoAtividadeTable,
        grupoDefeitoEquipamentoTable,
        equipamentoTable,
        atividadeTable,
        subgrupoDefeitoEquipamentoTable,
        defeitoTable,
        checklistPerguntaTable,
        anomaliaTable,
        correcaoAnomaliaTable,
        checklistTable,
        checklistPerguntaRelacionamentoTable,
        checklistPreenchidoTable,
        checklistRespostaTable,
        checklistTipoAtividadeTable,
        formularioMpbbTable,
        medicaoElementoMpbbTable,
        mpDjFormTable,
        mpDjPressaoSf6Table,
        mpDjTempoOperacaoTable,
        mpDjResistenciaContatoTable,
        mpDjResistenciaIsolamentoTable,
        tecnicoTable,
        aprTable,
        aprQuestionTable,
        aprPerguntaRelacionamentoTable,
        aprTipoAtividadeTable,
        aprPreenchidaTable,
        aprRespostaTable,
        aprAssinaturaTable
      ];
  @override
  StreamQueryUpdateRules get streamUpdateRules => const StreamQueryUpdateRules(
        [
          WritePropagation(
            on: TableUpdateQuery.onTableName('formulario_mpbb_table',
                limitUpdateKind: UpdateKind.delete),
            result: [
              TableUpdate('medicao_elemento_mpbb_table',
                  kind: UpdateKind.delete),
            ],
          ),
        ],
      );
}

typedef $$UsuarioTableTableCreateCompanionBuilder = UsuarioTableCompanion
    Function({
  Value<int> id,
  required String uuid,
  required String nome,
  required String matricula,
  Value<String?> token,
  Value<String?> refreshToken,
  Value<DateTime?> ultimoLogin,
  Value<DateTime> createdAt,
});
typedef $$UsuarioTableTableUpdateCompanionBuilder = UsuarioTableCompanion
    Function({
  Value<int> id,
  Value<String> uuid,
  Value<String> nome,
  Value<String> matricula,
  Value<String?> token,
  Value<String?> refreshToken,
  Value<DateTime?> ultimoLogin,
  Value<DateTime> createdAt,
});

final class $$UsuarioTableTableReferences extends BaseReferences<_$AppDatabase,
    $UsuarioTableTable, UsuarioTableData> {
  $$UsuarioTableTableReferences(super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$ChecklistPreenchidoTableTable,
      List<ChecklistPreenchidoTableData>> _checklistPreenchidoTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.checklistPreenchidoTable,
          aliasName: $_aliasNameGenerator(
              db.usuarioTable.uuid, db.checklistPreenchidoTable.usuarioId));

  $$ChecklistPreenchidoTableTableProcessedTableManager
      get checklistPreenchidoTableRefs {
    final manager = $$ChecklistPreenchidoTableTableTableManager(
            $_db, $_db.checklistPreenchidoTable)
        .filter((f) => f.usuarioId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_checklistPreenchidoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprPreenchidaTableTable,
      List<AprPreenchidaTableData>> _aprPreenchidaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprPreenchidaTable,
          aliasName: $_aliasNameGenerator(
              db.usuarioTable.uuid, db.aprPreenchidaTable.usuarioId));

  $$AprPreenchidaTableTableProcessedTableManager get aprPreenchidaTableRefs {
    final manager =
        $$AprPreenchidaTableTableTableManager($_db, $_db.aprPreenchidaTable)
            .filter((f) => f.usuarioId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprPreenchidaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprAssinaturaTableTable,
      List<AprAssinaturaTableData>> _aprAssinaturaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprAssinaturaTable,
          aliasName: $_aliasNameGenerator(
              db.usuarioTable.uuid, db.aprAssinaturaTable.usuarioId));

  $$AprAssinaturaTableTableProcessedTableManager get aprAssinaturaTableRefs {
    final manager =
        $$AprAssinaturaTableTableTableManager($_db, $_db.aprAssinaturaTable)
            .filter((f) => f.usuarioId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprAssinaturaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$UsuarioTableTableFilterComposer
    extends Composer<_$AppDatabase, $UsuarioTableTable> {
  $$UsuarioTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get matricula => $composableBuilder(
      column: $table.matricula, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get token => $composableBuilder(
      column: $table.token, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get refreshToken => $composableBuilder(
      column: $table.refreshToken, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get ultimoLogin => $composableBuilder(
      column: $table.ultimoLogin, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  Expression<bool> checklistPreenchidoTableRefs(
      Expression<bool> Function($$ChecklistPreenchidoTableTableFilterComposer f)
          f) {
    final $$ChecklistPreenchidoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.usuarioId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> aprPreenchidaTableRefs(
      Expression<bool> Function($$AprPreenchidaTableTableFilterComposer f) f) {
    final $$AprPreenchidaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.usuarioId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> aprAssinaturaTableRefs(
      Expression<bool> Function($$AprAssinaturaTableTableFilterComposer f) f) {
    final $$AprAssinaturaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprAssinaturaTable,
        getReferencedColumn: (t) => t.usuarioId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprAssinaturaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprAssinaturaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$UsuarioTableTableOrderingComposer
    extends Composer<_$AppDatabase, $UsuarioTableTable> {
  $$UsuarioTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get matricula => $composableBuilder(
      column: $table.matricula, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get token => $composableBuilder(
      column: $table.token, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get refreshToken => $composableBuilder(
      column: $table.refreshToken,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get ultimoLogin => $composableBuilder(
      column: $table.ultimoLogin, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));
}

class $$UsuarioTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $UsuarioTableTable> {
  $$UsuarioTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get matricula =>
      $composableBuilder(column: $table.matricula, builder: (column) => column);

  GeneratedColumn<String> get token =>
      $composableBuilder(column: $table.token, builder: (column) => column);

  GeneratedColumn<String> get refreshToken => $composableBuilder(
      column: $table.refreshToken, builder: (column) => column);

  GeneratedColumn<DateTime> get ultimoLogin => $composableBuilder(
      column: $table.ultimoLogin, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  Expression<T> checklistPreenchidoTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistPreenchidoTableTableAnnotationComposer a)
          f) {
    final $$ChecklistPreenchidoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.usuarioId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> aprPreenchidaTableRefs<T extends Object>(
      Expression<T> Function($$AprPreenchidaTableTableAnnotationComposer a) f) {
    final $$AprPreenchidaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPreenchidaTable,
            getReferencedColumn: (t) => t.usuarioId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPreenchidaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPreenchidaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> aprAssinaturaTableRefs<T extends Object>(
      Expression<T> Function($$AprAssinaturaTableTableAnnotationComposer a) f) {
    final $$AprAssinaturaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprAssinaturaTable,
            getReferencedColumn: (t) => t.usuarioId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprAssinaturaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprAssinaturaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$UsuarioTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $UsuarioTableTable,
    UsuarioTableData,
    $$UsuarioTableTableFilterComposer,
    $$UsuarioTableTableOrderingComposer,
    $$UsuarioTableTableAnnotationComposer,
    $$UsuarioTableTableCreateCompanionBuilder,
    $$UsuarioTableTableUpdateCompanionBuilder,
    (UsuarioTableData, $$UsuarioTableTableReferences),
    UsuarioTableData,
    PrefetchHooks Function(
        {bool checklistPreenchidoTableRefs,
        bool aprPreenchidaTableRefs,
        bool aprAssinaturaTableRefs})> {
  $$UsuarioTableTableTableManager(_$AppDatabase db, $UsuarioTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$UsuarioTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$UsuarioTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$UsuarioTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String> matricula = const Value.absent(),
            Value<String?> token = const Value.absent(),
            Value<String?> refreshToken = const Value.absent(),
            Value<DateTime?> ultimoLogin = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
          }) =>
              UsuarioTableCompanion(
            id: id,
            uuid: uuid,
            nome: nome,
            matricula: matricula,
            token: token,
            refreshToken: refreshToken,
            ultimoLogin: ultimoLogin,
            createdAt: createdAt,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required String nome,
            required String matricula,
            Value<String?> token = const Value.absent(),
            Value<String?> refreshToken = const Value.absent(),
            Value<DateTime?> ultimoLogin = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
          }) =>
              UsuarioTableCompanion.insert(
            id: id,
            uuid: uuid,
            nome: nome,
            matricula: matricula,
            token: token,
            refreshToken: refreshToken,
            ultimoLogin: ultimoLogin,
            createdAt: createdAt,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$UsuarioTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {checklistPreenchidoTableRefs = false,
              aprPreenchidaTableRefs = false,
              aprAssinaturaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (checklistPreenchidoTableRefs) db.checklistPreenchidoTable,
                if (aprPreenchidaTableRefs) db.aprPreenchidaTable,
                if (aprAssinaturaTableRefs) db.aprAssinaturaTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (checklistPreenchidoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$UsuarioTableTableReferences
                            ._checklistPreenchidoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$UsuarioTableTableReferences(db, table, p0)
                                .checklistPreenchidoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.usuarioId == item.uuid),
                        typedResults: items),
                  if (aprPreenchidaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$UsuarioTableTableReferences
                            ._aprPreenchidaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$UsuarioTableTableReferences(db, table, p0)
                                .aprPreenchidaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.usuarioId == item.uuid),
                        typedResults: items),
                  if (aprAssinaturaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$UsuarioTableTableReferences
                            ._aprAssinaturaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$UsuarioTableTableReferences(db, table, p0)
                                .aprAssinaturaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.usuarioId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$UsuarioTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $UsuarioTableTable,
    UsuarioTableData,
    $$UsuarioTableTableFilterComposer,
    $$UsuarioTableTableOrderingComposer,
    $$UsuarioTableTableAnnotationComposer,
    $$UsuarioTableTableCreateCompanionBuilder,
    $$UsuarioTableTableUpdateCompanionBuilder,
    (UsuarioTableData, $$UsuarioTableTableReferences),
    UsuarioTableData,
    PrefetchHooks Function(
        {bool checklistPreenchidoTableRefs,
        bool aprPreenchidaTableRefs,
        bool aprAssinaturaTableRefs})>;
typedef $$TipoAtividadeTableTableCreateCompanionBuilder
    = TipoAtividadeTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  required TipoAtividadeMobile tipoAtividadeMobile,
});
typedef $$TipoAtividadeTableTableUpdateCompanionBuilder
    = TipoAtividadeTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<TipoAtividadeMobile> tipoAtividadeMobile,
});

final class $$TipoAtividadeTableTableReferences extends BaseReferences<
    _$AppDatabase, $TipoAtividadeTableTable, TipoAtividadeTableData> {
  $$TipoAtividadeTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$AtividadeTableTable, List<AtividadeTableData>>
      _atividadeTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.atividadeTable,
              aliasName: $_aliasNameGenerator(db.tipoAtividadeTable.uuid,
                  db.atividadeTable.tipoAtividadeId));

  $$AtividadeTableTableProcessedTableManager get atividadeTableRefs {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.tipoAtividadeId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_atividadeTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$ChecklistTipoAtividadeTableTable,
          List<ChecklistTipoAtividadeTableData>>
      _checklistTipoAtividadeTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.checklistTipoAtividadeTable,
              aliasName: $_aliasNameGenerator(db.tipoAtividadeTable.uuid,
                  db.checklistTipoAtividadeTable.tipoAtividadeId));

  $$ChecklistTipoAtividadeTableTableProcessedTableManager
      get checklistTipoAtividadeTableRefs {
    final manager = $$ChecklistTipoAtividadeTableTableTableManager(
            $_db, $_db.checklistTipoAtividadeTable)
        .filter((f) => f.tipoAtividadeId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_checklistTipoAtividadeTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprTipoAtividadeTableTable,
      List<AprTipoAtividadeTableData>> _aprTipoAtividadeTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprTipoAtividadeTable,
          aliasName: $_aliasNameGenerator(db.tipoAtividadeTable.uuid,
              db.aprTipoAtividadeTable.tipoAtividadeId));

  $$AprTipoAtividadeTableTableProcessedTableManager
      get aprTipoAtividadeTableRefs {
    final manager = $$AprTipoAtividadeTableTableTableManager(
            $_db, $_db.aprTipoAtividadeTable)
        .filter((f) => f.tipoAtividadeId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprTipoAtividadeTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$TipoAtividadeTableTableFilterComposer
    extends Composer<_$AppDatabase, $TipoAtividadeTableTable> {
  $$TipoAtividadeTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<TipoAtividadeMobile, TipoAtividadeMobile,
          String>
      get tipoAtividadeMobile => $composableBuilder(
          column: $table.tipoAtividadeMobile,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  Expression<bool> atividadeTableRefs(
      Expression<bool> Function($$AtividadeTableTableFilterComposer f) f) {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.tipoAtividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> checklistTipoAtividadeTableRefs(
      Expression<bool> Function(
              $$ChecklistTipoAtividadeTableTableFilterComposer f)
          f) {
    final $$ChecklistTipoAtividadeTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistTipoAtividadeTable,
            getReferencedColumn: (t) => t.tipoAtividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistTipoAtividadeTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> aprTipoAtividadeTableRefs(
      Expression<bool> Function($$AprTipoAtividadeTableTableFilterComposer f)
          f) {
    final $$AprTipoAtividadeTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprTipoAtividadeTable,
            getReferencedColumn: (t) => t.tipoAtividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprTipoAtividadeTableTableFilterComposer(
                  $db: $db,
                  $table: $db.aprTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$TipoAtividadeTableTableOrderingComposer
    extends Composer<_$AppDatabase, $TipoAtividadeTableTable> {
  $$TipoAtividadeTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get tipoAtividadeMobile => $composableBuilder(
      column: $table.tipoAtividadeMobile,
      builder: (column) => ColumnOrderings(column));
}

class $$TipoAtividadeTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $TipoAtividadeTableTable> {
  $$TipoAtividadeTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumnWithTypeConverter<TipoAtividadeMobile, String>
      get tipoAtividadeMobile => $composableBuilder(
          column: $table.tipoAtividadeMobile, builder: (column) => column);

  Expression<T> atividadeTableRefs<T extends Object>(
      Expression<T> Function($$AtividadeTableTableAnnotationComposer a) f) {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.tipoAtividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> checklistTipoAtividadeTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistTipoAtividadeTableTableAnnotationComposer a)
          f) {
    final $$ChecklistTipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistTipoAtividadeTable,
            getReferencedColumn: (t) => t.tipoAtividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistTipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> aprTipoAtividadeTableRefs<T extends Object>(
      Expression<T> Function($$AprTipoAtividadeTableTableAnnotationComposer a)
          f) {
    final $$AprTipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprTipoAtividadeTable,
            getReferencedColumn: (t) => t.tipoAtividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprTipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$TipoAtividadeTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $TipoAtividadeTableTable,
    TipoAtividadeTableData,
    $$TipoAtividadeTableTableFilterComposer,
    $$TipoAtividadeTableTableOrderingComposer,
    $$TipoAtividadeTableTableAnnotationComposer,
    $$TipoAtividadeTableTableCreateCompanionBuilder,
    $$TipoAtividadeTableTableUpdateCompanionBuilder,
    (TipoAtividadeTableData, $$TipoAtividadeTableTableReferences),
    TipoAtividadeTableData,
    PrefetchHooks Function(
        {bool atividadeTableRefs,
        bool checklistTipoAtividadeTableRefs,
        bool aprTipoAtividadeTableRefs})> {
  $$TipoAtividadeTableTableTableManager(
      _$AppDatabase db, $TipoAtividadeTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$TipoAtividadeTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$TipoAtividadeTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$TipoAtividadeTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<TipoAtividadeMobile> tipoAtividadeMobile =
                const Value.absent(),
          }) =>
              TipoAtividadeTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            tipoAtividadeMobile: tipoAtividadeMobile,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            required TipoAtividadeMobile tipoAtividadeMobile,
          }) =>
              TipoAtividadeTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            tipoAtividadeMobile: tipoAtividadeMobile,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$TipoAtividadeTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {atividadeTableRefs = false,
              checklistTipoAtividadeTableRefs = false,
              aprTipoAtividadeTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (atividadeTableRefs) db.atividadeTable,
                if (checklistTipoAtividadeTableRefs)
                  db.checklistTipoAtividadeTable,
                if (aprTipoAtividadeTableRefs) db.aprTipoAtividadeTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (atividadeTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$TipoAtividadeTableTableReferences
                            ._atividadeTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$TipoAtividadeTableTableReferences(db, table, p0)
                                .atividadeTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.tipoAtividadeId == item.uuid),
                        typedResults: items),
                  if (checklistTipoAtividadeTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$TipoAtividadeTableTableReferences
                            ._checklistTipoAtividadeTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$TipoAtividadeTableTableReferences(db, table, p0)
                                .checklistTipoAtividadeTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.tipoAtividadeId == item.uuid),
                        typedResults: items),
                  if (aprTipoAtividadeTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$TipoAtividadeTableTableReferences
                            ._aprTipoAtividadeTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$TipoAtividadeTableTableReferences(db, table, p0)
                                .aprTipoAtividadeTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.tipoAtividadeId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$TipoAtividadeTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $TipoAtividadeTableTable,
    TipoAtividadeTableData,
    $$TipoAtividadeTableTableFilterComposer,
    $$TipoAtividadeTableTableOrderingComposer,
    $$TipoAtividadeTableTableAnnotationComposer,
    $$TipoAtividadeTableTableCreateCompanionBuilder,
    $$TipoAtividadeTableTableUpdateCompanionBuilder,
    (TipoAtividadeTableData, $$TipoAtividadeTableTableReferences),
    TipoAtividadeTableData,
    PrefetchHooks Function(
        {bool atividadeTableRefs,
        bool checklistTipoAtividadeTableRefs,
        bool aprTipoAtividadeTableRefs})>;
typedef $$GrupoDefeitoEquipamentoTableTableCreateCompanionBuilder
    = GrupoDefeitoEquipamentoTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  required String codigo,
});
typedef $$GrupoDefeitoEquipamentoTableTableUpdateCompanionBuilder
    = GrupoDefeitoEquipamentoTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<String> codigo,
});

final class $$GrupoDefeitoEquipamentoTableTableReferences
    extends BaseReferences<_$AppDatabase, $GrupoDefeitoEquipamentoTableTable,
        GrupoDefeitoEquipamentoTableData> {
  $$GrupoDefeitoEquipamentoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$EquipamentoTableTable, List<EquipamentoTableData>>
      _equipamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.equipamentoTable,
              aliasName: $_aliasNameGenerator(
                  db.grupoDefeitoEquipamentoTable.uuid,
                  db.equipamentoTable.grupoId));

  $$EquipamentoTableTableProcessedTableManager get equipamentoTableRefs {
    final manager =
        $$EquipamentoTableTableTableManager($_db, $_db.equipamentoTable)
            .filter((f) => f.grupoId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_equipamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$SubgrupoDefeitoEquipamentoTableTable,
          List<SubgrupoDefeitoEquipamentoTableData>>
      _subgrupoDefeitoEquipamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.subgrupoDefeitoEquipamentoTable,
              aliasName: $_aliasNameGenerator(
                  db.grupoDefeitoEquipamentoTable.uuid,
                  db.subgrupoDefeitoEquipamentoTable.grupoDefeitoId));

  $$SubgrupoDefeitoEquipamentoTableTableProcessedTableManager
      get subgrupoDefeitoEquipamentoTableRefs {
    final manager = $$SubgrupoDefeitoEquipamentoTableTableTableManager(
            $_db, $_db.subgrupoDefeitoEquipamentoTable)
        .filter((f) => f.grupoDefeitoId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_subgrupoDefeitoEquipamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$DefeitoTableTable, List<DefeitoTableData>>
      _defeitoTableRefsTable(_$AppDatabase db) => MultiTypedResultKey.fromTable(
          db.defeitoTable,
          aliasName: $_aliasNameGenerator(
              db.grupoDefeitoEquipamentoTable.uuid, db.defeitoTable.grupoId));

  $$DefeitoTableTableProcessedTableManager get defeitoTableRefs {
    final manager = $$DefeitoTableTableTableManager($_db, $_db.defeitoTable)
        .filter((f) => f.grupoId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_defeitoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$GrupoDefeitoEquipamentoTableTableFilterComposer
    extends Composer<_$AppDatabase, $GrupoDefeitoEquipamentoTableTable> {
  $$GrupoDefeitoEquipamentoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get codigo => $composableBuilder(
      column: $table.codigo, builder: (column) => ColumnFilters(column));

  Expression<bool> equipamentoTableRefs(
      Expression<bool> Function($$EquipamentoTableTableFilterComposer f) f) {
    final $$EquipamentoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.grupoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableFilterComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> subgrupoDefeitoEquipamentoTableRefs(
      Expression<bool> Function(
              $$SubgrupoDefeitoEquipamentoTableTableFilterComposer f)
          f) {
    final $$SubgrupoDefeitoEquipamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.subgrupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.grupoDefeitoId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$SubgrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.subgrupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> defeitoTableRefs(
      Expression<bool> Function($$DefeitoTableTableFilterComposer f) f) {
    final $$DefeitoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.grupoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableFilterComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$GrupoDefeitoEquipamentoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $GrupoDefeitoEquipamentoTableTable> {
  $$GrupoDefeitoEquipamentoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get codigo => $composableBuilder(
      column: $table.codigo, builder: (column) => ColumnOrderings(column));
}

class $$GrupoDefeitoEquipamentoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $GrupoDefeitoEquipamentoTableTable> {
  $$GrupoDefeitoEquipamentoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get codigo =>
      $composableBuilder(column: $table.codigo, builder: (column) => column);

  Expression<T> equipamentoTableRefs<T extends Object>(
      Expression<T> Function($$EquipamentoTableTableAnnotationComposer a) f) {
    final $$EquipamentoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.grupoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> subgrupoDefeitoEquipamentoTableRefs<T extends Object>(
      Expression<T> Function(
              $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer a)
          f) {
    final $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.subgrupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.grupoDefeitoId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.subgrupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> defeitoTableRefs<T extends Object>(
      Expression<T> Function($$DefeitoTableTableAnnotationComposer a) f) {
    final $$DefeitoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.grupoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$GrupoDefeitoEquipamentoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $GrupoDefeitoEquipamentoTableTable,
    GrupoDefeitoEquipamentoTableData,
    $$GrupoDefeitoEquipamentoTableTableFilterComposer,
    $$GrupoDefeitoEquipamentoTableTableOrderingComposer,
    $$GrupoDefeitoEquipamentoTableTableAnnotationComposer,
    $$GrupoDefeitoEquipamentoTableTableCreateCompanionBuilder,
    $$GrupoDefeitoEquipamentoTableTableUpdateCompanionBuilder,
    (
      GrupoDefeitoEquipamentoTableData,
      $$GrupoDefeitoEquipamentoTableTableReferences
    ),
    GrupoDefeitoEquipamentoTableData,
    PrefetchHooks Function(
        {bool equipamentoTableRefs,
        bool subgrupoDefeitoEquipamentoTableRefs,
        bool defeitoTableRefs})> {
  $$GrupoDefeitoEquipamentoTableTableTableManager(
      _$AppDatabase db, $GrupoDefeitoEquipamentoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$GrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$GrupoDefeitoEquipamentoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$GrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String> codigo = const Value.absent(),
          }) =>
              GrupoDefeitoEquipamentoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            codigo: codigo,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            required String codigo,
          }) =>
              GrupoDefeitoEquipamentoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            codigo: codigo,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$GrupoDefeitoEquipamentoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {equipamentoTableRefs = false,
              subgrupoDefeitoEquipamentoTableRefs = false,
              defeitoTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (equipamentoTableRefs) db.equipamentoTable,
                if (subgrupoDefeitoEquipamentoTableRefs)
                  db.subgrupoDefeitoEquipamentoTable,
                if (defeitoTableRefs) db.defeitoTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (equipamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable:
                            $$GrupoDefeitoEquipamentoTableTableReferences
                                ._equipamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$GrupoDefeitoEquipamentoTableTableReferences(
                                    db, table, p0)
                                .equipamentoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.grupoId == item.uuid),
                        typedResults: items),
                  if (subgrupoDefeitoEquipamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable:
                            $$GrupoDefeitoEquipamentoTableTableReferences
                                ._subgrupoDefeitoEquipamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$GrupoDefeitoEquipamentoTableTableReferences(
                                    db, table, p0)
                                .subgrupoDefeitoEquipamentoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.grupoDefeitoId == item.uuid),
                        typedResults: items),
                  if (defeitoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable:
                            $$GrupoDefeitoEquipamentoTableTableReferences
                                ._defeitoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$GrupoDefeitoEquipamentoTableTableReferences(
                                    db, table, p0)
                                .defeitoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.grupoId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$GrupoDefeitoEquipamentoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $GrupoDefeitoEquipamentoTableTable,
        GrupoDefeitoEquipamentoTableData,
        $$GrupoDefeitoEquipamentoTableTableFilterComposer,
        $$GrupoDefeitoEquipamentoTableTableOrderingComposer,
        $$GrupoDefeitoEquipamentoTableTableAnnotationComposer,
        $$GrupoDefeitoEquipamentoTableTableCreateCompanionBuilder,
        $$GrupoDefeitoEquipamentoTableTableUpdateCompanionBuilder,
        (
          GrupoDefeitoEquipamentoTableData,
          $$GrupoDefeitoEquipamentoTableTableReferences
        ),
        GrupoDefeitoEquipamentoTableData,
        PrefetchHooks Function(
            {bool equipamentoTableRefs,
            bool subgrupoDefeitoEquipamentoTableRefs,
            bool defeitoTableRefs})>;
typedef $$EquipamentoTableTableCreateCompanionBuilder
    = EquipamentoTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  required String descricao,
  required String subestacao,
  required String grupoId,
});
typedef $$EquipamentoTableTableUpdateCompanionBuilder
    = EquipamentoTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<String> descricao,
  Value<String> subestacao,
  Value<String> grupoId,
});

final class $$EquipamentoTableTableReferences extends BaseReferences<
    _$AppDatabase, $EquipamentoTableTable, EquipamentoTableData> {
  $$EquipamentoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $GrupoDefeitoEquipamentoTableTable _grupoIdTable(_$AppDatabase db) =>
      db.grupoDefeitoEquipamentoTable.createAlias($_aliasNameGenerator(
          db.equipamentoTable.grupoId, db.grupoDefeitoEquipamentoTable.uuid));

  $$GrupoDefeitoEquipamentoTableTableProcessedTableManager get grupoId {
    final manager = $$GrupoDefeitoEquipamentoTableTableTableManager(
            $_db, $_db.grupoDefeitoEquipamentoTable)
        .filter((f) => f.uuid($_item.grupoId));
    final item = $_typedResult.readTableOrNull(_grupoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$AtividadeTableTable, List<AtividadeTableData>>
      _atividadeTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.atividadeTable,
              aliasName: $_aliasNameGenerator(
                  db.equipamentoTable.uuid, db.atividadeTable.equipamentoId));

  $$AtividadeTableTableProcessedTableManager get atividadeTableRefs {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.equipamentoId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_atividadeTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AnomaliaTableTable, List<AnomaliaTableData>>
      _anomaliaTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.anomaliaTable,
              aliasName: $_aliasNameGenerator(
                  db.equipamentoTable.uuid, db.anomaliaTable.equipamentoId));

  $$AnomaliaTableTableProcessedTableManager get anomaliaTableRefs {
    final manager = $$AnomaliaTableTableTableManager($_db, $_db.anomaliaTable)
        .filter((f) => f.equipamentoId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_anomaliaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$EquipamentoTableTableFilterComposer
    extends Composer<_$AppDatabase, $EquipamentoTableTable> {
  $$EquipamentoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get subestacao => $composableBuilder(
      column: $table.subestacao, builder: (column) => ColumnFilters(column));

  $$GrupoDefeitoEquipamentoTableTableFilterComposer get grupoId {
    final $$GrupoDefeitoEquipamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<bool> atividadeTableRefs(
      Expression<bool> Function($$AtividadeTableTableFilterComposer f) f) {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.equipamentoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> anomaliaTableRefs(
      Expression<bool> Function($$AnomaliaTableTableFilterComposer f) f) {
    final $$AnomaliaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.equipamentoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableFilterComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$EquipamentoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $EquipamentoTableTable> {
  $$EquipamentoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get subestacao => $composableBuilder(
      column: $table.subestacao, builder: (column) => ColumnOrderings(column));

  $$GrupoDefeitoEquipamentoTableTableOrderingComposer get grupoId {
    final $$GrupoDefeitoEquipamentoTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$EquipamentoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $EquipamentoTableTable> {
  $$EquipamentoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  GeneratedColumn<String> get subestacao => $composableBuilder(
      column: $table.subestacao, builder: (column) => column);

  $$GrupoDefeitoEquipamentoTableTableAnnotationComposer get grupoId {
    final $$GrupoDefeitoEquipamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<T> atividadeTableRefs<T extends Object>(
      Expression<T> Function($$AtividadeTableTableAnnotationComposer a) f) {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.equipamentoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> anomaliaTableRefs<T extends Object>(
      Expression<T> Function($$AnomaliaTableTableAnnotationComposer a) f) {
    final $$AnomaliaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.equipamentoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$EquipamentoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $EquipamentoTableTable,
    EquipamentoTableData,
    $$EquipamentoTableTableFilterComposer,
    $$EquipamentoTableTableOrderingComposer,
    $$EquipamentoTableTableAnnotationComposer,
    $$EquipamentoTableTableCreateCompanionBuilder,
    $$EquipamentoTableTableUpdateCompanionBuilder,
    (EquipamentoTableData, $$EquipamentoTableTableReferences),
    EquipamentoTableData,
    PrefetchHooks Function(
        {bool grupoId, bool atividadeTableRefs, bool anomaliaTableRefs})> {
  $$EquipamentoTableTableTableManager(
      _$AppDatabase db, $EquipamentoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$EquipamentoTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$EquipamentoTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$EquipamentoTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String> descricao = const Value.absent(),
            Value<String> subestacao = const Value.absent(),
            Value<String> grupoId = const Value.absent(),
          }) =>
              EquipamentoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            descricao: descricao,
            subestacao: subestacao,
            grupoId: grupoId,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            required String descricao,
            required String subestacao,
            required String grupoId,
          }) =>
              EquipamentoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            descricao: descricao,
            subestacao: subestacao,
            grupoId: grupoId,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$EquipamentoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {grupoId = false,
              atividadeTableRefs = false,
              anomaliaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (atividadeTableRefs) db.atividadeTable,
                if (anomaliaTableRefs) db.anomaliaTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (grupoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.grupoId,
                    referencedTable:
                        $$EquipamentoTableTableReferences._grupoIdTable(db),
                    referencedColumn: $$EquipamentoTableTableReferences
                        ._grupoIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (atividadeTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$EquipamentoTableTableReferences
                            ._atividadeTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$EquipamentoTableTableReferences(db, table, p0)
                                .atividadeTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.equipamentoId == item.uuid),
                        typedResults: items),
                  if (anomaliaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$EquipamentoTableTableReferences
                            ._anomaliaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$EquipamentoTableTableReferences(db, table, p0)
                                .anomaliaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.equipamentoId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$EquipamentoTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $EquipamentoTableTable,
    EquipamentoTableData,
    $$EquipamentoTableTableFilterComposer,
    $$EquipamentoTableTableOrderingComposer,
    $$EquipamentoTableTableAnnotationComposer,
    $$EquipamentoTableTableCreateCompanionBuilder,
    $$EquipamentoTableTableUpdateCompanionBuilder,
    (EquipamentoTableData, $$EquipamentoTableTableReferences),
    EquipamentoTableData,
    PrefetchHooks Function(
        {bool grupoId, bool atividadeTableRefs, bool anomaliaTableRefs})>;
typedef $$AtividadeTableTableCreateCompanionBuilder = AtividadeTableCompanion
    Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String titulo,
  required String ordemServico,
  required String descricao,
  required String subestacao,
  required StatusAtividade status,
  required DateTime dataLimite,
  Value<DateTime?> dataInicio,
  Value<DateTime?> dataFim,
  required String equipamentoId,
  required String tipoAtividadeId,
});
typedef $$AtividadeTableTableUpdateCompanionBuilder = AtividadeTableCompanion
    Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> titulo,
  Value<String> ordemServico,
  Value<String> descricao,
  Value<String> subestacao,
  Value<StatusAtividade> status,
  Value<DateTime> dataLimite,
  Value<DateTime?> dataInicio,
  Value<DateTime?> dataFim,
  Value<String> equipamentoId,
  Value<String> tipoAtividadeId,
});

final class $$AtividadeTableTableReferences extends BaseReferences<
    _$AppDatabase, $AtividadeTableTable, AtividadeTableData> {
  $$AtividadeTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $EquipamentoTableTable _equipamentoIdTable(_$AppDatabase db) =>
      db.equipamentoTable.createAlias($_aliasNameGenerator(
          db.atividadeTable.equipamentoId, db.equipamentoTable.uuid));

  $$EquipamentoTableTableProcessedTableManager get equipamentoId {
    final manager =
        $$EquipamentoTableTableTableManager($_db, $_db.equipamentoTable)
            .filter((f) => f.uuid($_item.equipamentoId));
    final item = $_typedResult.readTableOrNull(_equipamentoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $TipoAtividadeTableTable _tipoAtividadeIdTable(_$AppDatabase db) =>
      db.tipoAtividadeTable.createAlias($_aliasNameGenerator(
          db.atividadeTable.tipoAtividadeId, db.tipoAtividadeTable.uuid));

  $$TipoAtividadeTableTableProcessedTableManager get tipoAtividadeId {
    final manager =
        $$TipoAtividadeTableTableTableManager($_db, $_db.tipoAtividadeTable)
            .filter((f) => f.uuid($_item.tipoAtividadeId));
    final item = $_typedResult.readTableOrNull(_tipoAtividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$AnomaliaTableTable, List<AnomaliaTableData>>
      _anomaliaTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.anomaliaTable,
              aliasName: $_aliasNameGenerator(
                  db.atividadeTable.uuid, db.anomaliaTable.atividadeId));

  $$AnomaliaTableTableProcessedTableManager get anomaliaTableRefs {
    final manager = $$AnomaliaTableTableTableManager($_db, $_db.anomaliaTable)
        .filter((f) => f.atividadeId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_anomaliaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$CorrecaoAnomaliaTableTable,
      List<CorrecaoAnomaliaTableData>> _correcaoAnomaliaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.correcaoAnomaliaTable,
          aliasName: $_aliasNameGenerator(
              db.atividadeTable.uuid, db.correcaoAnomaliaTable.atividadeId));

  $$CorrecaoAnomaliaTableTableProcessedTableManager
      get correcaoAnomaliaTableRefs {
    final manager = $$CorrecaoAnomaliaTableTableTableManager(
            $_db, $_db.correcaoAnomaliaTable)
        .filter((f) => f.atividadeId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_correcaoAnomaliaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$ChecklistPreenchidoTableTable,
      List<ChecklistPreenchidoTableData>> _checklistPreenchidoTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.checklistPreenchidoTable,
          aliasName: $_aliasNameGenerator(
              db.atividadeTable.uuid, db.checklistPreenchidoTable.atividadeId));

  $$ChecklistPreenchidoTableTableProcessedTableManager
      get checklistPreenchidoTableRefs {
    final manager = $$ChecklistPreenchidoTableTableTableManager(
            $_db, $_db.checklistPreenchidoTable)
        .filter((f) => f.atividadeId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_checklistPreenchidoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$FormularioMpbbTableTable,
      List<FormularioMpbbTableData>> _formularioMpbbTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.formularioMpbbTable,
          aliasName: $_aliasNameGenerator(
              db.atividadeTable.uuid, db.formularioMpbbTable.atividadeId));

  $$FormularioMpbbTableTableProcessedTableManager get formularioMpbbTableRefs {
    final manager =
        $$FormularioMpbbTableTableTableManager($_db, $_db.formularioMpbbTable)
            .filter((f) => f.atividadeId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_formularioMpbbTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$MpDjFormTableTable, List<MpDjFormTableData>>
      _mpDjFormTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.mpDjFormTable,
              aliasName: $_aliasNameGenerator(
                  db.atividadeTable.uuid, db.mpDjFormTable.atividadeId));

  $$MpDjFormTableTableProcessedTableManager get mpDjFormTableRefs {
    final manager = $$MpDjFormTableTableTableManager($_db, $_db.mpDjFormTable)
        .filter((f) => f.atividadeId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_mpDjFormTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprPreenchidaTableTable,
      List<AprPreenchidaTableData>> _aprPreenchidaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprPreenchidaTable,
          aliasName: $_aliasNameGenerator(
              db.atividadeTable.uuid, db.aprPreenchidaTable.atividadeId));

  $$AprPreenchidaTableTableProcessedTableManager get aprPreenchidaTableRefs {
    final manager =
        $$AprPreenchidaTableTableTableManager($_db, $_db.aprPreenchidaTable)
            .filter((f) => f.atividadeId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprPreenchidaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$AtividadeTableTableFilterComposer
    extends Composer<_$AppDatabase, $AtividadeTableTable> {
  $$AtividadeTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get titulo => $composableBuilder(
      column: $table.titulo, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get ordemServico => $composableBuilder(
      column: $table.ordemServico, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get subestacao => $composableBuilder(
      column: $table.subestacao, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<StatusAtividade, StatusAtividade, String>
      get status => $composableBuilder(
          column: $table.status,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<DateTime> get dataLimite => $composableBuilder(
      column: $table.dataLimite, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get dataInicio => $composableBuilder(
      column: $table.dataInicio, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get dataFim => $composableBuilder(
      column: $table.dataFim, builder: (column) => ColumnFilters(column));

  $$EquipamentoTableTableFilterComposer get equipamentoId {
    final $$EquipamentoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.equipamentoId,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableFilterComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TipoAtividadeTableTableFilterComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tipoAtividadeId,
        referencedTable: $db.tipoAtividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TipoAtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.tipoAtividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<bool> anomaliaTableRefs(
      Expression<bool> Function($$AnomaliaTableTableFilterComposer f) f) {
    final $$AnomaliaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.atividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableFilterComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> correcaoAnomaliaTableRefs(
      Expression<bool> Function($$CorrecaoAnomaliaTableTableFilterComposer f)
          f) {
    final $$CorrecaoAnomaliaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.correcaoAnomaliaTable,
            getReferencedColumn: (t) => t.atividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$CorrecaoAnomaliaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.correcaoAnomaliaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> checklistPreenchidoTableRefs(
      Expression<bool> Function($$ChecklistPreenchidoTableTableFilterComposer f)
          f) {
    final $$ChecklistPreenchidoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.atividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> formularioMpbbTableRefs(
      Expression<bool> Function($$FormularioMpbbTableTableFilterComposer f) f) {
    final $$FormularioMpbbTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.formularioMpbbTable,
        getReferencedColumn: (t) => t.atividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$FormularioMpbbTableTableFilterComposer(
              $db: $db,
              $table: $db.formularioMpbbTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> mpDjFormTableRefs(
      Expression<bool> Function($$MpDjFormTableTableFilterComposer f) f) {
    final $$MpDjFormTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.atividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> aprPreenchidaTableRefs(
      Expression<bool> Function($$AprPreenchidaTableTableFilterComposer f) f) {
    final $$AprPreenchidaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.atividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$AtividadeTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AtividadeTableTable> {
  $$AtividadeTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get titulo => $composableBuilder(
      column: $table.titulo, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get ordemServico => $composableBuilder(
      column: $table.ordemServico,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get subestacao => $composableBuilder(
      column: $table.subestacao, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get status => $composableBuilder(
      column: $table.status, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataLimite => $composableBuilder(
      column: $table.dataLimite, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataInicio => $composableBuilder(
      column: $table.dataInicio, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataFim => $composableBuilder(
      column: $table.dataFim, builder: (column) => ColumnOrderings(column));

  $$EquipamentoTableTableOrderingComposer get equipamentoId {
    final $$EquipamentoTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.equipamentoId,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableOrderingComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TipoAtividadeTableTableOrderingComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tipoAtividadeId,
        referencedTable: $db.tipoAtividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TipoAtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.tipoAtividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AtividadeTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AtividadeTableTable> {
  $$AtividadeTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get titulo =>
      $composableBuilder(column: $table.titulo, builder: (column) => column);

  GeneratedColumn<String> get ordemServico => $composableBuilder(
      column: $table.ordemServico, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  GeneratedColumn<String> get subestacao => $composableBuilder(
      column: $table.subestacao, builder: (column) => column);

  GeneratedColumnWithTypeConverter<StatusAtividade, String> get status =>
      $composableBuilder(column: $table.status, builder: (column) => column);

  GeneratedColumn<DateTime> get dataLimite => $composableBuilder(
      column: $table.dataLimite, builder: (column) => column);

  GeneratedColumn<DateTime> get dataInicio => $composableBuilder(
      column: $table.dataInicio, builder: (column) => column);

  GeneratedColumn<DateTime> get dataFim =>
      $composableBuilder(column: $table.dataFim, builder: (column) => column);

  $$EquipamentoTableTableAnnotationComposer get equipamentoId {
    final $$EquipamentoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.equipamentoId,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TipoAtividadeTableTableAnnotationComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.tipoAtividadeId,
            referencedTable: $db.tipoAtividadeTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$TipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.tipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<T> anomaliaTableRefs<T extends Object>(
      Expression<T> Function($$AnomaliaTableTableAnnotationComposer a) f) {
    final $$AnomaliaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.atividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> correcaoAnomaliaTableRefs<T extends Object>(
      Expression<T> Function($$CorrecaoAnomaliaTableTableAnnotationComposer a)
          f) {
    final $$CorrecaoAnomaliaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.correcaoAnomaliaTable,
            getReferencedColumn: (t) => t.atividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$CorrecaoAnomaliaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.correcaoAnomaliaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> checklistPreenchidoTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistPreenchidoTableTableAnnotationComposer a)
          f) {
    final $$ChecklistPreenchidoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.atividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> formularioMpbbTableRefs<T extends Object>(
      Expression<T> Function($$FormularioMpbbTableTableAnnotationComposer a)
          f) {
    final $$FormularioMpbbTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.formularioMpbbTable,
            getReferencedColumn: (t) => t.atividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$FormularioMpbbTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.formularioMpbbTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> mpDjFormTableRefs<T extends Object>(
      Expression<T> Function($$MpDjFormTableTableAnnotationComposer a) f) {
    final $$MpDjFormTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.atividadeId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableAnnotationComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> aprPreenchidaTableRefs<T extends Object>(
      Expression<T> Function($$AprPreenchidaTableTableAnnotationComposer a) f) {
    final $$AprPreenchidaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPreenchidaTable,
            getReferencedColumn: (t) => t.atividadeId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPreenchidaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPreenchidaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$AtividadeTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AtividadeTableTable,
    AtividadeTableData,
    $$AtividadeTableTableFilterComposer,
    $$AtividadeTableTableOrderingComposer,
    $$AtividadeTableTableAnnotationComposer,
    $$AtividadeTableTableCreateCompanionBuilder,
    $$AtividadeTableTableUpdateCompanionBuilder,
    (AtividadeTableData, $$AtividadeTableTableReferences),
    AtividadeTableData,
    PrefetchHooks Function(
        {bool equipamentoId,
        bool tipoAtividadeId,
        bool anomaliaTableRefs,
        bool correcaoAnomaliaTableRefs,
        bool checklistPreenchidoTableRefs,
        bool formularioMpbbTableRefs,
        bool mpDjFormTableRefs,
        bool aprPreenchidaTableRefs})> {
  $$AtividadeTableTableTableManager(
      _$AppDatabase db, $AtividadeTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AtividadeTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AtividadeTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AtividadeTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> titulo = const Value.absent(),
            Value<String> ordemServico = const Value.absent(),
            Value<String> descricao = const Value.absent(),
            Value<String> subestacao = const Value.absent(),
            Value<StatusAtividade> status = const Value.absent(),
            Value<DateTime> dataLimite = const Value.absent(),
            Value<DateTime?> dataInicio = const Value.absent(),
            Value<DateTime?> dataFim = const Value.absent(),
            Value<String> equipamentoId = const Value.absent(),
            Value<String> tipoAtividadeId = const Value.absent(),
          }) =>
              AtividadeTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            titulo: titulo,
            ordemServico: ordemServico,
            descricao: descricao,
            subestacao: subestacao,
            status: status,
            dataLimite: dataLimite,
            dataInicio: dataInicio,
            dataFim: dataFim,
            equipamentoId: equipamentoId,
            tipoAtividadeId: tipoAtividadeId,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String titulo,
            required String ordemServico,
            required String descricao,
            required String subestacao,
            required StatusAtividade status,
            required DateTime dataLimite,
            Value<DateTime?> dataInicio = const Value.absent(),
            Value<DateTime?> dataFim = const Value.absent(),
            required String equipamentoId,
            required String tipoAtividadeId,
          }) =>
              AtividadeTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            titulo: titulo,
            ordemServico: ordemServico,
            descricao: descricao,
            subestacao: subestacao,
            status: status,
            dataLimite: dataLimite,
            dataInicio: dataInicio,
            dataFim: dataFim,
            equipamentoId: equipamentoId,
            tipoAtividadeId: tipoAtividadeId,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AtividadeTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {equipamentoId = false,
              tipoAtividadeId = false,
              anomaliaTableRefs = false,
              correcaoAnomaliaTableRefs = false,
              checklistPreenchidoTableRefs = false,
              formularioMpbbTableRefs = false,
              mpDjFormTableRefs = false,
              aprPreenchidaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (anomaliaTableRefs) db.anomaliaTable,
                if (correcaoAnomaliaTableRefs) db.correcaoAnomaliaTable,
                if (checklistPreenchidoTableRefs) db.checklistPreenchidoTable,
                if (formularioMpbbTableRefs) db.formularioMpbbTable,
                if (mpDjFormTableRefs) db.mpDjFormTable,
                if (aprPreenchidaTableRefs) db.aprPreenchidaTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (equipamentoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.equipamentoId,
                    referencedTable:
                        $$AtividadeTableTableReferences._equipamentoIdTable(db),
                    referencedColumn: $$AtividadeTableTableReferences
                        ._equipamentoIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (tipoAtividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.tipoAtividadeId,
                    referencedTable: $$AtividadeTableTableReferences
                        ._tipoAtividadeIdTable(db),
                    referencedColumn: $$AtividadeTableTableReferences
                        ._tipoAtividadeIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (anomaliaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AtividadeTableTableReferences
                            ._anomaliaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AtividadeTableTableReferences(db, table, p0)
                                .anomaliaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.atividadeId == item.uuid),
                        typedResults: items),
                  if (correcaoAnomaliaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AtividadeTableTableReferences
                            ._correcaoAnomaliaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AtividadeTableTableReferences(db, table, p0)
                                .correcaoAnomaliaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.atividadeId == item.uuid),
                        typedResults: items),
                  if (checklistPreenchidoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AtividadeTableTableReferences
                            ._checklistPreenchidoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AtividadeTableTableReferences(db, table, p0)
                                .checklistPreenchidoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.atividadeId == item.uuid),
                        typedResults: items),
                  if (formularioMpbbTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AtividadeTableTableReferences
                            ._formularioMpbbTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AtividadeTableTableReferences(db, table, p0)
                                .formularioMpbbTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.atividadeId == item.uuid),
                        typedResults: items),
                  if (mpDjFormTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AtividadeTableTableReferences
                            ._mpDjFormTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AtividadeTableTableReferences(db, table, p0)
                                .mpDjFormTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.atividadeId == item.uuid),
                        typedResults: items),
                  if (aprPreenchidaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AtividadeTableTableReferences
                            ._aprPreenchidaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AtividadeTableTableReferences(db, table, p0)
                                .aprPreenchidaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.atividadeId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$AtividadeTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AtividadeTableTable,
    AtividadeTableData,
    $$AtividadeTableTableFilterComposer,
    $$AtividadeTableTableOrderingComposer,
    $$AtividadeTableTableAnnotationComposer,
    $$AtividadeTableTableCreateCompanionBuilder,
    $$AtividadeTableTableUpdateCompanionBuilder,
    (AtividadeTableData, $$AtividadeTableTableReferences),
    AtividadeTableData,
    PrefetchHooks Function(
        {bool equipamentoId,
        bool tipoAtividadeId,
        bool anomaliaTableRefs,
        bool correcaoAnomaliaTableRefs,
        bool checklistPreenchidoTableRefs,
        bool formularioMpbbTableRefs,
        bool mpDjFormTableRefs,
        bool aprPreenchidaTableRefs})>;
typedef $$SubgrupoDefeitoEquipamentoTableTableCreateCompanionBuilder
    = SubgrupoDefeitoEquipamentoTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  required String grupoDefeitoId,
});
typedef $$SubgrupoDefeitoEquipamentoTableTableUpdateCompanionBuilder
    = SubgrupoDefeitoEquipamentoTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<String> grupoDefeitoId,
});

final class $$SubgrupoDefeitoEquipamentoTableTableReferences
    extends BaseReferences<_$AppDatabase, $SubgrupoDefeitoEquipamentoTableTable,
        SubgrupoDefeitoEquipamentoTableData> {
  $$SubgrupoDefeitoEquipamentoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $GrupoDefeitoEquipamentoTableTable _grupoDefeitoIdTable(
          _$AppDatabase db) =>
      db.grupoDefeitoEquipamentoTable.createAlias($_aliasNameGenerator(
          db.subgrupoDefeitoEquipamentoTable.grupoDefeitoId,
          db.grupoDefeitoEquipamentoTable.uuid));

  $$GrupoDefeitoEquipamentoTableTableProcessedTableManager get grupoDefeitoId {
    final manager = $$GrupoDefeitoEquipamentoTableTableTableManager(
            $_db, $_db.grupoDefeitoEquipamentoTable)
        .filter((f) => f.uuid($_item.grupoDefeitoId));
    final item = $_typedResult.readTableOrNull(_grupoDefeitoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$DefeitoTableTable, List<DefeitoTableData>>
      _defeitoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.defeitoTable,
              aliasName: $_aliasNameGenerator(
                  db.subgrupoDefeitoEquipamentoTable.uuid,
                  db.defeitoTable.subgrupoId));

  $$DefeitoTableTableProcessedTableManager get defeitoTableRefs {
    final manager = $$DefeitoTableTableTableManager($_db, $_db.defeitoTable)
        .filter((f) => f.subgrupoId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_defeitoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$SubgrupoDefeitoEquipamentoTableTableFilterComposer
    extends Composer<_$AppDatabase, $SubgrupoDefeitoEquipamentoTableTable> {
  $$SubgrupoDefeitoEquipamentoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  $$GrupoDefeitoEquipamentoTableTableFilterComposer get grupoDefeitoId {
    final $$GrupoDefeitoEquipamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoDefeitoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<bool> defeitoTableRefs(
      Expression<bool> Function($$DefeitoTableTableFilterComposer f) f) {
    final $$DefeitoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.subgrupoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableFilterComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $SubgrupoDefeitoEquipamentoTableTable> {
  $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  $$GrupoDefeitoEquipamentoTableTableOrderingComposer get grupoDefeitoId {
    final $$GrupoDefeitoEquipamentoTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoDefeitoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $SubgrupoDefeitoEquipamentoTableTable> {
  $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  $$GrupoDefeitoEquipamentoTableTableAnnotationComposer get grupoDefeitoId {
    final $$GrupoDefeitoEquipamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoDefeitoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<T> defeitoTableRefs<T extends Object>(
      Expression<T> Function($$DefeitoTableTableAnnotationComposer a) f) {
    final $$DefeitoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.subgrupoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$SubgrupoDefeitoEquipamentoTableTableTableManager
    extends RootTableManager<
        _$AppDatabase,
        $SubgrupoDefeitoEquipamentoTableTable,
        SubgrupoDefeitoEquipamentoTableData,
        $$SubgrupoDefeitoEquipamentoTableTableFilterComposer,
        $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer,
        $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer,
        $$SubgrupoDefeitoEquipamentoTableTableCreateCompanionBuilder,
        $$SubgrupoDefeitoEquipamentoTableTableUpdateCompanionBuilder,
        (
          SubgrupoDefeitoEquipamentoTableData,
          $$SubgrupoDefeitoEquipamentoTableTableReferences
        ),
        SubgrupoDefeitoEquipamentoTableData,
        PrefetchHooks Function({bool grupoDefeitoId, bool defeitoTableRefs})> {
  $$SubgrupoDefeitoEquipamentoTableTableTableManager(
      _$AppDatabase db, $SubgrupoDefeitoEquipamentoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$SubgrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String> grupoDefeitoId = const Value.absent(),
          }) =>
              SubgrupoDefeitoEquipamentoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            grupoDefeitoId: grupoDefeitoId,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            required String grupoDefeitoId,
          }) =>
              SubgrupoDefeitoEquipamentoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            grupoDefeitoId: grupoDefeitoId,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$SubgrupoDefeitoEquipamentoTableTableReferences(
                        db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {grupoDefeitoId = false, defeitoTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [if (defeitoTableRefs) db.defeitoTable],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (grupoDefeitoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.grupoDefeitoId,
                    referencedTable:
                        $$SubgrupoDefeitoEquipamentoTableTableReferences
                            ._grupoDefeitoIdTable(db),
                    referencedColumn:
                        $$SubgrupoDefeitoEquipamentoTableTableReferences
                            ._grupoDefeitoIdTable(db)
                            .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (defeitoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable:
                            $$SubgrupoDefeitoEquipamentoTableTableReferences
                                ._defeitoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$SubgrupoDefeitoEquipamentoTableTableReferences(
                                    db, table, p0)
                                .defeitoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.subgrupoId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$SubgrupoDefeitoEquipamentoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $SubgrupoDefeitoEquipamentoTableTable,
        SubgrupoDefeitoEquipamentoTableData,
        $$SubgrupoDefeitoEquipamentoTableTableFilterComposer,
        $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer,
        $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer,
        $$SubgrupoDefeitoEquipamentoTableTableCreateCompanionBuilder,
        $$SubgrupoDefeitoEquipamentoTableTableUpdateCompanionBuilder,
        (
          SubgrupoDefeitoEquipamentoTableData,
          $$SubgrupoDefeitoEquipamentoTableTableReferences
        ),
        SubgrupoDefeitoEquipamentoTableData,
        PrefetchHooks Function({bool grupoDefeitoId, bool defeitoTableRefs})>;
typedef $$DefeitoTableTableCreateCompanionBuilder = DefeitoTableCompanion
    Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String grupoId,
  required String subgrupoId,
  required String codigoSap,
  required String descricao,
  required PrioridadeDefeito prioridade,
});
typedef $$DefeitoTableTableUpdateCompanionBuilder = DefeitoTableCompanion
    Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> grupoId,
  Value<String> subgrupoId,
  Value<String> codigoSap,
  Value<String> descricao,
  Value<PrioridadeDefeito> prioridade,
});

final class $$DefeitoTableTableReferences extends BaseReferences<_$AppDatabase,
    $DefeitoTableTable, DefeitoTableData> {
  $$DefeitoTableTableReferences(super.$_db, super.$_table, super.$_typedResult);

  static $GrupoDefeitoEquipamentoTableTable _grupoIdTable(_$AppDatabase db) =>
      db.grupoDefeitoEquipamentoTable.createAlias($_aliasNameGenerator(
          db.defeitoTable.grupoId, db.grupoDefeitoEquipamentoTable.uuid));

  $$GrupoDefeitoEquipamentoTableTableProcessedTableManager get grupoId {
    final manager = $$GrupoDefeitoEquipamentoTableTableTableManager(
            $_db, $_db.grupoDefeitoEquipamentoTable)
        .filter((f) => f.uuid($_item.grupoId));
    final item = $_typedResult.readTableOrNull(_grupoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $SubgrupoDefeitoEquipamentoTableTable _subgrupoIdTable(
          _$AppDatabase db) =>
      db.subgrupoDefeitoEquipamentoTable.createAlias($_aliasNameGenerator(
          db.defeitoTable.subgrupoId, db.subgrupoDefeitoEquipamentoTable.uuid));

  $$SubgrupoDefeitoEquipamentoTableTableProcessedTableManager get subgrupoId {
    final manager = $$SubgrupoDefeitoEquipamentoTableTableTableManager(
            $_db, $_db.subgrupoDefeitoEquipamentoTable)
        .filter((f) => f.uuid($_item.subgrupoId));
    final item = $_typedResult.readTableOrNull(_subgrupoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$AnomaliaTableTable, List<AnomaliaTableData>>
      _anomaliaTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.anomaliaTable,
              aliasName: $_aliasNameGenerator(
                  db.defeitoTable.uuid, db.anomaliaTable.defeitoId));

  $$AnomaliaTableTableProcessedTableManager get anomaliaTableRefs {
    final manager = $$AnomaliaTableTableTableManager($_db, $_db.anomaliaTable)
        .filter((f) => f.defeitoId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_anomaliaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$DefeitoTableTableFilterComposer
    extends Composer<_$AppDatabase, $DefeitoTableTable> {
  $$DefeitoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get codigoSap => $composableBuilder(
      column: $table.codigoSap, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<PrioridadeDefeito, PrioridadeDefeito, String>
      get prioridade => $composableBuilder(
          column: $table.prioridade,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  $$GrupoDefeitoEquipamentoTableTableFilterComposer get grupoId {
    final $$GrupoDefeitoEquipamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$SubgrupoDefeitoEquipamentoTableTableFilterComposer get subgrupoId {
    final $$SubgrupoDefeitoEquipamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.subgrupoId,
            referencedTable: $db.subgrupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$SubgrupoDefeitoEquipamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.subgrupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<bool> anomaliaTableRefs(
      Expression<bool> Function($$AnomaliaTableTableFilterComposer f) f) {
    final $$AnomaliaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.defeitoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableFilterComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$DefeitoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $DefeitoTableTable> {
  $$DefeitoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get codigoSap => $composableBuilder(
      column: $table.codigoSap, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get prioridade => $composableBuilder(
      column: $table.prioridade, builder: (column) => ColumnOrderings(column));

  $$GrupoDefeitoEquipamentoTableTableOrderingComposer get grupoId {
    final $$GrupoDefeitoEquipamentoTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer get subgrupoId {
    final $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.subgrupoId,
            referencedTable: $db.subgrupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$SubgrupoDefeitoEquipamentoTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.subgrupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$DefeitoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $DefeitoTableTable> {
  $$DefeitoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get codigoSap =>
      $composableBuilder(column: $table.codigoSap, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  GeneratedColumnWithTypeConverter<PrioridadeDefeito, String> get prioridade =>
      $composableBuilder(
          column: $table.prioridade, builder: (column) => column);

  $$GrupoDefeitoEquipamentoTableTableAnnotationComposer get grupoId {
    final $$GrupoDefeitoEquipamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.grupoId,
            referencedTable: $db.grupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$GrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.grupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer get subgrupoId {
    final $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.subgrupoId,
            referencedTable: $db.subgrupoDefeitoEquipamentoTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$SubgrupoDefeitoEquipamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.subgrupoDefeitoEquipamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  Expression<T> anomaliaTableRefs<T extends Object>(
      Expression<T> Function($$AnomaliaTableTableAnnotationComposer a) f) {
    final $$AnomaliaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.defeitoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$DefeitoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $DefeitoTableTable,
    DefeitoTableData,
    $$DefeitoTableTableFilterComposer,
    $$DefeitoTableTableOrderingComposer,
    $$DefeitoTableTableAnnotationComposer,
    $$DefeitoTableTableCreateCompanionBuilder,
    $$DefeitoTableTableUpdateCompanionBuilder,
    (DefeitoTableData, $$DefeitoTableTableReferences),
    DefeitoTableData,
    PrefetchHooks Function(
        {bool grupoId, bool subgrupoId, bool anomaliaTableRefs})> {
  $$DefeitoTableTableTableManager(_$AppDatabase db, $DefeitoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$DefeitoTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$DefeitoTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$DefeitoTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> grupoId = const Value.absent(),
            Value<String> subgrupoId = const Value.absent(),
            Value<String> codigoSap = const Value.absent(),
            Value<String> descricao = const Value.absent(),
            Value<PrioridadeDefeito> prioridade = const Value.absent(),
          }) =>
              DefeitoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            grupoId: grupoId,
            subgrupoId: subgrupoId,
            codigoSap: codigoSap,
            descricao: descricao,
            prioridade: prioridade,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String grupoId,
            required String subgrupoId,
            required String codigoSap,
            required String descricao,
            required PrioridadeDefeito prioridade,
          }) =>
              DefeitoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            grupoId: grupoId,
            subgrupoId: subgrupoId,
            codigoSap: codigoSap,
            descricao: descricao,
            prioridade: prioridade,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$DefeitoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {grupoId = false,
              subgrupoId = false,
              anomaliaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (anomaliaTableRefs) db.anomaliaTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (grupoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.grupoId,
                    referencedTable:
                        $$DefeitoTableTableReferences._grupoIdTable(db),
                    referencedColumn:
                        $$DefeitoTableTableReferences._grupoIdTable(db).uuid,
                  ) as T;
                }
                if (subgrupoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.subgrupoId,
                    referencedTable:
                        $$DefeitoTableTableReferences._subgrupoIdTable(db),
                    referencedColumn:
                        $$DefeitoTableTableReferences._subgrupoIdTable(db).uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (anomaliaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$DefeitoTableTableReferences
                            ._anomaliaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$DefeitoTableTableReferences(db, table, p0)
                                .anomaliaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.defeitoId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$DefeitoTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $DefeitoTableTable,
    DefeitoTableData,
    $$DefeitoTableTableFilterComposer,
    $$DefeitoTableTableOrderingComposer,
    $$DefeitoTableTableAnnotationComposer,
    $$DefeitoTableTableCreateCompanionBuilder,
    $$DefeitoTableTableUpdateCompanionBuilder,
    (DefeitoTableData, $$DefeitoTableTableReferences),
    DefeitoTableData,
    PrefetchHooks Function(
        {bool grupoId, bool subgrupoId, bool anomaliaTableRefs})>;
typedef $$ChecklistPerguntaTableTableCreateCompanionBuilder
    = ChecklistPerguntaTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String pergunta,
});
typedef $$ChecklistPerguntaTableTableUpdateCompanionBuilder
    = ChecklistPerguntaTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> pergunta,
});

final class $$ChecklistPerguntaTableTableReferences extends BaseReferences<
    _$AppDatabase, $ChecklistPerguntaTableTable, ChecklistPerguntaTableData> {
  $$ChecklistPerguntaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$AnomaliaTableTable, List<AnomaliaTableData>>
      _anomaliaTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.anomaliaTable,
              aliasName: $_aliasNameGenerator(
                  db.checklistPerguntaTable.uuid, db.anomaliaTable.perguntaId));

  $$AnomaliaTableTableProcessedTableManager get anomaliaTableRefs {
    final manager = $$AnomaliaTableTableTableManager($_db, $_db.anomaliaTable)
        .filter((f) => f.perguntaId.uuid($_item.uuid));

    final cache = $_typedResult.readTableOrNull(_anomaliaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$ChecklistPerguntaRelacionamentoTableTable,
          List<ChecklistPerguntaRelacionamentoTableData>>
      _checklistPerguntaRelacionamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.checklistPerguntaRelacionamentoTable,
              aliasName: $_aliasNameGenerator(db.checklistPerguntaTable.uuid,
                  db.checklistPerguntaRelacionamentoTable.perguntaId));

  $$ChecklistPerguntaRelacionamentoTableTableProcessedTableManager
      get checklistPerguntaRelacionamentoTableRefs {
    final manager = $$ChecklistPerguntaRelacionamentoTableTableTableManager(
            $_db, $_db.checklistPerguntaRelacionamentoTable)
        .filter((f) => f.perguntaId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_checklistPerguntaRelacionamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$ChecklistRespostaTableTable,
      List<ChecklistRespostaTableData>> _checklistRespostaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.checklistRespostaTable,
          aliasName: $_aliasNameGenerator(db.checklistPerguntaTable.uuid,
              db.checklistRespostaTable.perguntaId));

  $$ChecklistRespostaTableTableProcessedTableManager
      get checklistRespostaTableRefs {
    final manager = $$ChecklistRespostaTableTableTableManager(
            $_db, $_db.checklistRespostaTable)
        .filter((f) => f.perguntaId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_checklistRespostaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$ChecklistPerguntaTableTableFilterComposer
    extends Composer<_$AppDatabase, $ChecklistPerguntaTableTable> {
  $$ChecklistPerguntaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get pergunta => $composableBuilder(
      column: $table.pergunta, builder: (column) => ColumnFilters(column));

  Expression<bool> anomaliaTableRefs(
      Expression<bool> Function($$AnomaliaTableTableFilterComposer f) f) {
    final $$AnomaliaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.perguntaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableFilterComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> checklistPerguntaRelacionamentoTableRefs(
      Expression<bool> Function(
              $$ChecklistPerguntaRelacionamentoTableTableFilterComposer f)
          f) {
    final $$ChecklistPerguntaRelacionamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.perguntaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaRelacionamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> checklistRespostaTableRefs(
      Expression<bool> Function($$ChecklistRespostaTableTableFilterComposer f)
          f) {
    final $$ChecklistRespostaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistRespostaTable,
            getReferencedColumn: (t) => t.perguntaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistRespostaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistRespostaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$ChecklistPerguntaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $ChecklistPerguntaTableTable> {
  $$ChecklistPerguntaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get pergunta => $composableBuilder(
      column: $table.pergunta, builder: (column) => ColumnOrderings(column));
}

class $$ChecklistPerguntaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $ChecklistPerguntaTableTable> {
  $$ChecklistPerguntaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get pergunta =>
      $composableBuilder(column: $table.pergunta, builder: (column) => column);

  Expression<T> anomaliaTableRefs<T extends Object>(
      Expression<T> Function($$AnomaliaTableTableAnnotationComposer a) f) {
    final $$AnomaliaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.perguntaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> checklistPerguntaRelacionamentoTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer a)
          f) {
    final $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer
        composer = $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.perguntaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> checklistRespostaTableRefs<T extends Object>(
      Expression<T> Function($$ChecklistRespostaTableTableAnnotationComposer a)
          f) {
    final $$ChecklistRespostaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistRespostaTable,
            getReferencedColumn: (t) => t.perguntaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistRespostaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistRespostaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$ChecklistPerguntaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $ChecklistPerguntaTableTable,
    ChecklistPerguntaTableData,
    $$ChecklistPerguntaTableTableFilterComposer,
    $$ChecklistPerguntaTableTableOrderingComposer,
    $$ChecklistPerguntaTableTableAnnotationComposer,
    $$ChecklistPerguntaTableTableCreateCompanionBuilder,
    $$ChecklistPerguntaTableTableUpdateCompanionBuilder,
    (ChecklistPerguntaTableData, $$ChecklistPerguntaTableTableReferences),
    ChecklistPerguntaTableData,
    PrefetchHooks Function(
        {bool anomaliaTableRefs,
        bool checklistPerguntaRelacionamentoTableRefs,
        bool checklistRespostaTableRefs})> {
  $$ChecklistPerguntaTableTableTableManager(
      _$AppDatabase db, $ChecklistPerguntaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChecklistPerguntaTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$ChecklistPerguntaTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChecklistPerguntaTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> pergunta = const Value.absent(),
          }) =>
              ChecklistPerguntaTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            pergunta: pergunta,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String pergunta,
          }) =>
              ChecklistPerguntaTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            pergunta: pergunta,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$ChecklistPerguntaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {anomaliaTableRefs = false,
              checklistPerguntaRelacionamentoTableRefs = false,
              checklistRespostaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (anomaliaTableRefs) db.anomaliaTable,
                if (checklistPerguntaRelacionamentoTableRefs)
                  db.checklistPerguntaRelacionamentoTable,
                if (checklistRespostaTableRefs) db.checklistRespostaTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (anomaliaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$ChecklistPerguntaTableTableReferences
                            ._anomaliaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistPerguntaTableTableReferences(
                                    db, table, p0)
                                .anomaliaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.perguntaId == item.uuid),
                        typedResults: items),
                  if (checklistPerguntaRelacionamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$ChecklistPerguntaTableTableReferences
                            ._checklistPerguntaRelacionamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistPerguntaTableTableReferences(
                                    db, table, p0)
                                .checklistPerguntaRelacionamentoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.perguntaId == item.uuid),
                        typedResults: items),
                  if (checklistRespostaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$ChecklistPerguntaTableTableReferences
                            ._checklistRespostaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistPerguntaTableTableReferences(
                                    db, table, p0)
                                .checklistRespostaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.perguntaId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$ChecklistPerguntaTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $ChecklistPerguntaTableTable,
        ChecklistPerguntaTableData,
        $$ChecklistPerguntaTableTableFilterComposer,
        $$ChecklistPerguntaTableTableOrderingComposer,
        $$ChecklistPerguntaTableTableAnnotationComposer,
        $$ChecklistPerguntaTableTableCreateCompanionBuilder,
        $$ChecklistPerguntaTableTableUpdateCompanionBuilder,
        (ChecklistPerguntaTableData, $$ChecklistPerguntaTableTableReferences),
        ChecklistPerguntaTableData,
        PrefetchHooks Function(
            {bool anomaliaTableRefs,
            bool checklistPerguntaRelacionamentoTableRefs,
            bool checklistRespostaTableRefs})>;
typedef $$AnomaliaTableTableCreateCompanionBuilder = AnomaliaTableCompanion
    Function({
  Value<int> id,
  Value<String?> perguntaId,
  required String atividadeId,
  required String equipamentoId,
  required String defeitoId,
  required FaseAnomalia fase,
  required LadoAnomalia lado,
  Value<double?> delta,
  Value<String?> observacao,
  Value<Uint8List?> foto,
  Value<bool> corrigida,
});
typedef $$AnomaliaTableTableUpdateCompanionBuilder = AnomaliaTableCompanion
    Function({
  Value<int> id,
  Value<String?> perguntaId,
  Value<String> atividadeId,
  Value<String> equipamentoId,
  Value<String> defeitoId,
  Value<FaseAnomalia> fase,
  Value<LadoAnomalia> lado,
  Value<double?> delta,
  Value<String?> observacao,
  Value<Uint8List?> foto,
  Value<bool> corrigida,
});

final class $$AnomaliaTableTableReferences extends BaseReferences<_$AppDatabase,
    $AnomaliaTableTable, AnomaliaTableData> {
  $$AnomaliaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $ChecklistPerguntaTableTable _perguntaIdTable(_$AppDatabase db) =>
      db.checklistPerguntaTable.createAlias($_aliasNameGenerator(
          db.anomaliaTable.perguntaId, db.checklistPerguntaTable.uuid));

  $$ChecklistPerguntaTableTableProcessedTableManager? get perguntaId {
    if ($_item.perguntaId == null) return null;
    final manager = $$ChecklistPerguntaTableTableTableManager(
            $_db, $_db.checklistPerguntaTable)
        .filter((f) => f.uuid($_item.perguntaId!));
    final item = $_typedResult.readTableOrNull(_perguntaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $AtividadeTableTable _atividadeIdTable(_$AppDatabase db) =>
      db.atividadeTable.createAlias($_aliasNameGenerator(
          db.anomaliaTable.atividadeId, db.atividadeTable.uuid));

  $$AtividadeTableTableProcessedTableManager get atividadeId {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.uuid($_item.atividadeId));
    final item = $_typedResult.readTableOrNull(_atividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $EquipamentoTableTable _equipamentoIdTable(_$AppDatabase db) =>
      db.equipamentoTable.createAlias($_aliasNameGenerator(
          db.anomaliaTable.equipamentoId, db.equipamentoTable.uuid));

  $$EquipamentoTableTableProcessedTableManager get equipamentoId {
    final manager =
        $$EquipamentoTableTableTableManager($_db, $_db.equipamentoTable)
            .filter((f) => f.uuid($_item.equipamentoId));
    final item = $_typedResult.readTableOrNull(_equipamentoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $DefeitoTableTable _defeitoIdTable(_$AppDatabase db) =>
      db.defeitoTable.createAlias($_aliasNameGenerator(
          db.anomaliaTable.defeitoId, db.defeitoTable.uuid));

  $$DefeitoTableTableProcessedTableManager get defeitoId {
    final manager = $$DefeitoTableTableTableManager($_db, $_db.defeitoTable)
        .filter((f) => f.uuid($_item.defeitoId));
    final item = $_typedResult.readTableOrNull(_defeitoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$CorrecaoAnomaliaTableTable,
      List<CorrecaoAnomaliaTableData>> _correcaoAnomaliaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.correcaoAnomaliaTable,
          aliasName: $_aliasNameGenerator(
              db.anomaliaTable.id, db.correcaoAnomaliaTable.anomaliaId));

  $$CorrecaoAnomaliaTableTableProcessedTableManager
      get correcaoAnomaliaTableRefs {
    final manager = $$CorrecaoAnomaliaTableTableTableManager(
            $_db, $_db.correcaoAnomaliaTable)
        .filter((f) => f.anomaliaId.id($_item.id));

    final cache =
        $_typedResult.readTableOrNull(_correcaoAnomaliaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$AnomaliaTableTableFilterComposer
    extends Composer<_$AppDatabase, $AnomaliaTableTable> {
  $$AnomaliaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<FaseAnomalia, FaseAnomalia, String> get fase =>
      $composableBuilder(
          column: $table.fase,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnWithTypeConverterFilters<LadoAnomalia, LadoAnomalia, String> get lado =>
      $composableBuilder(
          column: $table.lado,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<double> get delta => $composableBuilder(
      column: $table.delta, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get observacao => $composableBuilder(
      column: $table.observacao, builder: (column) => ColumnFilters(column));

  ColumnFilters<Uint8List> get foto => $composableBuilder(
      column: $table.foto, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get corrigida => $composableBuilder(
      column: $table.corrigida, builder: (column) => ColumnFilters(column));

  $$ChecklistPerguntaTableTableFilterComposer get perguntaId {
    final $$ChecklistPerguntaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$AtividadeTableTableFilterComposer get atividadeId {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$EquipamentoTableTableFilterComposer get equipamentoId {
    final $$EquipamentoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.equipamentoId,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableFilterComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$DefeitoTableTableFilterComposer get defeitoId {
    final $$DefeitoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.defeitoId,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableFilterComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<bool> correcaoAnomaliaTableRefs(
      Expression<bool> Function($$CorrecaoAnomaliaTableTableFilterComposer f)
          f) {
    final $$CorrecaoAnomaliaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.correcaoAnomaliaTable,
            getReferencedColumn: (t) => t.anomaliaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$CorrecaoAnomaliaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.correcaoAnomaliaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$AnomaliaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AnomaliaTableTable> {
  $$AnomaliaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get fase => $composableBuilder(
      column: $table.fase, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get lado => $composableBuilder(
      column: $table.lado, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get delta => $composableBuilder(
      column: $table.delta, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get observacao => $composableBuilder(
      column: $table.observacao, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<Uint8List> get foto => $composableBuilder(
      column: $table.foto, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get corrigida => $composableBuilder(
      column: $table.corrigida, builder: (column) => ColumnOrderings(column));

  $$ChecklistPerguntaTableTableOrderingComposer get perguntaId {
    final $$ChecklistPerguntaTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$AtividadeTableTableOrderingComposer get atividadeId {
    final $$AtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$EquipamentoTableTableOrderingComposer get equipamentoId {
    final $$EquipamentoTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.equipamentoId,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableOrderingComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$DefeitoTableTableOrderingComposer get defeitoId {
    final $$DefeitoTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.defeitoId,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableOrderingComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AnomaliaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AnomaliaTableTable> {
  $$AnomaliaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumnWithTypeConverter<FaseAnomalia, String> get fase =>
      $composableBuilder(column: $table.fase, builder: (column) => column);

  GeneratedColumnWithTypeConverter<LadoAnomalia, String> get lado =>
      $composableBuilder(column: $table.lado, builder: (column) => column);

  GeneratedColumn<double> get delta =>
      $composableBuilder(column: $table.delta, builder: (column) => column);

  GeneratedColumn<String> get observacao => $composableBuilder(
      column: $table.observacao, builder: (column) => column);

  GeneratedColumn<Uint8List> get foto =>
      $composableBuilder(column: $table.foto, builder: (column) => column);

  GeneratedColumn<bool> get corrigida =>
      $composableBuilder(column: $table.corrigida, builder: (column) => column);

  $$ChecklistPerguntaTableTableAnnotationComposer get perguntaId {
    final $$ChecklistPerguntaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$AtividadeTableTableAnnotationComposer get atividadeId {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$EquipamentoTableTableAnnotationComposer get equipamentoId {
    final $$EquipamentoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.equipamentoId,
        referencedTable: $db.equipamentoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$EquipamentoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.equipamentoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$DefeitoTableTableAnnotationComposer get defeitoId {
    final $$DefeitoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.defeitoId,
        referencedTable: $db.defeitoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$DefeitoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.defeitoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<T> correcaoAnomaliaTableRefs<T extends Object>(
      Expression<T> Function($$CorrecaoAnomaliaTableTableAnnotationComposer a)
          f) {
    final $$CorrecaoAnomaliaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.correcaoAnomaliaTable,
            getReferencedColumn: (t) => t.anomaliaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$CorrecaoAnomaliaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.correcaoAnomaliaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$AnomaliaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AnomaliaTableTable,
    AnomaliaTableData,
    $$AnomaliaTableTableFilterComposer,
    $$AnomaliaTableTableOrderingComposer,
    $$AnomaliaTableTableAnnotationComposer,
    $$AnomaliaTableTableCreateCompanionBuilder,
    $$AnomaliaTableTableUpdateCompanionBuilder,
    (AnomaliaTableData, $$AnomaliaTableTableReferences),
    AnomaliaTableData,
    PrefetchHooks Function(
        {bool perguntaId,
        bool atividadeId,
        bool equipamentoId,
        bool defeitoId,
        bool correcaoAnomaliaTableRefs})> {
  $$AnomaliaTableTableTableManager(_$AppDatabase db, $AnomaliaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AnomaliaTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AnomaliaTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AnomaliaTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String?> perguntaId = const Value.absent(),
            Value<String> atividadeId = const Value.absent(),
            Value<String> equipamentoId = const Value.absent(),
            Value<String> defeitoId = const Value.absent(),
            Value<FaseAnomalia> fase = const Value.absent(),
            Value<LadoAnomalia> lado = const Value.absent(),
            Value<double?> delta = const Value.absent(),
            Value<String?> observacao = const Value.absent(),
            Value<Uint8List?> foto = const Value.absent(),
            Value<bool> corrigida = const Value.absent(),
          }) =>
              AnomaliaTableCompanion(
            id: id,
            perguntaId: perguntaId,
            atividadeId: atividadeId,
            equipamentoId: equipamentoId,
            defeitoId: defeitoId,
            fase: fase,
            lado: lado,
            delta: delta,
            observacao: observacao,
            foto: foto,
            corrigida: corrigida,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String?> perguntaId = const Value.absent(),
            required String atividadeId,
            required String equipamentoId,
            required String defeitoId,
            required FaseAnomalia fase,
            required LadoAnomalia lado,
            Value<double?> delta = const Value.absent(),
            Value<String?> observacao = const Value.absent(),
            Value<Uint8List?> foto = const Value.absent(),
            Value<bool> corrigida = const Value.absent(),
          }) =>
              AnomaliaTableCompanion.insert(
            id: id,
            perguntaId: perguntaId,
            atividadeId: atividadeId,
            equipamentoId: equipamentoId,
            defeitoId: defeitoId,
            fase: fase,
            lado: lado,
            delta: delta,
            observacao: observacao,
            foto: foto,
            corrigida: corrigida,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AnomaliaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {perguntaId = false,
              atividadeId = false,
              equipamentoId = false,
              defeitoId = false,
              correcaoAnomaliaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (correcaoAnomaliaTableRefs) db.correcaoAnomaliaTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (perguntaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.perguntaId,
                    referencedTable:
                        $$AnomaliaTableTableReferences._perguntaIdTable(db),
                    referencedColumn: $$AnomaliaTableTableReferences
                        ._perguntaIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (atividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.atividadeId,
                    referencedTable:
                        $$AnomaliaTableTableReferences._atividadeIdTable(db),
                    referencedColumn: $$AnomaliaTableTableReferences
                        ._atividadeIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (equipamentoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.equipamentoId,
                    referencedTable:
                        $$AnomaliaTableTableReferences._equipamentoIdTable(db),
                    referencedColumn: $$AnomaliaTableTableReferences
                        ._equipamentoIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (defeitoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.defeitoId,
                    referencedTable:
                        $$AnomaliaTableTableReferences._defeitoIdTable(db),
                    referencedColumn:
                        $$AnomaliaTableTableReferences._defeitoIdTable(db).uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (correcaoAnomaliaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AnomaliaTableTableReferences
                            ._correcaoAnomaliaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AnomaliaTableTableReferences(db, table, p0)
                                .correcaoAnomaliaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.anomaliaId == item.id),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$AnomaliaTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AnomaliaTableTable,
    AnomaliaTableData,
    $$AnomaliaTableTableFilterComposer,
    $$AnomaliaTableTableOrderingComposer,
    $$AnomaliaTableTableAnnotationComposer,
    $$AnomaliaTableTableCreateCompanionBuilder,
    $$AnomaliaTableTableUpdateCompanionBuilder,
    (AnomaliaTableData, $$AnomaliaTableTableReferences),
    AnomaliaTableData,
    PrefetchHooks Function(
        {bool perguntaId,
        bool atividadeId,
        bool equipamentoId,
        bool defeitoId,
        bool correcaoAnomaliaTableRefs})>;
typedef $$CorrecaoAnomaliaTableTableCreateCompanionBuilder
    = CorrecaoAnomaliaTableCompanion Function({
  Value<int> id,
  required int anomaliaId,
  required String atividadeId,
  Value<Uint8List?> foto,
});
typedef $$CorrecaoAnomaliaTableTableUpdateCompanionBuilder
    = CorrecaoAnomaliaTableCompanion Function({
  Value<int> id,
  Value<int> anomaliaId,
  Value<String> atividadeId,
  Value<Uint8List?> foto,
});

final class $$CorrecaoAnomaliaTableTableReferences extends BaseReferences<
    _$AppDatabase, $CorrecaoAnomaliaTableTable, CorrecaoAnomaliaTableData> {
  $$CorrecaoAnomaliaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AnomaliaTableTable _anomaliaIdTable(_$AppDatabase db) =>
      db.anomaliaTable.createAlias($_aliasNameGenerator(
          db.correcaoAnomaliaTable.anomaliaId, db.anomaliaTable.id));

  $$AnomaliaTableTableProcessedTableManager get anomaliaId {
    final manager = $$AnomaliaTableTableTableManager($_db, $_db.anomaliaTable)
        .filter((f) => f.id($_item.anomaliaId));
    final item = $_typedResult.readTableOrNull(_anomaliaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $AtividadeTableTable _atividadeIdTable(_$AppDatabase db) =>
      db.atividadeTable.createAlias($_aliasNameGenerator(
          db.correcaoAnomaliaTable.atividadeId, db.atividadeTable.uuid));

  $$AtividadeTableTableProcessedTableManager get atividadeId {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.uuid($_item.atividadeId));
    final item = $_typedResult.readTableOrNull(_atividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$CorrecaoAnomaliaTableTableFilterComposer
    extends Composer<_$AppDatabase, $CorrecaoAnomaliaTableTable> {
  $$CorrecaoAnomaliaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<Uint8List> get foto => $composableBuilder(
      column: $table.foto, builder: (column) => ColumnFilters(column));

  $$AnomaliaTableTableFilterComposer get anomaliaId {
    final $$AnomaliaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.anomaliaId,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableFilterComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AtividadeTableTableFilterComposer get atividadeId {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$CorrecaoAnomaliaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $CorrecaoAnomaliaTableTable> {
  $$CorrecaoAnomaliaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<Uint8List> get foto => $composableBuilder(
      column: $table.foto, builder: (column) => ColumnOrderings(column));

  $$AnomaliaTableTableOrderingComposer get anomaliaId {
    final $$AnomaliaTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.anomaliaId,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableOrderingComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AtividadeTableTableOrderingComposer get atividadeId {
    final $$AtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$CorrecaoAnomaliaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $CorrecaoAnomaliaTableTable> {
  $$CorrecaoAnomaliaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<Uint8List> get foto =>
      $composableBuilder(column: $table.foto, builder: (column) => column);

  $$AnomaliaTableTableAnnotationComposer get anomaliaId {
    final $$AnomaliaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.anomaliaId,
        referencedTable: $db.anomaliaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AnomaliaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.anomaliaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AtividadeTableTableAnnotationComposer get atividadeId {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$CorrecaoAnomaliaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $CorrecaoAnomaliaTableTable,
    CorrecaoAnomaliaTableData,
    $$CorrecaoAnomaliaTableTableFilterComposer,
    $$CorrecaoAnomaliaTableTableOrderingComposer,
    $$CorrecaoAnomaliaTableTableAnnotationComposer,
    $$CorrecaoAnomaliaTableTableCreateCompanionBuilder,
    $$CorrecaoAnomaliaTableTableUpdateCompanionBuilder,
    (CorrecaoAnomaliaTableData, $$CorrecaoAnomaliaTableTableReferences),
    CorrecaoAnomaliaTableData,
    PrefetchHooks Function({bool anomaliaId, bool atividadeId})> {
  $$CorrecaoAnomaliaTableTableTableManager(
      _$AppDatabase db, $CorrecaoAnomaliaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$CorrecaoAnomaliaTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$CorrecaoAnomaliaTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$CorrecaoAnomaliaTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> anomaliaId = const Value.absent(),
            Value<String> atividadeId = const Value.absent(),
            Value<Uint8List?> foto = const Value.absent(),
          }) =>
              CorrecaoAnomaliaTableCompanion(
            id: id,
            anomaliaId: anomaliaId,
            atividadeId: atividadeId,
            foto: foto,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int anomaliaId,
            required String atividadeId,
            Value<Uint8List?> foto = const Value.absent(),
          }) =>
              CorrecaoAnomaliaTableCompanion.insert(
            id: id,
            anomaliaId: anomaliaId,
            atividadeId: atividadeId,
            foto: foto,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$CorrecaoAnomaliaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({anomaliaId = false, atividadeId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (anomaliaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.anomaliaId,
                    referencedTable: $$CorrecaoAnomaliaTableTableReferences
                        ._anomaliaIdTable(db),
                    referencedColumn: $$CorrecaoAnomaliaTableTableReferences
                        ._anomaliaIdTable(db)
                        .id,
                  ) as T;
                }
                if (atividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.atividadeId,
                    referencedTable: $$CorrecaoAnomaliaTableTableReferences
                        ._atividadeIdTable(db),
                    referencedColumn: $$CorrecaoAnomaliaTableTableReferences
                        ._atividadeIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$CorrecaoAnomaliaTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $CorrecaoAnomaliaTableTable,
        CorrecaoAnomaliaTableData,
        $$CorrecaoAnomaliaTableTableFilterComposer,
        $$CorrecaoAnomaliaTableTableOrderingComposer,
        $$CorrecaoAnomaliaTableTableAnnotationComposer,
        $$CorrecaoAnomaliaTableTableCreateCompanionBuilder,
        $$CorrecaoAnomaliaTableTableUpdateCompanionBuilder,
        (CorrecaoAnomaliaTableData, $$CorrecaoAnomaliaTableTableReferences),
        CorrecaoAnomaliaTableData,
        PrefetchHooks Function({bool anomaliaId, bool atividadeId})>;
typedef $$ChecklistTableTableCreateCompanionBuilder = ChecklistTableCompanion
    Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  Value<String?> descricao,
});
typedef $$ChecklistTableTableUpdateCompanionBuilder = ChecklistTableCompanion
    Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<String?> descricao,
});

final class $$ChecklistTableTableReferences extends BaseReferences<
    _$AppDatabase, $ChecklistTableTable, ChecklistTableData> {
  $$ChecklistTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$ChecklistPerguntaRelacionamentoTableTable,
          List<ChecklistPerguntaRelacionamentoTableData>>
      _checklistPerguntaRelacionamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.checklistPerguntaRelacionamentoTable,
              aliasName: $_aliasNameGenerator(db.checklistTable.uuid,
                  db.checklistPerguntaRelacionamentoTable.checklistId));

  $$ChecklistPerguntaRelacionamentoTableTableProcessedTableManager
      get checklistPerguntaRelacionamentoTableRefs {
    final manager = $$ChecklistPerguntaRelacionamentoTableTableTableManager(
            $_db, $_db.checklistPerguntaRelacionamentoTable)
        .filter((f) => f.checklistId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_checklistPerguntaRelacionamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$ChecklistPreenchidoTableTable,
      List<ChecklistPreenchidoTableData>> _checklistPreenchidoTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.checklistPreenchidoTable,
          aliasName: $_aliasNameGenerator(
              db.checklistTable.uuid, db.checklistPreenchidoTable.checklistId));

  $$ChecklistPreenchidoTableTableProcessedTableManager
      get checklistPreenchidoTableRefs {
    final manager = $$ChecklistPreenchidoTableTableTableManager(
            $_db, $_db.checklistPreenchidoTable)
        .filter((f) => f.checklistId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_checklistPreenchidoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$ChecklistTipoAtividadeTableTable,
          List<ChecklistTipoAtividadeTableData>>
      _checklistTipoAtividadeTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.checklistTipoAtividadeTable,
              aliasName: $_aliasNameGenerator(db.checklistTable.uuid,
                  db.checklistTipoAtividadeTable.checklistId));

  $$ChecklistTipoAtividadeTableTableProcessedTableManager
      get checklistTipoAtividadeTableRefs {
    final manager = $$ChecklistTipoAtividadeTableTableTableManager(
            $_db, $_db.checklistTipoAtividadeTable)
        .filter((f) => f.checklistId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_checklistTipoAtividadeTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$ChecklistTableTableFilterComposer
    extends Composer<_$AppDatabase, $ChecklistTableTable> {
  $$ChecklistTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnFilters(column));

  Expression<bool> checklistPerguntaRelacionamentoTableRefs(
      Expression<bool> Function(
              $$ChecklistPerguntaRelacionamentoTableTableFilterComposer f)
          f) {
    final $$ChecklistPerguntaRelacionamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.checklistId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaRelacionamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> checklistPreenchidoTableRefs(
      Expression<bool> Function($$ChecklistPreenchidoTableTableFilterComposer f)
          f) {
    final $$ChecklistPreenchidoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.checklistId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> checklistTipoAtividadeTableRefs(
      Expression<bool> Function(
              $$ChecklistTipoAtividadeTableTableFilterComposer f)
          f) {
    final $$ChecklistTipoAtividadeTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistTipoAtividadeTable,
            getReferencedColumn: (t) => t.checklistId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistTipoAtividadeTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$ChecklistTableTableOrderingComposer
    extends Composer<_$AppDatabase, $ChecklistTableTable> {
  $$ChecklistTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnOrderings(column));
}

class $$ChecklistTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $ChecklistTableTable> {
  $$ChecklistTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  Expression<T> checklistPerguntaRelacionamentoTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer a)
          f) {
    final $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer
        composer = $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.checklistId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> checklistPreenchidoTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistPreenchidoTableTableAnnotationComposer a)
          f) {
    final $$ChecklistPreenchidoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.checklistId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> checklistTipoAtividadeTableRefs<T extends Object>(
      Expression<T> Function(
              $$ChecklistTipoAtividadeTableTableAnnotationComposer a)
          f) {
    final $$ChecklistTipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.checklistTipoAtividadeTable,
            getReferencedColumn: (t) => t.checklistId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistTipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$ChecklistTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $ChecklistTableTable,
    ChecklistTableData,
    $$ChecklistTableTableFilterComposer,
    $$ChecklistTableTableOrderingComposer,
    $$ChecklistTableTableAnnotationComposer,
    $$ChecklistTableTableCreateCompanionBuilder,
    $$ChecklistTableTableUpdateCompanionBuilder,
    (ChecklistTableData, $$ChecklistTableTableReferences),
    ChecklistTableData,
    PrefetchHooks Function(
        {bool checklistPerguntaRelacionamentoTableRefs,
        bool checklistPreenchidoTableRefs,
        bool checklistTipoAtividadeTableRefs})> {
  $$ChecklistTableTableTableManager(
      _$AppDatabase db, $ChecklistTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChecklistTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$ChecklistTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChecklistTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String?> descricao = const Value.absent(),
          }) =>
              ChecklistTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            descricao: descricao,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            Value<String?> descricao = const Value.absent(),
          }) =>
              ChecklistTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            descricao: descricao,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$ChecklistTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {checklistPerguntaRelacionamentoTableRefs = false,
              checklistPreenchidoTableRefs = false,
              checklistTipoAtividadeTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (checklistPerguntaRelacionamentoTableRefs)
                  db.checklistPerguntaRelacionamentoTable,
                if (checklistPreenchidoTableRefs) db.checklistPreenchidoTable,
                if (checklistTipoAtividadeTableRefs)
                  db.checklistTipoAtividadeTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (checklistPerguntaRelacionamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$ChecklistTableTableReferences
                            ._checklistPerguntaRelacionamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistTableTableReferences(db, table, p0)
                                .checklistPerguntaRelacionamentoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.checklistId == item.uuid),
                        typedResults: items),
                  if (checklistPreenchidoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$ChecklistTableTableReferences
                            ._checklistPreenchidoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistTableTableReferences(db, table, p0)
                                .checklistPreenchidoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.checklistId == item.uuid),
                        typedResults: items),
                  if (checklistTipoAtividadeTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$ChecklistTableTableReferences
                            ._checklistTipoAtividadeTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistTableTableReferences(db, table, p0)
                                .checklistTipoAtividadeTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.checklistId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$ChecklistTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $ChecklistTableTable,
    ChecklistTableData,
    $$ChecklistTableTableFilterComposer,
    $$ChecklistTableTableOrderingComposer,
    $$ChecklistTableTableAnnotationComposer,
    $$ChecklistTableTableCreateCompanionBuilder,
    $$ChecklistTableTableUpdateCompanionBuilder,
    (ChecklistTableData, $$ChecklistTableTableReferences),
    ChecklistTableData,
    PrefetchHooks Function(
        {bool checklistPerguntaRelacionamentoTableRefs,
        bool checklistPreenchidoTableRefs,
        bool checklistTipoAtividadeTableRefs})>;
typedef $$ChecklistPerguntaRelacionamentoTableTableCreateCompanionBuilder
    = ChecklistPerguntaRelacionamentoTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String checklistId,
  required String perguntaId,
  Value<int> ordem,
});
typedef $$ChecklistPerguntaRelacionamentoTableTableUpdateCompanionBuilder
    = ChecklistPerguntaRelacionamentoTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> checklistId,
  Value<String> perguntaId,
  Value<int> ordem,
});

final class $$ChecklistPerguntaRelacionamentoTableTableReferences
    extends BaseReferences<
        _$AppDatabase,
        $ChecklistPerguntaRelacionamentoTableTable,
        ChecklistPerguntaRelacionamentoTableData> {
  $$ChecklistPerguntaRelacionamentoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $ChecklistTableTable _checklistIdTable(_$AppDatabase db) =>
      db.checklistTable.createAlias($_aliasNameGenerator(
          db.checklistPerguntaRelacionamentoTable.checklistId,
          db.checklistTable.uuid));

  $$ChecklistTableTableProcessedTableManager get checklistId {
    final manager = $$ChecklistTableTableTableManager($_db, $_db.checklistTable)
        .filter((f) => f.uuid($_item.checklistId));
    final item = $_typedResult.readTableOrNull(_checklistIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $ChecklistPerguntaTableTable _perguntaIdTable(_$AppDatabase db) =>
      db.checklistPerguntaTable.createAlias($_aliasNameGenerator(
          db.checklistPerguntaRelacionamentoTable.perguntaId,
          db.checklistPerguntaTable.uuid));

  $$ChecklistPerguntaTableTableProcessedTableManager get perguntaId {
    final manager = $$ChecklistPerguntaTableTableTableManager(
            $_db, $_db.checklistPerguntaTable)
        .filter((f) => f.uuid($_item.perguntaId));
    final item = $_typedResult.readTableOrNull(_perguntaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$ChecklistPerguntaRelacionamentoTableTableFilterComposer
    extends Composer<_$AppDatabase,
        $ChecklistPerguntaRelacionamentoTableTable> {
  $$ChecklistPerguntaRelacionamentoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get ordem => $composableBuilder(
      column: $table.ordem, builder: (column) => ColumnFilters(column));

  $$ChecklistTableTableFilterComposer get checklistId {
    final $$ChecklistTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableFilterComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$ChecklistPerguntaTableTableFilterComposer get perguntaId {
    final $$ChecklistPerguntaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistPerguntaRelacionamentoTableTableOrderingComposer
    extends Composer<_$AppDatabase,
        $ChecklistPerguntaRelacionamentoTableTable> {
  $$ChecklistPerguntaRelacionamentoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get ordem => $composableBuilder(
      column: $table.ordem, builder: (column) => ColumnOrderings(column));

  $$ChecklistTableTableOrderingComposer get checklistId {
    final $$ChecklistTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableOrderingComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$ChecklistPerguntaTableTableOrderingComposer get perguntaId {
    final $$ChecklistPerguntaTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer
    extends Composer<_$AppDatabase,
        $ChecklistPerguntaRelacionamentoTableTable> {
  $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<int> get ordem =>
      $composableBuilder(column: $table.ordem, builder: (column) => column);

  $$ChecklistTableTableAnnotationComposer get checklistId {
    final $$ChecklistTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableAnnotationComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$ChecklistPerguntaTableTableAnnotationComposer get perguntaId {
    final $$ChecklistPerguntaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistPerguntaRelacionamentoTableTableTableManager
    extends RootTableManager<
        _$AppDatabase,
        $ChecklistPerguntaRelacionamentoTableTable,
        ChecklistPerguntaRelacionamentoTableData,
        $$ChecklistPerguntaRelacionamentoTableTableFilterComposer,
        $$ChecklistPerguntaRelacionamentoTableTableOrderingComposer,
        $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer,
        $$ChecklistPerguntaRelacionamentoTableTableCreateCompanionBuilder,
        $$ChecklistPerguntaRelacionamentoTableTableUpdateCompanionBuilder,
        (
          ChecklistPerguntaRelacionamentoTableData,
          $$ChecklistPerguntaRelacionamentoTableTableReferences
        ),
        ChecklistPerguntaRelacionamentoTableData,
        PrefetchHooks Function({bool checklistId, bool perguntaId})> {
  $$ChecklistPerguntaRelacionamentoTableTableTableManager(
      _$AppDatabase db, $ChecklistPerguntaRelacionamentoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChecklistPerguntaRelacionamentoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$ChecklistPerguntaRelacionamentoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> checklistId = const Value.absent(),
            Value<String> perguntaId = const Value.absent(),
            Value<int> ordem = const Value.absent(),
          }) =>
              ChecklistPerguntaRelacionamentoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            checklistId: checklistId,
            perguntaId: perguntaId,
            ordem: ordem,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String checklistId,
            required String perguntaId,
            Value<int> ordem = const Value.absent(),
          }) =>
              ChecklistPerguntaRelacionamentoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            checklistId: checklistId,
            perguntaId: perguntaId,
            ordem: ordem,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$ChecklistPerguntaRelacionamentoTableTableReferences(
                        db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({checklistId = false, perguntaId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (checklistId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.checklistId,
                    referencedTable:
                        $$ChecklistPerguntaRelacionamentoTableTableReferences
                            ._checklistIdTable(db),
                    referencedColumn:
                        $$ChecklistPerguntaRelacionamentoTableTableReferences
                            ._checklistIdTable(db)
                            .uuid,
                  ) as T;
                }
                if (perguntaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.perguntaId,
                    referencedTable:
                        $$ChecklistPerguntaRelacionamentoTableTableReferences
                            ._perguntaIdTable(db),
                    referencedColumn:
                        $$ChecklistPerguntaRelacionamentoTableTableReferences
                            ._perguntaIdTable(db)
                            .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$ChecklistPerguntaRelacionamentoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $ChecklistPerguntaRelacionamentoTableTable,
        ChecklistPerguntaRelacionamentoTableData,
        $$ChecklistPerguntaRelacionamentoTableTableFilterComposer,
        $$ChecklistPerguntaRelacionamentoTableTableOrderingComposer,
        $$ChecklistPerguntaRelacionamentoTableTableAnnotationComposer,
        $$ChecklistPerguntaRelacionamentoTableTableCreateCompanionBuilder,
        $$ChecklistPerguntaRelacionamentoTableTableUpdateCompanionBuilder,
        (
          ChecklistPerguntaRelacionamentoTableData,
          $$ChecklistPerguntaRelacionamentoTableTableReferences
        ),
        ChecklistPerguntaRelacionamentoTableData,
        PrefetchHooks Function({bool checklistId, bool perguntaId})>;
typedef $$ChecklistPreenchidoTableTableCreateCompanionBuilder
    = ChecklistPreenchidoTableCompanion Function({
  Value<int> id,
  required String atividadeId,
  required String checklistId,
  required String usuarioId,
  required DateTime dataPreenchimento,
});
typedef $$ChecklistPreenchidoTableTableUpdateCompanionBuilder
    = ChecklistPreenchidoTableCompanion Function({
  Value<int> id,
  Value<String> atividadeId,
  Value<String> checklistId,
  Value<String> usuarioId,
  Value<DateTime> dataPreenchimento,
});

final class $$ChecklistPreenchidoTableTableReferences extends BaseReferences<
    _$AppDatabase,
    $ChecklistPreenchidoTableTable,
    ChecklistPreenchidoTableData> {
  $$ChecklistPreenchidoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AtividadeTableTable _atividadeIdTable(_$AppDatabase db) =>
      db.atividadeTable.createAlias($_aliasNameGenerator(
          db.checklistPreenchidoTable.atividadeId, db.atividadeTable.uuid));

  $$AtividadeTableTableProcessedTableManager get atividadeId {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.uuid($_item.atividadeId));
    final item = $_typedResult.readTableOrNull(_atividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $ChecklistTableTable _checklistIdTable(_$AppDatabase db) =>
      db.checklistTable.createAlias($_aliasNameGenerator(
          db.checklistPreenchidoTable.checklistId, db.checklistTable.uuid));

  $$ChecklistTableTableProcessedTableManager get checklistId {
    final manager = $$ChecklistTableTableTableManager($_db, $_db.checklistTable)
        .filter((f) => f.uuid($_item.checklistId));
    final item = $_typedResult.readTableOrNull(_checklistIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $UsuarioTableTable _usuarioIdTable(_$AppDatabase db) =>
      db.usuarioTable.createAlias($_aliasNameGenerator(
          db.checklistPreenchidoTable.usuarioId, db.usuarioTable.uuid));

  $$UsuarioTableTableProcessedTableManager get usuarioId {
    final manager = $$UsuarioTableTableTableManager($_db, $_db.usuarioTable)
        .filter((f) => f.uuid($_item.usuarioId));
    final item = $_typedResult.readTableOrNull(_usuarioIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$ChecklistRespostaTableTable,
      List<ChecklistRespostaTableData>> _checklistRespostaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.checklistRespostaTable,
          aliasName: $_aliasNameGenerator(db.checklistPreenchidoTable.id,
              db.checklistRespostaTable.checklistPreenchidoId));

  $$ChecklistRespostaTableTableProcessedTableManager
      get checklistRespostaTableRefs {
    final manager = $$ChecklistRespostaTableTableTableManager(
            $_db, $_db.checklistRespostaTable)
        .filter((f) => f.checklistPreenchidoId.id($_item.id));

    final cache =
        $_typedResult.readTableOrNull(_checklistRespostaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$ChecklistPreenchidoTableTableFilterComposer
    extends Composer<_$AppDatabase, $ChecklistPreenchidoTableTable> {
  $$ChecklistPreenchidoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get dataPreenchimento => $composableBuilder(
      column: $table.dataPreenchimento,
      builder: (column) => ColumnFilters(column));

  $$AtividadeTableTableFilterComposer get atividadeId {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$ChecklistTableTableFilterComposer get checklistId {
    final $$ChecklistTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableFilterComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableFilterComposer get usuarioId {
    final $$UsuarioTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableFilterComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<bool> checklistRespostaTableRefs(
      Expression<bool> Function($$ChecklistRespostaTableTableFilterComposer f)
          f) {
    final $$ChecklistRespostaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.checklistRespostaTable,
            getReferencedColumn: (t) => t.checklistPreenchidoId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistRespostaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistRespostaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$ChecklistPreenchidoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $ChecklistPreenchidoTableTable> {
  $$ChecklistPreenchidoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataPreenchimento => $composableBuilder(
      column: $table.dataPreenchimento,
      builder: (column) => ColumnOrderings(column));

  $$AtividadeTableTableOrderingComposer get atividadeId {
    final $$AtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$ChecklistTableTableOrderingComposer get checklistId {
    final $$ChecklistTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableOrderingComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableOrderingComposer get usuarioId {
    final $$UsuarioTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableOrderingComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$ChecklistPreenchidoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $ChecklistPreenchidoTableTable> {
  $$ChecklistPreenchidoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<DateTime> get dataPreenchimento => $composableBuilder(
      column: $table.dataPreenchimento, builder: (column) => column);

  $$AtividadeTableTableAnnotationComposer get atividadeId {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$ChecklistTableTableAnnotationComposer get checklistId {
    final $$ChecklistTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableAnnotationComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableAnnotationComposer get usuarioId {
    final $$UsuarioTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableAnnotationComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<T> checklistRespostaTableRefs<T extends Object>(
      Expression<T> Function($$ChecklistRespostaTableTableAnnotationComposer a)
          f) {
    final $$ChecklistRespostaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.checklistRespostaTable,
            getReferencedColumn: (t) => t.checklistPreenchidoId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistRespostaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistRespostaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$ChecklistPreenchidoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $ChecklistPreenchidoTableTable,
    ChecklistPreenchidoTableData,
    $$ChecklistPreenchidoTableTableFilterComposer,
    $$ChecklistPreenchidoTableTableOrderingComposer,
    $$ChecklistPreenchidoTableTableAnnotationComposer,
    $$ChecklistPreenchidoTableTableCreateCompanionBuilder,
    $$ChecklistPreenchidoTableTableUpdateCompanionBuilder,
    (ChecklistPreenchidoTableData, $$ChecklistPreenchidoTableTableReferences),
    ChecklistPreenchidoTableData,
    PrefetchHooks Function(
        {bool atividadeId,
        bool checklistId,
        bool usuarioId,
        bool checklistRespostaTableRefs})> {
  $$ChecklistPreenchidoTableTableTableManager(
      _$AppDatabase db, $ChecklistPreenchidoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChecklistPreenchidoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$ChecklistPreenchidoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChecklistPreenchidoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> atividadeId = const Value.absent(),
            Value<String> checklistId = const Value.absent(),
            Value<String> usuarioId = const Value.absent(),
            Value<DateTime> dataPreenchimento = const Value.absent(),
          }) =>
              ChecklistPreenchidoTableCompanion(
            id: id,
            atividadeId: atividadeId,
            checklistId: checklistId,
            usuarioId: usuarioId,
            dataPreenchimento: dataPreenchimento,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String atividadeId,
            required String checklistId,
            required String usuarioId,
            required DateTime dataPreenchimento,
          }) =>
              ChecklistPreenchidoTableCompanion.insert(
            id: id,
            atividadeId: atividadeId,
            checklistId: checklistId,
            usuarioId: usuarioId,
            dataPreenchimento: dataPreenchimento,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$ChecklistPreenchidoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {atividadeId = false,
              checklistId = false,
              usuarioId = false,
              checklistRespostaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (checklistRespostaTableRefs) db.checklistRespostaTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (atividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.atividadeId,
                    referencedTable: $$ChecklistPreenchidoTableTableReferences
                        ._atividadeIdTable(db),
                    referencedColumn: $$ChecklistPreenchidoTableTableReferences
                        ._atividadeIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (checklistId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.checklistId,
                    referencedTable: $$ChecklistPreenchidoTableTableReferences
                        ._checklistIdTable(db),
                    referencedColumn: $$ChecklistPreenchidoTableTableReferences
                        ._checklistIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (usuarioId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.usuarioId,
                    referencedTable: $$ChecklistPreenchidoTableTableReferences
                        ._usuarioIdTable(db),
                    referencedColumn: $$ChecklistPreenchidoTableTableReferences
                        ._usuarioIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (checklistRespostaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable:
                            $$ChecklistPreenchidoTableTableReferences
                                ._checklistRespostaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$ChecklistPreenchidoTableTableReferences(
                                    db, table, p0)
                                .checklistRespostaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems.where(
                                (e) => e.checklistPreenchidoId == item.id),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$ChecklistPreenchidoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $ChecklistPreenchidoTableTable,
        ChecklistPreenchidoTableData,
        $$ChecklistPreenchidoTableTableFilterComposer,
        $$ChecklistPreenchidoTableTableOrderingComposer,
        $$ChecklistPreenchidoTableTableAnnotationComposer,
        $$ChecklistPreenchidoTableTableCreateCompanionBuilder,
        $$ChecklistPreenchidoTableTableUpdateCompanionBuilder,
        (
          ChecklistPreenchidoTableData,
          $$ChecklistPreenchidoTableTableReferences
        ),
        ChecklistPreenchidoTableData,
        PrefetchHooks Function(
            {bool atividadeId,
            bool checklistId,
            bool usuarioId,
            bool checklistRespostaTableRefs})>;
typedef $$ChecklistRespostaTableTableCreateCompanionBuilder
    = ChecklistRespostaTableCompanion Function({
  Value<int> id,
  required int checklistPreenchidoId,
  required String perguntaId,
  required RespostaChecklist resposta,
});
typedef $$ChecklistRespostaTableTableUpdateCompanionBuilder
    = ChecklistRespostaTableCompanion Function({
  Value<int> id,
  Value<int> checklistPreenchidoId,
  Value<String> perguntaId,
  Value<RespostaChecklist> resposta,
});

final class $$ChecklistRespostaTableTableReferences extends BaseReferences<
    _$AppDatabase, $ChecklistRespostaTableTable, ChecklistRespostaTableData> {
  $$ChecklistRespostaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $ChecklistPreenchidoTableTable _checklistPreenchidoIdTable(
          _$AppDatabase db) =>
      db.checklistPreenchidoTable.createAlias($_aliasNameGenerator(
          db.checklistRespostaTable.checklistPreenchidoId,
          db.checklistPreenchidoTable.id));

  $$ChecklistPreenchidoTableTableProcessedTableManager
      get checklistPreenchidoId {
    final manager = $$ChecklistPreenchidoTableTableTableManager(
            $_db, $_db.checklistPreenchidoTable)
        .filter((f) => f.id($_item.checklistPreenchidoId));
    final item =
        $_typedResult.readTableOrNull(_checklistPreenchidoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $ChecklistPerguntaTableTable _perguntaIdTable(_$AppDatabase db) =>
      db.checklistPerguntaTable.createAlias($_aliasNameGenerator(
          db.checklistRespostaTable.perguntaId,
          db.checklistPerguntaTable.uuid));

  $$ChecklistPerguntaTableTableProcessedTableManager get perguntaId {
    final manager = $$ChecklistPerguntaTableTableTableManager(
            $_db, $_db.checklistPerguntaTable)
        .filter((f) => f.uuid($_item.perguntaId));
    final item = $_typedResult.readTableOrNull(_perguntaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$ChecklistRespostaTableTableFilterComposer
    extends Composer<_$AppDatabase, $ChecklistRespostaTableTable> {
  $$ChecklistRespostaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<RespostaChecklist, RespostaChecklist, String>
      get resposta => $composableBuilder(
          column: $table.resposta,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  $$ChecklistPreenchidoTableTableFilterComposer get checklistPreenchidoId {
    final $$ChecklistPreenchidoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.checklistPreenchidoId,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$ChecklistPerguntaTableTableFilterComposer get perguntaId {
    final $$ChecklistPerguntaTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableFilterComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistRespostaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $ChecklistRespostaTableTable> {
  $$ChecklistRespostaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get resposta => $composableBuilder(
      column: $table.resposta, builder: (column) => ColumnOrderings(column));

  $$ChecklistPreenchidoTableTableOrderingComposer get checklistPreenchidoId {
    final $$ChecklistPreenchidoTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.checklistPreenchidoId,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$ChecklistPerguntaTableTableOrderingComposer get perguntaId {
    final $$ChecklistPerguntaTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistRespostaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $ChecklistRespostaTableTable> {
  $$ChecklistRespostaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumnWithTypeConverter<RespostaChecklist, String> get resposta =>
      $composableBuilder(column: $table.resposta, builder: (column) => column);

  $$ChecklistPreenchidoTableTableAnnotationComposer get checklistPreenchidoId {
    final $$ChecklistPreenchidoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.checklistPreenchidoId,
            referencedTable: $db.checklistPreenchidoTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPreenchidoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPreenchidoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$ChecklistPerguntaTableTableAnnotationComposer get perguntaId {
    final $$ChecklistPerguntaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.perguntaId,
            referencedTable: $db.checklistPerguntaTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$ChecklistPerguntaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.checklistPerguntaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistRespostaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $ChecklistRespostaTableTable,
    ChecklistRespostaTableData,
    $$ChecklistRespostaTableTableFilterComposer,
    $$ChecklistRespostaTableTableOrderingComposer,
    $$ChecklistRespostaTableTableAnnotationComposer,
    $$ChecklistRespostaTableTableCreateCompanionBuilder,
    $$ChecklistRespostaTableTableUpdateCompanionBuilder,
    (ChecklistRespostaTableData, $$ChecklistRespostaTableTableReferences),
    ChecklistRespostaTableData,
    PrefetchHooks Function({bool checklistPreenchidoId, bool perguntaId})> {
  $$ChecklistRespostaTableTableTableManager(
      _$AppDatabase db, $ChecklistRespostaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChecklistRespostaTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$ChecklistRespostaTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChecklistRespostaTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> checklistPreenchidoId = const Value.absent(),
            Value<String> perguntaId = const Value.absent(),
            Value<RespostaChecklist> resposta = const Value.absent(),
          }) =>
              ChecklistRespostaTableCompanion(
            id: id,
            checklistPreenchidoId: checklistPreenchidoId,
            perguntaId: perguntaId,
            resposta: resposta,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int checklistPreenchidoId,
            required String perguntaId,
            required RespostaChecklist resposta,
          }) =>
              ChecklistRespostaTableCompanion.insert(
            id: id,
            checklistPreenchidoId: checklistPreenchidoId,
            perguntaId: perguntaId,
            resposta: resposta,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$ChecklistRespostaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {checklistPreenchidoId = false, perguntaId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (checklistPreenchidoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.checklistPreenchidoId,
                    referencedTable: $$ChecklistRespostaTableTableReferences
                        ._checklistPreenchidoIdTable(db),
                    referencedColumn: $$ChecklistRespostaTableTableReferences
                        ._checklistPreenchidoIdTable(db)
                        .id,
                  ) as T;
                }
                if (perguntaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.perguntaId,
                    referencedTable: $$ChecklistRespostaTableTableReferences
                        ._perguntaIdTable(db),
                    referencedColumn: $$ChecklistRespostaTableTableReferences
                        ._perguntaIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$ChecklistRespostaTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $ChecklistRespostaTableTable,
        ChecklistRespostaTableData,
        $$ChecklistRespostaTableTableFilterComposer,
        $$ChecklistRespostaTableTableOrderingComposer,
        $$ChecklistRespostaTableTableAnnotationComposer,
        $$ChecklistRespostaTableTableCreateCompanionBuilder,
        $$ChecklistRespostaTableTableUpdateCompanionBuilder,
        (ChecklistRespostaTableData, $$ChecklistRespostaTableTableReferences),
        ChecklistRespostaTableData,
        PrefetchHooks Function({bool checklistPreenchidoId, bool perguntaId})>;
typedef $$ChecklistTipoAtividadeTableTableCreateCompanionBuilder
    = ChecklistTipoAtividadeTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String checklistId,
  required String tipoAtividadeId,
});
typedef $$ChecklistTipoAtividadeTableTableUpdateCompanionBuilder
    = ChecklistTipoAtividadeTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> checklistId,
  Value<String> tipoAtividadeId,
});

final class $$ChecklistTipoAtividadeTableTableReferences extends BaseReferences<
    _$AppDatabase,
    $ChecklistTipoAtividadeTableTable,
    ChecklistTipoAtividadeTableData> {
  $$ChecklistTipoAtividadeTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $ChecklistTableTable _checklistIdTable(_$AppDatabase db) =>
      db.checklistTable.createAlias($_aliasNameGenerator(
          db.checklistTipoAtividadeTable.checklistId, db.checklistTable.uuid));

  $$ChecklistTableTableProcessedTableManager get checklistId {
    final manager = $$ChecklistTableTableTableManager($_db, $_db.checklistTable)
        .filter((f) => f.uuid($_item.checklistId));
    final item = $_typedResult.readTableOrNull(_checklistIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $TipoAtividadeTableTable _tipoAtividadeIdTable(_$AppDatabase db) =>
      db.tipoAtividadeTable.createAlias($_aliasNameGenerator(
          db.checklistTipoAtividadeTable.tipoAtividadeId,
          db.tipoAtividadeTable.uuid));

  $$TipoAtividadeTableTableProcessedTableManager get tipoAtividadeId {
    final manager =
        $$TipoAtividadeTableTableTableManager($_db, $_db.tipoAtividadeTable)
            .filter((f) => f.uuid($_item.tipoAtividadeId));
    final item = $_typedResult.readTableOrNull(_tipoAtividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$ChecklistTipoAtividadeTableTableFilterComposer
    extends Composer<_$AppDatabase, $ChecklistTipoAtividadeTableTable> {
  $$ChecklistTipoAtividadeTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  $$ChecklistTableTableFilterComposer get checklistId {
    final $$ChecklistTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableFilterComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TipoAtividadeTableTableFilterComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tipoAtividadeId,
        referencedTable: $db.tipoAtividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TipoAtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.tipoAtividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$ChecklistTipoAtividadeTableTableOrderingComposer
    extends Composer<_$AppDatabase, $ChecklistTipoAtividadeTableTable> {
  $$ChecklistTipoAtividadeTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  $$ChecklistTableTableOrderingComposer get checklistId {
    final $$ChecklistTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableOrderingComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TipoAtividadeTableTableOrderingComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tipoAtividadeId,
        referencedTable: $db.tipoAtividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TipoAtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.tipoAtividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$ChecklistTipoAtividadeTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $ChecklistTipoAtividadeTableTable> {
  $$ChecklistTipoAtividadeTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  $$ChecklistTableTableAnnotationComposer get checklistId {
    final $$ChecklistTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.checklistId,
        referencedTable: $db.checklistTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$ChecklistTableTableAnnotationComposer(
              $db: $db,
              $table: $db.checklistTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TipoAtividadeTableTableAnnotationComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.tipoAtividadeId,
            referencedTable: $db.tipoAtividadeTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$TipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.tipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$ChecklistTipoAtividadeTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $ChecklistTipoAtividadeTableTable,
    ChecklistTipoAtividadeTableData,
    $$ChecklistTipoAtividadeTableTableFilterComposer,
    $$ChecklistTipoAtividadeTableTableOrderingComposer,
    $$ChecklistTipoAtividadeTableTableAnnotationComposer,
    $$ChecklistTipoAtividadeTableTableCreateCompanionBuilder,
    $$ChecklistTipoAtividadeTableTableUpdateCompanionBuilder,
    (
      ChecklistTipoAtividadeTableData,
      $$ChecklistTipoAtividadeTableTableReferences
    ),
    ChecklistTipoAtividadeTableData,
    PrefetchHooks Function({bool checklistId, bool tipoAtividadeId})> {
  $$ChecklistTipoAtividadeTableTableTableManager(
      _$AppDatabase db, $ChecklistTipoAtividadeTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChecklistTipoAtividadeTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$ChecklistTipoAtividadeTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChecklistTipoAtividadeTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> checklistId = const Value.absent(),
            Value<String> tipoAtividadeId = const Value.absent(),
          }) =>
              ChecklistTipoAtividadeTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            checklistId: checklistId,
            tipoAtividadeId: tipoAtividadeId,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String checklistId,
            required String tipoAtividadeId,
          }) =>
              ChecklistTipoAtividadeTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            checklistId: checklistId,
            tipoAtividadeId: tipoAtividadeId,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$ChecklistTipoAtividadeTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {checklistId = false, tipoAtividadeId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (checklistId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.checklistId,
                    referencedTable:
                        $$ChecklistTipoAtividadeTableTableReferences
                            ._checklistIdTable(db),
                    referencedColumn:
                        $$ChecklistTipoAtividadeTableTableReferences
                            ._checklistIdTable(db)
                            .uuid,
                  ) as T;
                }
                if (tipoAtividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.tipoAtividadeId,
                    referencedTable:
                        $$ChecklistTipoAtividadeTableTableReferences
                            ._tipoAtividadeIdTable(db),
                    referencedColumn:
                        $$ChecklistTipoAtividadeTableTableReferences
                            ._tipoAtividadeIdTable(db)
                            .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$ChecklistTipoAtividadeTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $ChecklistTipoAtividadeTableTable,
    ChecklistTipoAtividadeTableData,
    $$ChecklistTipoAtividadeTableTableFilterComposer,
    $$ChecklistTipoAtividadeTableTableOrderingComposer,
    $$ChecklistTipoAtividadeTableTableAnnotationComposer,
    $$ChecklistTipoAtividadeTableTableCreateCompanionBuilder,
    $$ChecklistTipoAtividadeTableTableUpdateCompanionBuilder,
    (
      ChecklistTipoAtividadeTableData,
      $$ChecklistTipoAtividadeTableTableReferences
    ),
    ChecklistTipoAtividadeTableData,
    PrefetchHooks Function({bool checklistId, bool tipoAtividadeId})>;
typedef $$FormularioMpbbTableTableCreateCompanionBuilder
    = FormularioMpbbTableCompanion Function({
  Value<int> id,
  required String atividadeId,
  Value<String?> fabricante,
  Value<double?> resistenciaNominal,
  Value<double?> densidadeNominal,
  Value<double?> tensaoFlutuacaoCelula,
  Value<double?> densidadeCritica,
  required TipoBateria tipoBateria,
  Value<String?> modelo,
  Value<int?> capacidadeAh,
  Value<int?> quantidadeCelulas,
  Value<double?> tensaoFlutuacaoBanco,
  Value<double?> rippleMedido,
  Value<DateTime> createdAt,
  Value<DateTime?> updatedAt,
});
typedef $$FormularioMpbbTableTableUpdateCompanionBuilder
    = FormularioMpbbTableCompanion Function({
  Value<int> id,
  Value<String> atividadeId,
  Value<String?> fabricante,
  Value<double?> resistenciaNominal,
  Value<double?> densidadeNominal,
  Value<double?> tensaoFlutuacaoCelula,
  Value<double?> densidadeCritica,
  Value<TipoBateria> tipoBateria,
  Value<String?> modelo,
  Value<int?> capacidadeAh,
  Value<int?> quantidadeCelulas,
  Value<double?> tensaoFlutuacaoBanco,
  Value<double?> rippleMedido,
  Value<DateTime> createdAt,
  Value<DateTime?> updatedAt,
});

final class $$FormularioMpbbTableTableReferences extends BaseReferences<
    _$AppDatabase, $FormularioMpbbTableTable, FormularioMpbbTableData> {
  $$FormularioMpbbTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AtividadeTableTable _atividadeIdTable(_$AppDatabase db) =>
      db.atividadeTable.createAlias($_aliasNameGenerator(
          db.formularioMpbbTable.atividadeId, db.atividadeTable.uuid));

  $$AtividadeTableTableProcessedTableManager get atividadeId {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.uuid($_item.atividadeId));
    final item = $_typedResult.readTableOrNull(_atividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$MedicaoElementoMpbbTableTable,
      List<MedicaoElementoMpbbTableData>> _medicaoElementoMpbbTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.medicaoElementoMpbbTable,
          aliasName: $_aliasNameGenerator(db.formularioMpbbTable.id,
              db.medicaoElementoMpbbTable.formularioMpbbId));

  $$MedicaoElementoMpbbTableTableProcessedTableManager
      get medicaoElementoMpbbTableRefs {
    final manager = $$MedicaoElementoMpbbTableTableTableManager(
            $_db, $_db.medicaoElementoMpbbTable)
        .filter((f) => f.formularioMpbbId.id($_item.id));

    final cache =
        $_typedResult.readTableOrNull(_medicaoElementoMpbbTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$FormularioMpbbTableTableFilterComposer
    extends Composer<_$AppDatabase, $FormularioMpbbTableTable> {
  $$FormularioMpbbTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get fabricante => $composableBuilder(
      column: $table.fabricante, builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaNominal => $composableBuilder(
      column: $table.resistenciaNominal,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get densidadeNominal => $composableBuilder(
      column: $table.densidadeNominal,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get tensaoFlutuacaoCelula => $composableBuilder(
      column: $table.tensaoFlutuacaoCelula,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get densidadeCritica => $composableBuilder(
      column: $table.densidadeCritica,
      builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<TipoBateria, TipoBateria, String>
      get tipoBateria => $composableBuilder(
          column: $table.tipoBateria,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<String> get modelo => $composableBuilder(
      column: $table.modelo, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get capacidadeAh => $composableBuilder(
      column: $table.capacidadeAh, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get quantidadeCelulas => $composableBuilder(
      column: $table.quantidadeCelulas,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get tensaoFlutuacaoBanco => $composableBuilder(
      column: $table.tensaoFlutuacaoBanco,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get rippleMedido => $composableBuilder(
      column: $table.rippleMedido, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  $$AtividadeTableTableFilterComposer get atividadeId {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<bool> medicaoElementoMpbbTableRefs(
      Expression<bool> Function($$MedicaoElementoMpbbTableTableFilterComposer f)
          f) {
    final $$MedicaoElementoMpbbTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.medicaoElementoMpbbTable,
            getReferencedColumn: (t) => t.formularioMpbbId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MedicaoElementoMpbbTableTableFilterComposer(
                  $db: $db,
                  $table: $db.medicaoElementoMpbbTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$FormularioMpbbTableTableOrderingComposer
    extends Composer<_$AppDatabase, $FormularioMpbbTableTable> {
  $$FormularioMpbbTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get fabricante => $composableBuilder(
      column: $table.fabricante, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaNominal => $composableBuilder(
      column: $table.resistenciaNominal,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get densidadeNominal => $composableBuilder(
      column: $table.densidadeNominal,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get tensaoFlutuacaoCelula => $composableBuilder(
      column: $table.tensaoFlutuacaoCelula,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get densidadeCritica => $composableBuilder(
      column: $table.densidadeCritica,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get tipoBateria => $composableBuilder(
      column: $table.tipoBateria, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get modelo => $composableBuilder(
      column: $table.modelo, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get capacidadeAh => $composableBuilder(
      column: $table.capacidadeAh,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get quantidadeCelulas => $composableBuilder(
      column: $table.quantidadeCelulas,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get tensaoFlutuacaoBanco => $composableBuilder(
      column: $table.tensaoFlutuacaoBanco,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get rippleMedido => $composableBuilder(
      column: $table.rippleMedido,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  $$AtividadeTableTableOrderingComposer get atividadeId {
    final $$AtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$FormularioMpbbTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $FormularioMpbbTableTable> {
  $$FormularioMpbbTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get fabricante => $composableBuilder(
      column: $table.fabricante, builder: (column) => column);

  GeneratedColumn<double> get resistenciaNominal => $composableBuilder(
      column: $table.resistenciaNominal, builder: (column) => column);

  GeneratedColumn<double> get densidadeNominal => $composableBuilder(
      column: $table.densidadeNominal, builder: (column) => column);

  GeneratedColumn<double> get tensaoFlutuacaoCelula => $composableBuilder(
      column: $table.tensaoFlutuacaoCelula, builder: (column) => column);

  GeneratedColumn<double> get densidadeCritica => $composableBuilder(
      column: $table.densidadeCritica, builder: (column) => column);

  GeneratedColumnWithTypeConverter<TipoBateria, String> get tipoBateria =>
      $composableBuilder(
          column: $table.tipoBateria, builder: (column) => column);

  GeneratedColumn<String> get modelo =>
      $composableBuilder(column: $table.modelo, builder: (column) => column);

  GeneratedColumn<int> get capacidadeAh => $composableBuilder(
      column: $table.capacidadeAh, builder: (column) => column);

  GeneratedColumn<int> get quantidadeCelulas => $composableBuilder(
      column: $table.quantidadeCelulas, builder: (column) => column);

  GeneratedColumn<double> get tensaoFlutuacaoBanco => $composableBuilder(
      column: $table.tensaoFlutuacaoBanco, builder: (column) => column);

  GeneratedColumn<double> get rippleMedido => $composableBuilder(
      column: $table.rippleMedido, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  $$AtividadeTableTableAnnotationComposer get atividadeId {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<T> medicaoElementoMpbbTableRefs<T extends Object>(
      Expression<T> Function(
              $$MedicaoElementoMpbbTableTableAnnotationComposer a)
          f) {
    final $$MedicaoElementoMpbbTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.medicaoElementoMpbbTable,
            getReferencedColumn: (t) => t.formularioMpbbId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MedicaoElementoMpbbTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.medicaoElementoMpbbTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$FormularioMpbbTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $FormularioMpbbTableTable,
    FormularioMpbbTableData,
    $$FormularioMpbbTableTableFilterComposer,
    $$FormularioMpbbTableTableOrderingComposer,
    $$FormularioMpbbTableTableAnnotationComposer,
    $$FormularioMpbbTableTableCreateCompanionBuilder,
    $$FormularioMpbbTableTableUpdateCompanionBuilder,
    (FormularioMpbbTableData, $$FormularioMpbbTableTableReferences),
    FormularioMpbbTableData,
    PrefetchHooks Function(
        {bool atividadeId, bool medicaoElementoMpbbTableRefs})> {
  $$FormularioMpbbTableTableTableManager(
      _$AppDatabase db, $FormularioMpbbTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$FormularioMpbbTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$FormularioMpbbTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$FormularioMpbbTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> atividadeId = const Value.absent(),
            Value<String?> fabricante = const Value.absent(),
            Value<double?> resistenciaNominal = const Value.absent(),
            Value<double?> densidadeNominal = const Value.absent(),
            Value<double?> tensaoFlutuacaoCelula = const Value.absent(),
            Value<double?> densidadeCritica = const Value.absent(),
            Value<TipoBateria> tipoBateria = const Value.absent(),
            Value<String?> modelo = const Value.absent(),
            Value<int?> capacidadeAh = const Value.absent(),
            Value<int?> quantidadeCelulas = const Value.absent(),
            Value<double?> tensaoFlutuacaoBanco = const Value.absent(),
            Value<double?> rippleMedido = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime?> updatedAt = const Value.absent(),
          }) =>
              FormularioMpbbTableCompanion(
            id: id,
            atividadeId: atividadeId,
            fabricante: fabricante,
            resistenciaNominal: resistenciaNominal,
            densidadeNominal: densidadeNominal,
            tensaoFlutuacaoCelula: tensaoFlutuacaoCelula,
            densidadeCritica: densidadeCritica,
            tipoBateria: tipoBateria,
            modelo: modelo,
            capacidadeAh: capacidadeAh,
            quantidadeCelulas: quantidadeCelulas,
            tensaoFlutuacaoBanco: tensaoFlutuacaoBanco,
            rippleMedido: rippleMedido,
            createdAt: createdAt,
            updatedAt: updatedAt,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String atividadeId,
            Value<String?> fabricante = const Value.absent(),
            Value<double?> resistenciaNominal = const Value.absent(),
            Value<double?> densidadeNominal = const Value.absent(),
            Value<double?> tensaoFlutuacaoCelula = const Value.absent(),
            Value<double?> densidadeCritica = const Value.absent(),
            required TipoBateria tipoBateria,
            Value<String?> modelo = const Value.absent(),
            Value<int?> capacidadeAh = const Value.absent(),
            Value<int?> quantidadeCelulas = const Value.absent(),
            Value<double?> tensaoFlutuacaoBanco = const Value.absent(),
            Value<double?> rippleMedido = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime?> updatedAt = const Value.absent(),
          }) =>
              FormularioMpbbTableCompanion.insert(
            id: id,
            atividadeId: atividadeId,
            fabricante: fabricante,
            resistenciaNominal: resistenciaNominal,
            densidadeNominal: densidadeNominal,
            tensaoFlutuacaoCelula: tensaoFlutuacaoCelula,
            densidadeCritica: densidadeCritica,
            tipoBateria: tipoBateria,
            modelo: modelo,
            capacidadeAh: capacidadeAh,
            quantidadeCelulas: quantidadeCelulas,
            tensaoFlutuacaoBanco: tensaoFlutuacaoBanco,
            rippleMedido: rippleMedido,
            createdAt: createdAt,
            updatedAt: updatedAt,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$FormularioMpbbTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {atividadeId = false, medicaoElementoMpbbTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (medicaoElementoMpbbTableRefs) db.medicaoElementoMpbbTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (atividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.atividadeId,
                    referencedTable: $$FormularioMpbbTableTableReferences
                        ._atividadeIdTable(db),
                    referencedColumn: $$FormularioMpbbTableTableReferences
                        ._atividadeIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (medicaoElementoMpbbTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$FormularioMpbbTableTableReferences
                            ._medicaoElementoMpbbTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$FormularioMpbbTableTableReferences(db, table, p0)
                                .medicaoElementoMpbbTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.formularioMpbbId == item.id),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$FormularioMpbbTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $FormularioMpbbTableTable,
    FormularioMpbbTableData,
    $$FormularioMpbbTableTableFilterComposer,
    $$FormularioMpbbTableTableOrderingComposer,
    $$FormularioMpbbTableTableAnnotationComposer,
    $$FormularioMpbbTableTableCreateCompanionBuilder,
    $$FormularioMpbbTableTableUpdateCompanionBuilder,
    (FormularioMpbbTableData, $$FormularioMpbbTableTableReferences),
    FormularioMpbbTableData,
    PrefetchHooks Function(
        {bool atividadeId, bool medicaoElementoMpbbTableRefs})>;
typedef $$MedicaoElementoMpbbTableTableCreateCompanionBuilder
    = MedicaoElementoMpbbTableCompanion Function({
  Value<int> id,
  required int formularioMpbbId,
  required int elementoBateriaNumero,
  Value<double?> tensao,
  Value<double?> resistenciaInterna,
});
typedef $$MedicaoElementoMpbbTableTableUpdateCompanionBuilder
    = MedicaoElementoMpbbTableCompanion Function({
  Value<int> id,
  Value<int> formularioMpbbId,
  Value<int> elementoBateriaNumero,
  Value<double?> tensao,
  Value<double?> resistenciaInterna,
});

final class $$MedicaoElementoMpbbTableTableReferences extends BaseReferences<
    _$AppDatabase,
    $MedicaoElementoMpbbTableTable,
    MedicaoElementoMpbbTableData> {
  $$MedicaoElementoMpbbTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $FormularioMpbbTableTable _formularioMpbbIdTable(_$AppDatabase db) =>
      db.formularioMpbbTable.createAlias($_aliasNameGenerator(
          db.medicaoElementoMpbbTable.formularioMpbbId,
          db.formularioMpbbTable.id));

  $$FormularioMpbbTableTableProcessedTableManager get formularioMpbbId {
    final manager =
        $$FormularioMpbbTableTableTableManager($_db, $_db.formularioMpbbTable)
            .filter((f) => f.id($_item.formularioMpbbId));
    final item = $_typedResult.readTableOrNull(_formularioMpbbIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$MedicaoElementoMpbbTableTableFilterComposer
    extends Composer<_$AppDatabase, $MedicaoElementoMpbbTableTable> {
  $$MedicaoElementoMpbbTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get elementoBateriaNumero => $composableBuilder(
      column: $table.elementoBateriaNumero,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get tensao => $composableBuilder(
      column: $table.tensao, builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaInterna => $composableBuilder(
      column: $table.resistenciaInterna,
      builder: (column) => ColumnFilters(column));

  $$FormularioMpbbTableTableFilterComposer get formularioMpbbId {
    final $$FormularioMpbbTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.formularioMpbbId,
        referencedTable: $db.formularioMpbbTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$FormularioMpbbTableTableFilterComposer(
              $db: $db,
              $table: $db.formularioMpbbTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MedicaoElementoMpbbTableTableOrderingComposer
    extends Composer<_$AppDatabase, $MedicaoElementoMpbbTableTable> {
  $$MedicaoElementoMpbbTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get elementoBateriaNumero => $composableBuilder(
      column: $table.elementoBateriaNumero,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get tensao => $composableBuilder(
      column: $table.tensao, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaInterna => $composableBuilder(
      column: $table.resistenciaInterna,
      builder: (column) => ColumnOrderings(column));

  $$FormularioMpbbTableTableOrderingComposer get formularioMpbbId {
    final $$FormularioMpbbTableTableOrderingComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.formularioMpbbId,
            referencedTable: $db.formularioMpbbTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$FormularioMpbbTableTableOrderingComposer(
                  $db: $db,
                  $table: $db.formularioMpbbTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$MedicaoElementoMpbbTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $MedicaoElementoMpbbTableTable> {
  $$MedicaoElementoMpbbTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get elementoBateriaNumero => $composableBuilder(
      column: $table.elementoBateriaNumero, builder: (column) => column);

  GeneratedColumn<double> get tensao =>
      $composableBuilder(column: $table.tensao, builder: (column) => column);

  GeneratedColumn<double> get resistenciaInterna => $composableBuilder(
      column: $table.resistenciaInterna, builder: (column) => column);

  $$FormularioMpbbTableTableAnnotationComposer get formularioMpbbId {
    final $$FormularioMpbbTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.formularioMpbbId,
            referencedTable: $db.formularioMpbbTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$FormularioMpbbTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.formularioMpbbTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }
}

class $$MedicaoElementoMpbbTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $MedicaoElementoMpbbTableTable,
    MedicaoElementoMpbbTableData,
    $$MedicaoElementoMpbbTableTableFilterComposer,
    $$MedicaoElementoMpbbTableTableOrderingComposer,
    $$MedicaoElementoMpbbTableTableAnnotationComposer,
    $$MedicaoElementoMpbbTableTableCreateCompanionBuilder,
    $$MedicaoElementoMpbbTableTableUpdateCompanionBuilder,
    (MedicaoElementoMpbbTableData, $$MedicaoElementoMpbbTableTableReferences),
    MedicaoElementoMpbbTableData,
    PrefetchHooks Function({bool formularioMpbbId})> {
  $$MedicaoElementoMpbbTableTableTableManager(
      _$AppDatabase db, $MedicaoElementoMpbbTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MedicaoElementoMpbbTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$MedicaoElementoMpbbTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MedicaoElementoMpbbTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> formularioMpbbId = const Value.absent(),
            Value<int> elementoBateriaNumero = const Value.absent(),
            Value<double?> tensao = const Value.absent(),
            Value<double?> resistenciaInterna = const Value.absent(),
          }) =>
              MedicaoElementoMpbbTableCompanion(
            id: id,
            formularioMpbbId: formularioMpbbId,
            elementoBateriaNumero: elementoBateriaNumero,
            tensao: tensao,
            resistenciaInterna: resistenciaInterna,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int formularioMpbbId,
            required int elementoBateriaNumero,
            Value<double?> tensao = const Value.absent(),
            Value<double?> resistenciaInterna = const Value.absent(),
          }) =>
              MedicaoElementoMpbbTableCompanion.insert(
            id: id,
            formularioMpbbId: formularioMpbbId,
            elementoBateriaNumero: elementoBateriaNumero,
            tensao: tensao,
            resistenciaInterna: resistenciaInterna,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$MedicaoElementoMpbbTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({formularioMpbbId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (formularioMpbbId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.formularioMpbbId,
                    referencedTable: $$MedicaoElementoMpbbTableTableReferences
                        ._formularioMpbbIdTable(db),
                    referencedColumn: $$MedicaoElementoMpbbTableTableReferences
                        ._formularioMpbbIdTable(db)
                        .id,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$MedicaoElementoMpbbTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $MedicaoElementoMpbbTableTable,
        MedicaoElementoMpbbTableData,
        $$MedicaoElementoMpbbTableTableFilterComposer,
        $$MedicaoElementoMpbbTableTableOrderingComposer,
        $$MedicaoElementoMpbbTableTableAnnotationComposer,
        $$MedicaoElementoMpbbTableTableCreateCompanionBuilder,
        $$MedicaoElementoMpbbTableTableUpdateCompanionBuilder,
        (
          MedicaoElementoMpbbTableData,
          $$MedicaoElementoMpbbTableTableReferences
        ),
        MedicaoElementoMpbbTableData,
        PrefetchHooks Function({bool formularioMpbbId})>;
typedef $$MpDjFormTableTableCreateCompanionBuilder = MpDjFormTableCompanion
    Function({
  Value<int> id,
  required String atividadeId,
  Value<CaracterizacaoEnsaio?> caracterizacaoEnsaio,
  Value<String?> disjuntorFabricante,
  Value<String?> disjuntorAnoFabricacao,
  Value<double?> disjuntorTensaoNominal,
  Value<int?> disjuntorCorrenteNominal,
  Value<int?> disjuntorCapInterrupcaoNominal,
  Value<TipoExtinsaoDisjuntor?> disjuntorTipoExtinsao,
  Value<String?> disjuntorTipoAcionamento,
  Value<double?> disjuntorPressaoSf6Nominal,
  Value<double?> disjuntorPressaoSf6NominalTemperatura,
  Value<double?> dadoPlacaFechamento,
  Value<double?> dadoPlacaAbertura,
  Value<DateTime> dataEnsaio,
});
typedef $$MpDjFormTableTableUpdateCompanionBuilder = MpDjFormTableCompanion
    Function({
  Value<int> id,
  Value<String> atividadeId,
  Value<CaracterizacaoEnsaio?> caracterizacaoEnsaio,
  Value<String?> disjuntorFabricante,
  Value<String?> disjuntorAnoFabricacao,
  Value<double?> disjuntorTensaoNominal,
  Value<int?> disjuntorCorrenteNominal,
  Value<int?> disjuntorCapInterrupcaoNominal,
  Value<TipoExtinsaoDisjuntor?> disjuntorTipoExtinsao,
  Value<String?> disjuntorTipoAcionamento,
  Value<double?> disjuntorPressaoSf6Nominal,
  Value<double?> disjuntorPressaoSf6NominalTemperatura,
  Value<double?> dadoPlacaFechamento,
  Value<double?> dadoPlacaAbertura,
  Value<DateTime> dataEnsaio,
});

final class $$MpDjFormTableTableReferences extends BaseReferences<_$AppDatabase,
    $MpDjFormTableTable, MpDjFormTableData> {
  $$MpDjFormTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AtividadeTableTable _atividadeIdTable(_$AppDatabase db) =>
      db.atividadeTable.createAlias($_aliasNameGenerator(
          db.mpDjFormTable.atividadeId, db.atividadeTable.uuid));

  $$AtividadeTableTableProcessedTableManager get atividadeId {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.uuid($_item.atividadeId));
    final item = $_typedResult.readTableOrNull(_atividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$MpDjPressaoSf6TableTable,
      List<MpDjPressaoSf6TableData>> _mpDjPressaoSf6TableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.mpDjPressaoSf6Table,
          aliasName: $_aliasNameGenerator(
              db.mpDjFormTable.id, db.mpDjPressaoSf6Table.mpDjFormId));

  $$MpDjPressaoSf6TableTableProcessedTableManager get mpDjPressaoSf6TableRefs {
    final manager =
        $$MpDjPressaoSf6TableTableTableManager($_db, $_db.mpDjPressaoSf6Table)
            .filter((f) => f.mpDjFormId.id($_item.id));

    final cache =
        $_typedResult.readTableOrNull(_mpDjPressaoSf6TableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$MpDjResistenciaContatoTableTable,
          List<MpDjResistenciaContatoTableData>>
      _mpDjResistenciaContatoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.mpDjResistenciaContatoTable,
              aliasName: $_aliasNameGenerator(db.mpDjFormTable.id,
                  db.mpDjResistenciaContatoTable.mpDjFormId));

  $$MpDjResistenciaContatoTableTableProcessedTableManager
      get mpDjResistenciaContatoTableRefs {
    final manager = $$MpDjResistenciaContatoTableTableTableManager(
            $_db, $_db.mpDjResistenciaContatoTable)
        .filter((f) => f.mpDjFormId.id($_item.id));

    final cache = $_typedResult
        .readTableOrNull(_mpDjResistenciaContatoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$MpDjResistenciaIsolamentoTableTable,
          List<MpDjResistenciaIsolamentoTableData>>
      _mpDjResistenciaIsolamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.mpDjResistenciaIsolamentoTable,
              aliasName: $_aliasNameGenerator(db.mpDjFormTable.id,
                  db.mpDjResistenciaIsolamentoTable.mpDjFormId));

  $$MpDjResistenciaIsolamentoTableTableProcessedTableManager
      get mpDjResistenciaIsolamentoTableRefs {
    final manager = $$MpDjResistenciaIsolamentoTableTableTableManager(
            $_db, $_db.mpDjResistenciaIsolamentoTable)
        .filter((f) => f.mpDjFormId.id($_item.id));

    final cache = $_typedResult
        .readTableOrNull(_mpDjResistenciaIsolamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$MpDjFormTableTableFilterComposer
    extends Composer<_$AppDatabase, $MpDjFormTableTable> {
  $$MpDjFormTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<CaracterizacaoEnsaio?, CaracterizacaoEnsaio,
          String>
      get caracterizacaoEnsaio => $composableBuilder(
          column: $table.caracterizacaoEnsaio,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<String> get disjuntorFabricante => $composableBuilder(
      column: $table.disjuntorFabricante,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get disjuntorAnoFabricacao => $composableBuilder(
      column: $table.disjuntorAnoFabricacao,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get disjuntorTensaoNominal => $composableBuilder(
      column: $table.disjuntorTensaoNominal,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get disjuntorCorrenteNominal => $composableBuilder(
      column: $table.disjuntorCorrenteNominal,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get disjuntorCapInterrupcaoNominal => $composableBuilder(
      column: $table.disjuntorCapInterrupcaoNominal,
      builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<TipoExtinsaoDisjuntor?, TipoExtinsaoDisjuntor,
          String>
      get disjuntorTipoExtinsao => $composableBuilder(
          column: $table.disjuntorTipoExtinsao,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<String> get disjuntorTipoAcionamento => $composableBuilder(
      column: $table.disjuntorTipoAcionamento,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get disjuntorPressaoSf6Nominal => $composableBuilder(
      column: $table.disjuntorPressaoSf6Nominal,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get disjuntorPressaoSf6NominalTemperatura =>
      $composableBuilder(
          column: $table.disjuntorPressaoSf6NominalTemperatura,
          builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get dadoPlacaFechamento => $composableBuilder(
      column: $table.dadoPlacaFechamento,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get dadoPlacaAbertura => $composableBuilder(
      column: $table.dadoPlacaAbertura,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get dataEnsaio => $composableBuilder(
      column: $table.dataEnsaio, builder: (column) => ColumnFilters(column));

  $$AtividadeTableTableFilterComposer get atividadeId {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<bool> mpDjPressaoSf6TableRefs(
      Expression<bool> Function($$MpDjPressaoSf6TableTableFilterComposer f) f) {
    final $$MpDjPressaoSf6TableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.id,
        referencedTable: $db.mpDjPressaoSf6Table,
        getReferencedColumn: (t) => t.mpDjFormId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjPressaoSf6TableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjPressaoSf6Table,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> mpDjResistenciaContatoTableRefs(
      Expression<bool> Function(
              $$MpDjResistenciaContatoTableTableFilterComposer f)
          f) {
    final $$MpDjResistenciaContatoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.mpDjResistenciaContatoTable,
            getReferencedColumn: (t) => t.mpDjFormId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MpDjResistenciaContatoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.mpDjResistenciaContatoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> mpDjResistenciaIsolamentoTableRefs(
      Expression<bool> Function(
              $$MpDjResistenciaIsolamentoTableTableFilterComposer f)
          f) {
    final $$MpDjResistenciaIsolamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.mpDjResistenciaIsolamentoTable,
            getReferencedColumn: (t) => t.mpDjFormId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MpDjResistenciaIsolamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.mpDjResistenciaIsolamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$MpDjFormTableTableOrderingComposer
    extends Composer<_$AppDatabase, $MpDjFormTableTable> {
  $$MpDjFormTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get caracterizacaoEnsaio => $composableBuilder(
      column: $table.caracterizacaoEnsaio,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get disjuntorFabricante => $composableBuilder(
      column: $table.disjuntorFabricante,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get disjuntorAnoFabricacao => $composableBuilder(
      column: $table.disjuntorAnoFabricacao,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get disjuntorTensaoNominal => $composableBuilder(
      column: $table.disjuntorTensaoNominal,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get disjuntorCorrenteNominal => $composableBuilder(
      column: $table.disjuntorCorrenteNominal,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get disjuntorCapInterrupcaoNominal => $composableBuilder(
      column: $table.disjuntorCapInterrupcaoNominal,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get disjuntorTipoExtinsao => $composableBuilder(
      column: $table.disjuntorTipoExtinsao,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get disjuntorTipoAcionamento => $composableBuilder(
      column: $table.disjuntorTipoAcionamento,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get disjuntorPressaoSf6Nominal => $composableBuilder(
      column: $table.disjuntorPressaoSf6Nominal,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get disjuntorPressaoSf6NominalTemperatura =>
      $composableBuilder(
          column: $table.disjuntorPressaoSf6NominalTemperatura,
          builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get dadoPlacaFechamento => $composableBuilder(
      column: $table.dadoPlacaFechamento,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get dadoPlacaAbertura => $composableBuilder(
      column: $table.dadoPlacaAbertura,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataEnsaio => $composableBuilder(
      column: $table.dataEnsaio, builder: (column) => ColumnOrderings(column));

  $$AtividadeTableTableOrderingComposer get atividadeId {
    final $$AtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjFormTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $MpDjFormTableTable> {
  $$MpDjFormTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumnWithTypeConverter<CaracterizacaoEnsaio?, String>
      get caracterizacaoEnsaio => $composableBuilder(
          column: $table.caracterizacaoEnsaio, builder: (column) => column);

  GeneratedColumn<String> get disjuntorFabricante => $composableBuilder(
      column: $table.disjuntorFabricante, builder: (column) => column);

  GeneratedColumn<String> get disjuntorAnoFabricacao => $composableBuilder(
      column: $table.disjuntorAnoFabricacao, builder: (column) => column);

  GeneratedColumn<double> get disjuntorTensaoNominal => $composableBuilder(
      column: $table.disjuntorTensaoNominal, builder: (column) => column);

  GeneratedColumn<int> get disjuntorCorrenteNominal => $composableBuilder(
      column: $table.disjuntorCorrenteNominal, builder: (column) => column);

  GeneratedColumn<int> get disjuntorCapInterrupcaoNominal => $composableBuilder(
      column: $table.disjuntorCapInterrupcaoNominal,
      builder: (column) => column);

  GeneratedColumnWithTypeConverter<TipoExtinsaoDisjuntor?, String>
      get disjuntorTipoExtinsao => $composableBuilder(
          column: $table.disjuntorTipoExtinsao, builder: (column) => column);

  GeneratedColumn<String> get disjuntorTipoAcionamento => $composableBuilder(
      column: $table.disjuntorTipoAcionamento, builder: (column) => column);

  GeneratedColumn<double> get disjuntorPressaoSf6Nominal => $composableBuilder(
      column: $table.disjuntorPressaoSf6Nominal, builder: (column) => column);

  GeneratedColumn<double> get disjuntorPressaoSf6NominalTemperatura =>
      $composableBuilder(
          column: $table.disjuntorPressaoSf6NominalTemperatura,
          builder: (column) => column);

  GeneratedColumn<double> get dadoPlacaFechamento => $composableBuilder(
      column: $table.dadoPlacaFechamento, builder: (column) => column);

  GeneratedColumn<double> get dadoPlacaAbertura => $composableBuilder(
      column: $table.dadoPlacaAbertura, builder: (column) => column);

  GeneratedColumn<DateTime> get dataEnsaio => $composableBuilder(
      column: $table.dataEnsaio, builder: (column) => column);

  $$AtividadeTableTableAnnotationComposer get atividadeId {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<T> mpDjPressaoSf6TableRefs<T extends Object>(
      Expression<T> Function($$MpDjPressaoSf6TableTableAnnotationComposer a)
          f) {
    final $$MpDjPressaoSf6TableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.mpDjPressaoSf6Table,
            getReferencedColumn: (t) => t.mpDjFormId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MpDjPressaoSf6TableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.mpDjPressaoSf6Table,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> mpDjResistenciaContatoTableRefs<T extends Object>(
      Expression<T> Function(
              $$MpDjResistenciaContatoTableTableAnnotationComposer a)
          f) {
    final $$MpDjResistenciaContatoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.mpDjResistenciaContatoTable,
            getReferencedColumn: (t) => t.mpDjFormId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MpDjResistenciaContatoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.mpDjResistenciaContatoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> mpDjResistenciaIsolamentoTableRefs<T extends Object>(
      Expression<T> Function(
              $$MpDjResistenciaIsolamentoTableTableAnnotationComposer a)
          f) {
    final $$MpDjResistenciaIsolamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.mpDjResistenciaIsolamentoTable,
            getReferencedColumn: (t) => t.mpDjFormId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$MpDjResistenciaIsolamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.mpDjResistenciaIsolamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$MpDjFormTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $MpDjFormTableTable,
    MpDjFormTableData,
    $$MpDjFormTableTableFilterComposer,
    $$MpDjFormTableTableOrderingComposer,
    $$MpDjFormTableTableAnnotationComposer,
    $$MpDjFormTableTableCreateCompanionBuilder,
    $$MpDjFormTableTableUpdateCompanionBuilder,
    (MpDjFormTableData, $$MpDjFormTableTableReferences),
    MpDjFormTableData,
    PrefetchHooks Function(
        {bool atividadeId,
        bool mpDjPressaoSf6TableRefs,
        bool mpDjResistenciaContatoTableRefs,
        bool mpDjResistenciaIsolamentoTableRefs})> {
  $$MpDjFormTableTableTableManager(_$AppDatabase db, $MpDjFormTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MpDjFormTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$MpDjFormTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MpDjFormTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> atividadeId = const Value.absent(),
            Value<CaracterizacaoEnsaio?> caracterizacaoEnsaio =
                const Value.absent(),
            Value<String?> disjuntorFabricante = const Value.absent(),
            Value<String?> disjuntorAnoFabricacao = const Value.absent(),
            Value<double?> disjuntorTensaoNominal = const Value.absent(),
            Value<int?> disjuntorCorrenteNominal = const Value.absent(),
            Value<int?> disjuntorCapInterrupcaoNominal = const Value.absent(),
            Value<TipoExtinsaoDisjuntor?> disjuntorTipoExtinsao =
                const Value.absent(),
            Value<String?> disjuntorTipoAcionamento = const Value.absent(),
            Value<double?> disjuntorPressaoSf6Nominal = const Value.absent(),
            Value<double?> disjuntorPressaoSf6NominalTemperatura =
                const Value.absent(),
            Value<double?> dadoPlacaFechamento = const Value.absent(),
            Value<double?> dadoPlacaAbertura = const Value.absent(),
            Value<DateTime> dataEnsaio = const Value.absent(),
          }) =>
              MpDjFormTableCompanion(
            id: id,
            atividadeId: atividadeId,
            caracterizacaoEnsaio: caracterizacaoEnsaio,
            disjuntorFabricante: disjuntorFabricante,
            disjuntorAnoFabricacao: disjuntorAnoFabricacao,
            disjuntorTensaoNominal: disjuntorTensaoNominal,
            disjuntorCorrenteNominal: disjuntorCorrenteNominal,
            disjuntorCapInterrupcaoNominal: disjuntorCapInterrupcaoNominal,
            disjuntorTipoExtinsao: disjuntorTipoExtinsao,
            disjuntorTipoAcionamento: disjuntorTipoAcionamento,
            disjuntorPressaoSf6Nominal: disjuntorPressaoSf6Nominal,
            disjuntorPressaoSf6NominalTemperatura:
                disjuntorPressaoSf6NominalTemperatura,
            dadoPlacaFechamento: dadoPlacaFechamento,
            dadoPlacaAbertura: dadoPlacaAbertura,
            dataEnsaio: dataEnsaio,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String atividadeId,
            Value<CaracterizacaoEnsaio?> caracterizacaoEnsaio =
                const Value.absent(),
            Value<String?> disjuntorFabricante = const Value.absent(),
            Value<String?> disjuntorAnoFabricacao = const Value.absent(),
            Value<double?> disjuntorTensaoNominal = const Value.absent(),
            Value<int?> disjuntorCorrenteNominal = const Value.absent(),
            Value<int?> disjuntorCapInterrupcaoNominal = const Value.absent(),
            Value<TipoExtinsaoDisjuntor?> disjuntorTipoExtinsao =
                const Value.absent(),
            Value<String?> disjuntorTipoAcionamento = const Value.absent(),
            Value<double?> disjuntorPressaoSf6Nominal = const Value.absent(),
            Value<double?> disjuntorPressaoSf6NominalTemperatura =
                const Value.absent(),
            Value<double?> dadoPlacaFechamento = const Value.absent(),
            Value<double?> dadoPlacaAbertura = const Value.absent(),
            Value<DateTime> dataEnsaio = const Value.absent(),
          }) =>
              MpDjFormTableCompanion.insert(
            id: id,
            atividadeId: atividadeId,
            caracterizacaoEnsaio: caracterizacaoEnsaio,
            disjuntorFabricante: disjuntorFabricante,
            disjuntorAnoFabricacao: disjuntorAnoFabricacao,
            disjuntorTensaoNominal: disjuntorTensaoNominal,
            disjuntorCorrenteNominal: disjuntorCorrenteNominal,
            disjuntorCapInterrupcaoNominal: disjuntorCapInterrupcaoNominal,
            disjuntorTipoExtinsao: disjuntorTipoExtinsao,
            disjuntorTipoAcionamento: disjuntorTipoAcionamento,
            disjuntorPressaoSf6Nominal: disjuntorPressaoSf6Nominal,
            disjuntorPressaoSf6NominalTemperatura:
                disjuntorPressaoSf6NominalTemperatura,
            dadoPlacaFechamento: dadoPlacaFechamento,
            dadoPlacaAbertura: dadoPlacaAbertura,
            dataEnsaio: dataEnsaio,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$MpDjFormTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {atividadeId = false,
              mpDjPressaoSf6TableRefs = false,
              mpDjResistenciaContatoTableRefs = false,
              mpDjResistenciaIsolamentoTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (mpDjPressaoSf6TableRefs) db.mpDjPressaoSf6Table,
                if (mpDjResistenciaContatoTableRefs)
                  db.mpDjResistenciaContatoTable,
                if (mpDjResistenciaIsolamentoTableRefs)
                  db.mpDjResistenciaIsolamentoTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (atividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.atividadeId,
                    referencedTable:
                        $$MpDjFormTableTableReferences._atividadeIdTable(db),
                    referencedColumn: $$MpDjFormTableTableReferences
                        ._atividadeIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (mpDjPressaoSf6TableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$MpDjFormTableTableReferences
                            ._mpDjPressaoSf6TableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$MpDjFormTableTableReferences(db, table, p0)
                                .mpDjPressaoSf6TableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.mpDjFormId == item.id),
                        typedResults: items),
                  if (mpDjResistenciaContatoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$MpDjFormTableTableReferences
                            ._mpDjResistenciaContatoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$MpDjFormTableTableReferences(db, table, p0)
                                .mpDjResistenciaContatoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.mpDjFormId == item.id),
                        typedResults: items),
                  if (mpDjResistenciaIsolamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$MpDjFormTableTableReferences
                            ._mpDjResistenciaIsolamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$MpDjFormTableTableReferences(db, table, p0)
                                .mpDjResistenciaIsolamentoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.mpDjFormId == item.id),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$MpDjFormTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $MpDjFormTableTable,
    MpDjFormTableData,
    $$MpDjFormTableTableFilterComposer,
    $$MpDjFormTableTableOrderingComposer,
    $$MpDjFormTableTableAnnotationComposer,
    $$MpDjFormTableTableCreateCompanionBuilder,
    $$MpDjFormTableTableUpdateCompanionBuilder,
    (MpDjFormTableData, $$MpDjFormTableTableReferences),
    MpDjFormTableData,
    PrefetchHooks Function(
        {bool atividadeId,
        bool mpDjPressaoSf6TableRefs,
        bool mpDjResistenciaContatoTableRefs,
        bool mpDjResistenciaIsolamentoTableRefs})>;
typedef $$MpDjPressaoSf6TableTableCreateCompanionBuilder
    = MpDjPressaoSf6TableCompanion Function({
  Value<int> id,
  required int mpDjFormId,
  required FaseAnomalia fase,
  required double valorPressao,
  required double temperatura,
});
typedef $$MpDjPressaoSf6TableTableUpdateCompanionBuilder
    = MpDjPressaoSf6TableCompanion Function({
  Value<int> id,
  Value<int> mpDjFormId,
  Value<FaseAnomalia> fase,
  Value<double> valorPressao,
  Value<double> temperatura,
});

final class $$MpDjPressaoSf6TableTableReferences extends BaseReferences<
    _$AppDatabase, $MpDjPressaoSf6TableTable, MpDjPressaoSf6TableData> {
  $$MpDjPressaoSf6TableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $MpDjFormTableTable _mpDjFormIdTable(_$AppDatabase db) =>
      db.mpDjFormTable.createAlias($_aliasNameGenerator(
          db.mpDjPressaoSf6Table.mpDjFormId, db.mpDjFormTable.id));

  $$MpDjFormTableTableProcessedTableManager get mpDjFormId {
    final manager = $$MpDjFormTableTableTableManager($_db, $_db.mpDjFormTable)
        .filter((f) => f.id($_item.mpDjFormId));
    final item = $_typedResult.readTableOrNull(_mpDjFormIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$MpDjPressaoSf6TableTableFilterComposer
    extends Composer<_$AppDatabase, $MpDjPressaoSf6TableTable> {
  $$MpDjPressaoSf6TableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<FaseAnomalia, FaseAnomalia, String> get fase =>
      $composableBuilder(
          column: $table.fase,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<double> get valorPressao => $composableBuilder(
      column: $table.valorPressao, builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get temperatura => $composableBuilder(
      column: $table.temperatura, builder: (column) => ColumnFilters(column));

  $$MpDjFormTableTableFilterComposer get mpDjFormId {
    final $$MpDjFormTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjPressaoSf6TableTableOrderingComposer
    extends Composer<_$AppDatabase, $MpDjPressaoSf6TableTable> {
  $$MpDjPressaoSf6TableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get fase => $composableBuilder(
      column: $table.fase, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get valorPressao => $composableBuilder(
      column: $table.valorPressao,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get temperatura => $composableBuilder(
      column: $table.temperatura, builder: (column) => ColumnOrderings(column));

  $$MpDjFormTableTableOrderingComposer get mpDjFormId {
    final $$MpDjFormTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableOrderingComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjPressaoSf6TableTableAnnotationComposer
    extends Composer<_$AppDatabase, $MpDjPressaoSf6TableTable> {
  $$MpDjPressaoSf6TableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumnWithTypeConverter<FaseAnomalia, String> get fase =>
      $composableBuilder(column: $table.fase, builder: (column) => column);

  GeneratedColumn<double> get valorPressao => $composableBuilder(
      column: $table.valorPressao, builder: (column) => column);

  GeneratedColumn<double> get temperatura => $composableBuilder(
      column: $table.temperatura, builder: (column) => column);

  $$MpDjFormTableTableAnnotationComposer get mpDjFormId {
    final $$MpDjFormTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableAnnotationComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjPressaoSf6TableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $MpDjPressaoSf6TableTable,
    MpDjPressaoSf6TableData,
    $$MpDjPressaoSf6TableTableFilterComposer,
    $$MpDjPressaoSf6TableTableOrderingComposer,
    $$MpDjPressaoSf6TableTableAnnotationComposer,
    $$MpDjPressaoSf6TableTableCreateCompanionBuilder,
    $$MpDjPressaoSf6TableTableUpdateCompanionBuilder,
    (MpDjPressaoSf6TableData, $$MpDjPressaoSf6TableTableReferences),
    MpDjPressaoSf6TableData,
    PrefetchHooks Function({bool mpDjFormId})> {
  $$MpDjPressaoSf6TableTableTableManager(
      _$AppDatabase db, $MpDjPressaoSf6TableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MpDjPressaoSf6TableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$MpDjPressaoSf6TableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MpDjPressaoSf6TableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> mpDjFormId = const Value.absent(),
            Value<FaseAnomalia> fase = const Value.absent(),
            Value<double> valorPressao = const Value.absent(),
            Value<double> temperatura = const Value.absent(),
          }) =>
              MpDjPressaoSf6TableCompanion(
            id: id,
            mpDjFormId: mpDjFormId,
            fase: fase,
            valorPressao: valorPressao,
            temperatura: temperatura,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int mpDjFormId,
            required FaseAnomalia fase,
            required double valorPressao,
            required double temperatura,
          }) =>
              MpDjPressaoSf6TableCompanion.insert(
            id: id,
            mpDjFormId: mpDjFormId,
            fase: fase,
            valorPressao: valorPressao,
            temperatura: temperatura,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$MpDjPressaoSf6TableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({mpDjFormId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (mpDjFormId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.mpDjFormId,
                    referencedTable: $$MpDjPressaoSf6TableTableReferences
                        ._mpDjFormIdTable(db),
                    referencedColumn: $$MpDjPressaoSf6TableTableReferences
                        ._mpDjFormIdTable(db)
                        .id,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$MpDjPressaoSf6TableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $MpDjPressaoSf6TableTable,
    MpDjPressaoSf6TableData,
    $$MpDjPressaoSf6TableTableFilterComposer,
    $$MpDjPressaoSf6TableTableOrderingComposer,
    $$MpDjPressaoSf6TableTableAnnotationComposer,
    $$MpDjPressaoSf6TableTableCreateCompanionBuilder,
    $$MpDjPressaoSf6TableTableUpdateCompanionBuilder,
    (MpDjPressaoSf6TableData, $$MpDjPressaoSf6TableTableReferences),
    MpDjPressaoSf6TableData,
    PrefetchHooks Function({bool mpDjFormId})>;
typedef $$MpDjTempoOperacaoTableTableCreateCompanionBuilder
    = MpDjTempoOperacaoTableCompanion Function({
  Value<int> id,
  required int mpDjFormId,
  required int formularioDisjuntorId,
  required FaseAnomalia fase,
  Value<double?> fechamentoBobina1,
  Value<double?> fechamentoBobina2,
  Value<double?> aberturaBobina1,
  Value<double?> aberturaBobina2,
});
typedef $$MpDjTempoOperacaoTableTableUpdateCompanionBuilder
    = MpDjTempoOperacaoTableCompanion Function({
  Value<int> id,
  Value<int> mpDjFormId,
  Value<int> formularioDisjuntorId,
  Value<FaseAnomalia> fase,
  Value<double?> fechamentoBobina1,
  Value<double?> fechamentoBobina2,
  Value<double?> aberturaBobina1,
  Value<double?> aberturaBobina2,
});

final class $$MpDjTempoOperacaoTableTableReferences extends BaseReferences<
    _$AppDatabase, $MpDjTempoOperacaoTableTable, MpDjTempoOperacaoTableData> {
  $$MpDjTempoOperacaoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $MpDjFormTableTable _mpDjFormIdTable(_$AppDatabase db) =>
      db.mpDjFormTable.createAlias($_aliasNameGenerator(
          db.mpDjTempoOperacaoTable.mpDjFormId, db.mpDjFormTable.id));

  $$MpDjFormTableTableProcessedTableManager get mpDjFormId {
    final manager = $$MpDjFormTableTableTableManager($_db, $_db.mpDjFormTable)
        .filter((f) => f.id($_item.mpDjFormId));
    final item = $_typedResult.readTableOrNull(_mpDjFormIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $MpDjFormTableTable _formularioDisjuntorIdTable(_$AppDatabase db) =>
      db.mpDjFormTable.createAlias($_aliasNameGenerator(
          db.mpDjTempoOperacaoTable.formularioDisjuntorId,
          db.mpDjFormTable.id));

  $$MpDjFormTableTableProcessedTableManager get formularioDisjuntorId {
    final manager = $$MpDjFormTableTableTableManager($_db, $_db.mpDjFormTable)
        .filter((f) => f.id($_item.formularioDisjuntorId));
    final item =
        $_typedResult.readTableOrNull(_formularioDisjuntorIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$MpDjTempoOperacaoTableTableFilterComposer
    extends Composer<_$AppDatabase, $MpDjTempoOperacaoTableTable> {
  $$MpDjTempoOperacaoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<FaseAnomalia, FaseAnomalia, String> get fase =>
      $composableBuilder(
          column: $table.fase,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<double> get fechamentoBobina1 => $composableBuilder(
      column: $table.fechamentoBobina1,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get fechamentoBobina2 => $composableBuilder(
      column: $table.fechamentoBobina2,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get aberturaBobina1 => $composableBuilder(
      column: $table.aberturaBobina1,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get aberturaBobina2 => $composableBuilder(
      column: $table.aberturaBobina2,
      builder: (column) => ColumnFilters(column));

  $$MpDjFormTableTableFilterComposer get mpDjFormId {
    final $$MpDjFormTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$MpDjFormTableTableFilterComposer get formularioDisjuntorId {
    final $$MpDjFormTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.formularioDisjuntorId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjTempoOperacaoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $MpDjTempoOperacaoTableTable> {
  $$MpDjTempoOperacaoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get fase => $composableBuilder(
      column: $table.fase, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get fechamentoBobina1 => $composableBuilder(
      column: $table.fechamentoBobina1,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get fechamentoBobina2 => $composableBuilder(
      column: $table.fechamentoBobina2,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get aberturaBobina1 => $composableBuilder(
      column: $table.aberturaBobina1,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get aberturaBobina2 => $composableBuilder(
      column: $table.aberturaBobina2,
      builder: (column) => ColumnOrderings(column));

  $$MpDjFormTableTableOrderingComposer get mpDjFormId {
    final $$MpDjFormTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableOrderingComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$MpDjFormTableTableOrderingComposer get formularioDisjuntorId {
    final $$MpDjFormTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.formularioDisjuntorId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableOrderingComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjTempoOperacaoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $MpDjTempoOperacaoTableTable> {
  $$MpDjTempoOperacaoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumnWithTypeConverter<FaseAnomalia, String> get fase =>
      $composableBuilder(column: $table.fase, builder: (column) => column);

  GeneratedColumn<double> get fechamentoBobina1 => $composableBuilder(
      column: $table.fechamentoBobina1, builder: (column) => column);

  GeneratedColumn<double> get fechamentoBobina2 => $composableBuilder(
      column: $table.fechamentoBobina2, builder: (column) => column);

  GeneratedColumn<double> get aberturaBobina1 => $composableBuilder(
      column: $table.aberturaBobina1, builder: (column) => column);

  GeneratedColumn<double> get aberturaBobina2 => $composableBuilder(
      column: $table.aberturaBobina2, builder: (column) => column);

  $$MpDjFormTableTableAnnotationComposer get mpDjFormId {
    final $$MpDjFormTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableAnnotationComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$MpDjFormTableTableAnnotationComposer get formularioDisjuntorId {
    final $$MpDjFormTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.formularioDisjuntorId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableAnnotationComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjTempoOperacaoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $MpDjTempoOperacaoTableTable,
    MpDjTempoOperacaoTableData,
    $$MpDjTempoOperacaoTableTableFilterComposer,
    $$MpDjTempoOperacaoTableTableOrderingComposer,
    $$MpDjTempoOperacaoTableTableAnnotationComposer,
    $$MpDjTempoOperacaoTableTableCreateCompanionBuilder,
    $$MpDjTempoOperacaoTableTableUpdateCompanionBuilder,
    (MpDjTempoOperacaoTableData, $$MpDjTempoOperacaoTableTableReferences),
    MpDjTempoOperacaoTableData,
    PrefetchHooks Function({bool mpDjFormId, bool formularioDisjuntorId})> {
  $$MpDjTempoOperacaoTableTableTableManager(
      _$AppDatabase db, $MpDjTempoOperacaoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MpDjTempoOperacaoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$MpDjTempoOperacaoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MpDjTempoOperacaoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> mpDjFormId = const Value.absent(),
            Value<int> formularioDisjuntorId = const Value.absent(),
            Value<FaseAnomalia> fase = const Value.absent(),
            Value<double?> fechamentoBobina1 = const Value.absent(),
            Value<double?> fechamentoBobina2 = const Value.absent(),
            Value<double?> aberturaBobina1 = const Value.absent(),
            Value<double?> aberturaBobina2 = const Value.absent(),
          }) =>
              MpDjTempoOperacaoTableCompanion(
            id: id,
            mpDjFormId: mpDjFormId,
            formularioDisjuntorId: formularioDisjuntorId,
            fase: fase,
            fechamentoBobina1: fechamentoBobina1,
            fechamentoBobina2: fechamentoBobina2,
            aberturaBobina1: aberturaBobina1,
            aberturaBobina2: aberturaBobina2,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int mpDjFormId,
            required int formularioDisjuntorId,
            required FaseAnomalia fase,
            Value<double?> fechamentoBobina1 = const Value.absent(),
            Value<double?> fechamentoBobina2 = const Value.absent(),
            Value<double?> aberturaBobina1 = const Value.absent(),
            Value<double?> aberturaBobina2 = const Value.absent(),
          }) =>
              MpDjTempoOperacaoTableCompanion.insert(
            id: id,
            mpDjFormId: mpDjFormId,
            formularioDisjuntorId: formularioDisjuntorId,
            fase: fase,
            fechamentoBobina1: fechamentoBobina1,
            fechamentoBobina2: fechamentoBobina2,
            aberturaBobina1: aberturaBobina1,
            aberturaBobina2: aberturaBobina2,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$MpDjTempoOperacaoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {mpDjFormId = false, formularioDisjuntorId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (mpDjFormId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.mpDjFormId,
                    referencedTable: $$MpDjTempoOperacaoTableTableReferences
                        ._mpDjFormIdTable(db),
                    referencedColumn: $$MpDjTempoOperacaoTableTableReferences
                        ._mpDjFormIdTable(db)
                        .id,
                  ) as T;
                }
                if (formularioDisjuntorId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.formularioDisjuntorId,
                    referencedTable: $$MpDjTempoOperacaoTableTableReferences
                        ._formularioDisjuntorIdTable(db),
                    referencedColumn: $$MpDjTempoOperacaoTableTableReferences
                        ._formularioDisjuntorIdTable(db)
                        .id,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$MpDjTempoOperacaoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $MpDjTempoOperacaoTableTable,
        MpDjTempoOperacaoTableData,
        $$MpDjTempoOperacaoTableTableFilterComposer,
        $$MpDjTempoOperacaoTableTableOrderingComposer,
        $$MpDjTempoOperacaoTableTableAnnotationComposer,
        $$MpDjTempoOperacaoTableTableCreateCompanionBuilder,
        $$MpDjTempoOperacaoTableTableUpdateCompanionBuilder,
        (MpDjTempoOperacaoTableData, $$MpDjTempoOperacaoTableTableReferences),
        MpDjTempoOperacaoTableData,
        PrefetchHooks Function({bool mpDjFormId, bool formularioDisjuntorId})>;
typedef $$MpDjResistenciaContatoTableTableCreateCompanionBuilder
    = MpDjResistenciaContatoTableCompanion Function({
  Value<int> id,
  required int mpDjFormId,
  required int numeroCamara,
  Value<double?> resistenciaFaseA,
  Value<double?> resistenciaFaseB,
  Value<double?> resistenciaFaseC,
  Value<double?> temperaturaDisjuntor,
  Value<double?> umidadeRelativaAr,
});
typedef $$MpDjResistenciaContatoTableTableUpdateCompanionBuilder
    = MpDjResistenciaContatoTableCompanion Function({
  Value<int> id,
  Value<int> mpDjFormId,
  Value<int> numeroCamara,
  Value<double?> resistenciaFaseA,
  Value<double?> resistenciaFaseB,
  Value<double?> resistenciaFaseC,
  Value<double?> temperaturaDisjuntor,
  Value<double?> umidadeRelativaAr,
});

final class $$MpDjResistenciaContatoTableTableReferences extends BaseReferences<
    _$AppDatabase,
    $MpDjResistenciaContatoTableTable,
    MpDjResistenciaContatoTableData> {
  $$MpDjResistenciaContatoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $MpDjFormTableTable _mpDjFormIdTable(_$AppDatabase db) =>
      db.mpDjFormTable.createAlias($_aliasNameGenerator(
          db.mpDjResistenciaContatoTable.mpDjFormId, db.mpDjFormTable.id));

  $$MpDjFormTableTableProcessedTableManager get mpDjFormId {
    final manager = $$MpDjFormTableTableTableManager($_db, $_db.mpDjFormTable)
        .filter((f) => f.id($_item.mpDjFormId));
    final item = $_typedResult.readTableOrNull(_mpDjFormIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$MpDjResistenciaContatoTableTableFilterComposer
    extends Composer<_$AppDatabase, $MpDjResistenciaContatoTableTable> {
  $$MpDjResistenciaContatoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get numeroCamara => $composableBuilder(
      column: $table.numeroCamara, builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaFaseA => $composableBuilder(
      column: $table.resistenciaFaseA,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaFaseB => $composableBuilder(
      column: $table.resistenciaFaseB,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaFaseC => $composableBuilder(
      column: $table.resistenciaFaseC,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get temperaturaDisjuntor => $composableBuilder(
      column: $table.temperaturaDisjuntor,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get umidadeRelativaAr => $composableBuilder(
      column: $table.umidadeRelativaAr,
      builder: (column) => ColumnFilters(column));

  $$MpDjFormTableTableFilterComposer get mpDjFormId {
    final $$MpDjFormTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjResistenciaContatoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $MpDjResistenciaContatoTableTable> {
  $$MpDjResistenciaContatoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get numeroCamara => $composableBuilder(
      column: $table.numeroCamara,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaFaseA => $composableBuilder(
      column: $table.resistenciaFaseA,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaFaseB => $composableBuilder(
      column: $table.resistenciaFaseB,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaFaseC => $composableBuilder(
      column: $table.resistenciaFaseC,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get temperaturaDisjuntor => $composableBuilder(
      column: $table.temperaturaDisjuntor,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get umidadeRelativaAr => $composableBuilder(
      column: $table.umidadeRelativaAr,
      builder: (column) => ColumnOrderings(column));

  $$MpDjFormTableTableOrderingComposer get mpDjFormId {
    final $$MpDjFormTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableOrderingComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjResistenciaContatoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $MpDjResistenciaContatoTableTable> {
  $$MpDjResistenciaContatoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get numeroCamara => $composableBuilder(
      column: $table.numeroCamara, builder: (column) => column);

  GeneratedColumn<double> get resistenciaFaseA => $composableBuilder(
      column: $table.resistenciaFaseA, builder: (column) => column);

  GeneratedColumn<double> get resistenciaFaseB => $composableBuilder(
      column: $table.resistenciaFaseB, builder: (column) => column);

  GeneratedColumn<double> get resistenciaFaseC => $composableBuilder(
      column: $table.resistenciaFaseC, builder: (column) => column);

  GeneratedColumn<double> get temperaturaDisjuntor => $composableBuilder(
      column: $table.temperaturaDisjuntor, builder: (column) => column);

  GeneratedColumn<double> get umidadeRelativaAr => $composableBuilder(
      column: $table.umidadeRelativaAr, builder: (column) => column);

  $$MpDjFormTableTableAnnotationComposer get mpDjFormId {
    final $$MpDjFormTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableAnnotationComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjResistenciaContatoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $MpDjResistenciaContatoTableTable,
    MpDjResistenciaContatoTableData,
    $$MpDjResistenciaContatoTableTableFilterComposer,
    $$MpDjResistenciaContatoTableTableOrderingComposer,
    $$MpDjResistenciaContatoTableTableAnnotationComposer,
    $$MpDjResistenciaContatoTableTableCreateCompanionBuilder,
    $$MpDjResistenciaContatoTableTableUpdateCompanionBuilder,
    (
      MpDjResistenciaContatoTableData,
      $$MpDjResistenciaContatoTableTableReferences
    ),
    MpDjResistenciaContatoTableData,
    PrefetchHooks Function({bool mpDjFormId})> {
  $$MpDjResistenciaContatoTableTableTableManager(
      _$AppDatabase db, $MpDjResistenciaContatoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MpDjResistenciaContatoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$MpDjResistenciaContatoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MpDjResistenciaContatoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> mpDjFormId = const Value.absent(),
            Value<int> numeroCamara = const Value.absent(),
            Value<double?> resistenciaFaseA = const Value.absent(),
            Value<double?> resistenciaFaseB = const Value.absent(),
            Value<double?> resistenciaFaseC = const Value.absent(),
            Value<double?> temperaturaDisjuntor = const Value.absent(),
            Value<double?> umidadeRelativaAr = const Value.absent(),
          }) =>
              MpDjResistenciaContatoTableCompanion(
            id: id,
            mpDjFormId: mpDjFormId,
            numeroCamara: numeroCamara,
            resistenciaFaseA: resistenciaFaseA,
            resistenciaFaseB: resistenciaFaseB,
            resistenciaFaseC: resistenciaFaseC,
            temperaturaDisjuntor: temperaturaDisjuntor,
            umidadeRelativaAr: umidadeRelativaAr,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int mpDjFormId,
            required int numeroCamara,
            Value<double?> resistenciaFaseA = const Value.absent(),
            Value<double?> resistenciaFaseB = const Value.absent(),
            Value<double?> resistenciaFaseC = const Value.absent(),
            Value<double?> temperaturaDisjuntor = const Value.absent(),
            Value<double?> umidadeRelativaAr = const Value.absent(),
          }) =>
              MpDjResistenciaContatoTableCompanion.insert(
            id: id,
            mpDjFormId: mpDjFormId,
            numeroCamara: numeroCamara,
            resistenciaFaseA: resistenciaFaseA,
            resistenciaFaseB: resistenciaFaseB,
            resistenciaFaseC: resistenciaFaseC,
            temperaturaDisjuntor: temperaturaDisjuntor,
            umidadeRelativaAr: umidadeRelativaAr,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$MpDjResistenciaContatoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({mpDjFormId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (mpDjFormId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.mpDjFormId,
                    referencedTable:
                        $$MpDjResistenciaContatoTableTableReferences
                            ._mpDjFormIdTable(db),
                    referencedColumn:
                        $$MpDjResistenciaContatoTableTableReferences
                            ._mpDjFormIdTable(db)
                            .id,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$MpDjResistenciaContatoTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $MpDjResistenciaContatoTableTable,
    MpDjResistenciaContatoTableData,
    $$MpDjResistenciaContatoTableTableFilterComposer,
    $$MpDjResistenciaContatoTableTableOrderingComposer,
    $$MpDjResistenciaContatoTableTableAnnotationComposer,
    $$MpDjResistenciaContatoTableTableCreateCompanionBuilder,
    $$MpDjResistenciaContatoTableTableUpdateCompanionBuilder,
    (
      MpDjResistenciaContatoTableData,
      $$MpDjResistenciaContatoTableTableReferences
    ),
    MpDjResistenciaContatoTableData,
    PrefetchHooks Function({bool mpDjFormId})>;
typedef $$MpDjResistenciaIsolamentoTableTableCreateCompanionBuilder
    = MpDjResistenciaIsolamentoTableCompanion Function({
  Value<int> id,
  required int mpDjFormId,
  required int numeroCamara,
  required PosicaoDisjuntorEnsaio linha,
  required PosicaoDisjuntorEnsaio terra,
  required PosicaoDisjuntorEnsaio guarda,
  required double tensaoKv,
  Value<double?> resistenciaFaseA,
  Value<double?> resistenciaFaseB,
  Value<double?> resistenciaFaseC,
  Value<double?> temperaturaDisjuntor,
  Value<double?> umidadeRelativaAr,
});
typedef $$MpDjResistenciaIsolamentoTableTableUpdateCompanionBuilder
    = MpDjResistenciaIsolamentoTableCompanion Function({
  Value<int> id,
  Value<int> mpDjFormId,
  Value<int> numeroCamara,
  Value<PosicaoDisjuntorEnsaio> linha,
  Value<PosicaoDisjuntorEnsaio> terra,
  Value<PosicaoDisjuntorEnsaio> guarda,
  Value<double> tensaoKv,
  Value<double?> resistenciaFaseA,
  Value<double?> resistenciaFaseB,
  Value<double?> resistenciaFaseC,
  Value<double?> temperaturaDisjuntor,
  Value<double?> umidadeRelativaAr,
});

final class $$MpDjResistenciaIsolamentoTableTableReferences
    extends BaseReferences<_$AppDatabase, $MpDjResistenciaIsolamentoTableTable,
        MpDjResistenciaIsolamentoTableData> {
  $$MpDjResistenciaIsolamentoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $MpDjFormTableTable _mpDjFormIdTable(_$AppDatabase db) =>
      db.mpDjFormTable.createAlias($_aliasNameGenerator(
          db.mpDjResistenciaIsolamentoTable.mpDjFormId, db.mpDjFormTable.id));

  $$MpDjFormTableTableProcessedTableManager get mpDjFormId {
    final manager = $$MpDjFormTableTableTableManager($_db, $_db.mpDjFormTable)
        .filter((f) => f.id($_item.mpDjFormId));
    final item = $_typedResult.readTableOrNull(_mpDjFormIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$MpDjResistenciaIsolamentoTableTableFilterComposer
    extends Composer<_$AppDatabase, $MpDjResistenciaIsolamentoTableTable> {
  $$MpDjResistenciaIsolamentoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get numeroCamara => $composableBuilder(
      column: $table.numeroCamara, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<PosicaoDisjuntorEnsaio, PosicaoDisjuntorEnsaio,
          String>
      get linha => $composableBuilder(
          column: $table.linha,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnWithTypeConverterFilters<PosicaoDisjuntorEnsaio, PosicaoDisjuntorEnsaio,
          String>
      get terra => $composableBuilder(
          column: $table.terra,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnWithTypeConverterFilters<PosicaoDisjuntorEnsaio, PosicaoDisjuntorEnsaio,
          String>
      get guarda => $composableBuilder(
          column: $table.guarda,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<double> get tensaoKv => $composableBuilder(
      column: $table.tensaoKv, builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaFaseA => $composableBuilder(
      column: $table.resistenciaFaseA,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaFaseB => $composableBuilder(
      column: $table.resistenciaFaseB,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get resistenciaFaseC => $composableBuilder(
      column: $table.resistenciaFaseC,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get temperaturaDisjuntor => $composableBuilder(
      column: $table.temperaturaDisjuntor,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<double> get umidadeRelativaAr => $composableBuilder(
      column: $table.umidadeRelativaAr,
      builder: (column) => ColumnFilters(column));

  $$MpDjFormTableTableFilterComposer get mpDjFormId {
    final $$MpDjFormTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableFilterComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjResistenciaIsolamentoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $MpDjResistenciaIsolamentoTableTable> {
  $$MpDjResistenciaIsolamentoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get numeroCamara => $composableBuilder(
      column: $table.numeroCamara,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get linha => $composableBuilder(
      column: $table.linha, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get terra => $composableBuilder(
      column: $table.terra, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get guarda => $composableBuilder(
      column: $table.guarda, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get tensaoKv => $composableBuilder(
      column: $table.tensaoKv, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaFaseA => $composableBuilder(
      column: $table.resistenciaFaseA,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaFaseB => $composableBuilder(
      column: $table.resistenciaFaseB,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get resistenciaFaseC => $composableBuilder(
      column: $table.resistenciaFaseC,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get temperaturaDisjuntor => $composableBuilder(
      column: $table.temperaturaDisjuntor,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<double> get umidadeRelativaAr => $composableBuilder(
      column: $table.umidadeRelativaAr,
      builder: (column) => ColumnOrderings(column));

  $$MpDjFormTableTableOrderingComposer get mpDjFormId {
    final $$MpDjFormTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableOrderingComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjResistenciaIsolamentoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $MpDjResistenciaIsolamentoTableTable> {
  $$MpDjResistenciaIsolamentoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get numeroCamara => $composableBuilder(
      column: $table.numeroCamara, builder: (column) => column);

  GeneratedColumnWithTypeConverter<PosicaoDisjuntorEnsaio, String> get linha =>
      $composableBuilder(column: $table.linha, builder: (column) => column);

  GeneratedColumnWithTypeConverter<PosicaoDisjuntorEnsaio, String> get terra =>
      $composableBuilder(column: $table.terra, builder: (column) => column);

  GeneratedColumnWithTypeConverter<PosicaoDisjuntorEnsaio, String> get guarda =>
      $composableBuilder(column: $table.guarda, builder: (column) => column);

  GeneratedColumn<double> get tensaoKv =>
      $composableBuilder(column: $table.tensaoKv, builder: (column) => column);

  GeneratedColumn<double> get resistenciaFaseA => $composableBuilder(
      column: $table.resistenciaFaseA, builder: (column) => column);

  GeneratedColumn<double> get resistenciaFaseB => $composableBuilder(
      column: $table.resistenciaFaseB, builder: (column) => column);

  GeneratedColumn<double> get resistenciaFaseC => $composableBuilder(
      column: $table.resistenciaFaseC, builder: (column) => column);

  GeneratedColumn<double> get temperaturaDisjuntor => $composableBuilder(
      column: $table.temperaturaDisjuntor, builder: (column) => column);

  GeneratedColumn<double> get umidadeRelativaAr => $composableBuilder(
      column: $table.umidadeRelativaAr, builder: (column) => column);

  $$MpDjFormTableTableAnnotationComposer get mpDjFormId {
    final $$MpDjFormTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.mpDjFormId,
        referencedTable: $db.mpDjFormTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$MpDjFormTableTableAnnotationComposer(
              $db: $db,
              $table: $db.mpDjFormTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$MpDjResistenciaIsolamentoTableTableTableManager
    extends RootTableManager<
        _$AppDatabase,
        $MpDjResistenciaIsolamentoTableTable,
        MpDjResistenciaIsolamentoTableData,
        $$MpDjResistenciaIsolamentoTableTableFilterComposer,
        $$MpDjResistenciaIsolamentoTableTableOrderingComposer,
        $$MpDjResistenciaIsolamentoTableTableAnnotationComposer,
        $$MpDjResistenciaIsolamentoTableTableCreateCompanionBuilder,
        $$MpDjResistenciaIsolamentoTableTableUpdateCompanionBuilder,
        (
          MpDjResistenciaIsolamentoTableData,
          $$MpDjResistenciaIsolamentoTableTableReferences
        ),
        MpDjResistenciaIsolamentoTableData,
        PrefetchHooks Function({bool mpDjFormId})> {
  $$MpDjResistenciaIsolamentoTableTableTableManager(
      _$AppDatabase db, $MpDjResistenciaIsolamentoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MpDjResistenciaIsolamentoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$MpDjResistenciaIsolamentoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MpDjResistenciaIsolamentoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> mpDjFormId = const Value.absent(),
            Value<int> numeroCamara = const Value.absent(),
            Value<PosicaoDisjuntorEnsaio> linha = const Value.absent(),
            Value<PosicaoDisjuntorEnsaio> terra = const Value.absent(),
            Value<PosicaoDisjuntorEnsaio> guarda = const Value.absent(),
            Value<double> tensaoKv = const Value.absent(),
            Value<double?> resistenciaFaseA = const Value.absent(),
            Value<double?> resistenciaFaseB = const Value.absent(),
            Value<double?> resistenciaFaseC = const Value.absent(),
            Value<double?> temperaturaDisjuntor = const Value.absent(),
            Value<double?> umidadeRelativaAr = const Value.absent(),
          }) =>
              MpDjResistenciaIsolamentoTableCompanion(
            id: id,
            mpDjFormId: mpDjFormId,
            numeroCamara: numeroCamara,
            linha: linha,
            terra: terra,
            guarda: guarda,
            tensaoKv: tensaoKv,
            resistenciaFaseA: resistenciaFaseA,
            resistenciaFaseB: resistenciaFaseB,
            resistenciaFaseC: resistenciaFaseC,
            temperaturaDisjuntor: temperaturaDisjuntor,
            umidadeRelativaAr: umidadeRelativaAr,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int mpDjFormId,
            required int numeroCamara,
            required PosicaoDisjuntorEnsaio linha,
            required PosicaoDisjuntorEnsaio terra,
            required PosicaoDisjuntorEnsaio guarda,
            required double tensaoKv,
            Value<double?> resistenciaFaseA = const Value.absent(),
            Value<double?> resistenciaFaseB = const Value.absent(),
            Value<double?> resistenciaFaseC = const Value.absent(),
            Value<double?> temperaturaDisjuntor = const Value.absent(),
            Value<double?> umidadeRelativaAr = const Value.absent(),
          }) =>
              MpDjResistenciaIsolamentoTableCompanion.insert(
            id: id,
            mpDjFormId: mpDjFormId,
            numeroCamara: numeroCamara,
            linha: linha,
            terra: terra,
            guarda: guarda,
            tensaoKv: tensaoKv,
            resistenciaFaseA: resistenciaFaseA,
            resistenciaFaseB: resistenciaFaseB,
            resistenciaFaseC: resistenciaFaseC,
            temperaturaDisjuntor: temperaturaDisjuntor,
            umidadeRelativaAr: umidadeRelativaAr,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$MpDjResistenciaIsolamentoTableTableReferences(
                        db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({mpDjFormId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (mpDjFormId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.mpDjFormId,
                    referencedTable:
                        $$MpDjResistenciaIsolamentoTableTableReferences
                            ._mpDjFormIdTable(db),
                    referencedColumn:
                        $$MpDjResistenciaIsolamentoTableTableReferences
                            ._mpDjFormIdTable(db)
                            .id,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$MpDjResistenciaIsolamentoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $MpDjResistenciaIsolamentoTableTable,
        MpDjResistenciaIsolamentoTableData,
        $$MpDjResistenciaIsolamentoTableTableFilterComposer,
        $$MpDjResistenciaIsolamentoTableTableOrderingComposer,
        $$MpDjResistenciaIsolamentoTableTableAnnotationComposer,
        $$MpDjResistenciaIsolamentoTableTableCreateCompanionBuilder,
        $$MpDjResistenciaIsolamentoTableTableUpdateCompanionBuilder,
        (
          MpDjResistenciaIsolamentoTableData,
          $$MpDjResistenciaIsolamentoTableTableReferences
        ),
        MpDjResistenciaIsolamentoTableData,
        PrefetchHooks Function({bool mpDjFormId})>;
typedef $$TecnicoTableTableCreateCompanionBuilder = TecnicoTableCompanion
    Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  required String matricula,
});
typedef $$TecnicoTableTableUpdateCompanionBuilder = TecnicoTableCompanion
    Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<String> matricula,
});

final class $$TecnicoTableTableReferences extends BaseReferences<_$AppDatabase,
    $TecnicoTableTable, TecnicoTableData> {
  $$TecnicoTableTableReferences(super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$AprAssinaturaTableTable,
      List<AprAssinaturaTableData>> _aprAssinaturaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprAssinaturaTable,
          aliasName: $_aliasNameGenerator(
              db.tecnicoTable.uuid, db.aprAssinaturaTable.tecnicoId));

  $$AprAssinaturaTableTableProcessedTableManager get aprAssinaturaTableRefs {
    final manager =
        $$AprAssinaturaTableTableTableManager($_db, $_db.aprAssinaturaTable)
            .filter((f) => f.tecnicoId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprAssinaturaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$TecnicoTableTableFilterComposer
    extends Composer<_$AppDatabase, $TecnicoTableTable> {
  $$TecnicoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get matricula => $composableBuilder(
      column: $table.matricula, builder: (column) => ColumnFilters(column));

  Expression<bool> aprAssinaturaTableRefs(
      Expression<bool> Function($$AprAssinaturaTableTableFilterComposer f) f) {
    final $$AprAssinaturaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprAssinaturaTable,
        getReferencedColumn: (t) => t.tecnicoId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprAssinaturaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprAssinaturaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$TecnicoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $TecnicoTableTable> {
  $$TecnicoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get matricula => $composableBuilder(
      column: $table.matricula, builder: (column) => ColumnOrderings(column));
}

class $$TecnicoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $TecnicoTableTable> {
  $$TecnicoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get matricula =>
      $composableBuilder(column: $table.matricula, builder: (column) => column);

  Expression<T> aprAssinaturaTableRefs<T extends Object>(
      Expression<T> Function($$AprAssinaturaTableTableAnnotationComposer a) f) {
    final $$AprAssinaturaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprAssinaturaTable,
            getReferencedColumn: (t) => t.tecnicoId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprAssinaturaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprAssinaturaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$TecnicoTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $TecnicoTableTable,
    TecnicoTableData,
    $$TecnicoTableTableFilterComposer,
    $$TecnicoTableTableOrderingComposer,
    $$TecnicoTableTableAnnotationComposer,
    $$TecnicoTableTableCreateCompanionBuilder,
    $$TecnicoTableTableUpdateCompanionBuilder,
    (TecnicoTableData, $$TecnicoTableTableReferences),
    TecnicoTableData,
    PrefetchHooks Function({bool aprAssinaturaTableRefs})> {
  $$TecnicoTableTableTableManager(_$AppDatabase db, $TecnicoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$TecnicoTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$TecnicoTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$TecnicoTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String> matricula = const Value.absent(),
          }) =>
              TecnicoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            matricula: matricula,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            required String matricula,
          }) =>
              TecnicoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            matricula: matricula,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$TecnicoTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({aprAssinaturaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (aprAssinaturaTableRefs) db.aprAssinaturaTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (aprAssinaturaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$TecnicoTableTableReferences
                            ._aprAssinaturaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$TecnicoTableTableReferences(db, table, p0)
                                .aprAssinaturaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.tecnicoId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$TecnicoTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $TecnicoTableTable,
    TecnicoTableData,
    $$TecnicoTableTableFilterComposer,
    $$TecnicoTableTableOrderingComposer,
    $$TecnicoTableTableAnnotationComposer,
    $$TecnicoTableTableCreateCompanionBuilder,
    $$TecnicoTableTableUpdateCompanionBuilder,
    (TecnicoTableData, $$TecnicoTableTableReferences),
    TecnicoTableData,
    PrefetchHooks Function({bool aprAssinaturaTableRefs})>;
typedef $$AprTableTableCreateCompanionBuilder = AprTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String nome,
  Value<String?> descricao,
});
typedef $$AprTableTableUpdateCompanionBuilder = AprTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> nome,
  Value<String?> descricao,
});

final class $$AprTableTableReferences
    extends BaseReferences<_$AppDatabase, $AprTableTable, AprTableData> {
  $$AprTableTableReferences(super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$AprPerguntaRelacionamentoTableTable,
          List<AprPerguntaRelacionamentoTableData>>
      _aprPerguntaRelacionamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.aprPerguntaRelacionamentoTable,
              aliasName: $_aliasNameGenerator(
                  db.aprTable.uuid, db.aprPerguntaRelacionamentoTable.aprId));

  $$AprPerguntaRelacionamentoTableTableProcessedTableManager
      get aprPerguntaRelacionamentoTableRefs {
    final manager = $$AprPerguntaRelacionamentoTableTableTableManager(
            $_db, $_db.aprPerguntaRelacionamentoTable)
        .filter((f) => f.aprId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_aprPerguntaRelacionamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprTipoAtividadeTableTable,
      List<AprTipoAtividadeTableData>> _aprTipoAtividadeTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprTipoAtividadeTable,
          aliasName: $_aliasNameGenerator(
              db.aprTable.uuid, db.aprTipoAtividadeTable.aprId));

  $$AprTipoAtividadeTableTableProcessedTableManager
      get aprTipoAtividadeTableRefs {
    final manager = $$AprTipoAtividadeTableTableTableManager(
            $_db, $_db.aprTipoAtividadeTable)
        .filter((f) => f.aprId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprTipoAtividadeTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprPreenchidaTableTable,
      List<AprPreenchidaTableData>> _aprPreenchidaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprPreenchidaTable,
          aliasName: $_aliasNameGenerator(
              db.aprTable.uuid, db.aprPreenchidaTable.aprId));

  $$AprPreenchidaTableTableProcessedTableManager get aprPreenchidaTableRefs {
    final manager =
        $$AprPreenchidaTableTableTableManager($_db, $_db.aprPreenchidaTable)
            .filter((f) => f.aprId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprPreenchidaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$AprTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprTableTable> {
  $$AprTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnFilters(column));

  Expression<bool> aprPerguntaRelacionamentoTableRefs(
      Expression<bool> Function(
              $$AprPerguntaRelacionamentoTableTableFilterComposer f)
          f) {
    final $$AprPerguntaRelacionamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.aprId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPerguntaRelacionamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.aprPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> aprTipoAtividadeTableRefs(
      Expression<bool> Function($$AprTipoAtividadeTableTableFilterComposer f)
          f) {
    final $$AprTipoAtividadeTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprTipoAtividadeTable,
            getReferencedColumn: (t) => t.aprId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprTipoAtividadeTableTableFilterComposer(
                  $db: $db,
                  $table: $db.aprTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> aprPreenchidaTableRefs(
      Expression<bool> Function($$AprPreenchidaTableTableFilterComposer f) f) {
    final $$AprPreenchidaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.aprId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$AprTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprTableTable> {
  $$AprTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get nome => $composableBuilder(
      column: $table.nome, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get descricao => $composableBuilder(
      column: $table.descricao, builder: (column) => ColumnOrderings(column));
}

class $$AprTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprTableTable> {
  $$AprTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  Expression<T> aprPerguntaRelacionamentoTableRefs<T extends Object>(
      Expression<T> Function(
              $$AprPerguntaRelacionamentoTableTableAnnotationComposer a)
          f) {
    final $$AprPerguntaRelacionamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.aprId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPerguntaRelacionamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> aprTipoAtividadeTableRefs<T extends Object>(
      Expression<T> Function($$AprTipoAtividadeTableTableAnnotationComposer a)
          f) {
    final $$AprTipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprTipoAtividadeTable,
            getReferencedColumn: (t) => t.aprId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprTipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprTipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> aprPreenchidaTableRefs<T extends Object>(
      Expression<T> Function($$AprPreenchidaTableTableAnnotationComposer a) f) {
    final $$AprPreenchidaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPreenchidaTable,
            getReferencedColumn: (t) => t.aprId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPreenchidaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPreenchidaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$AprTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AprTableTable,
    AprTableData,
    $$AprTableTableFilterComposer,
    $$AprTableTableOrderingComposer,
    $$AprTableTableAnnotationComposer,
    $$AprTableTableCreateCompanionBuilder,
    $$AprTableTableUpdateCompanionBuilder,
    (AprTableData, $$AprTableTableReferences),
    AprTableData,
    PrefetchHooks Function(
        {bool aprPerguntaRelacionamentoTableRefs,
        bool aprTipoAtividadeTableRefs,
        bool aprPreenchidaTableRefs})> {
  $$AprTableTableTableManager(_$AppDatabase db, $AprTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AprTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> nome = const Value.absent(),
            Value<String?> descricao = const Value.absent(),
          }) =>
              AprTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            descricao: descricao,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String nome,
            Value<String?> descricao = const Value.absent(),
          }) =>
              AprTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            nome: nome,
            descricao: descricao,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) =>
                  (e.readTable(table), $$AprTableTableReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: (
              {aprPerguntaRelacionamentoTableRefs = false,
              aprTipoAtividadeTableRefs = false,
              aprPreenchidaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (aprPerguntaRelacionamentoTableRefs)
                  db.aprPerguntaRelacionamentoTable,
                if (aprTipoAtividadeTableRefs) db.aprTipoAtividadeTable,
                if (aprPreenchidaTableRefs) db.aprPreenchidaTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (aprPerguntaRelacionamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprTableTableReferences
                            ._aprPerguntaRelacionamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprTableTableReferences(db, table, p0)
                                .aprPerguntaRelacionamentoTableRefs,
                        referencedItemsForCurrentItem: (item,
                                referencedItems) =>
                            referencedItems.where((e) => e.aprId == item.uuid),
                        typedResults: items),
                  if (aprTipoAtividadeTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprTableTableReferences
                            ._aprTipoAtividadeTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprTableTableReferences(db, table, p0)
                                .aprTipoAtividadeTableRefs,
                        referencedItemsForCurrentItem: (item,
                                referencedItems) =>
                            referencedItems.where((e) => e.aprId == item.uuid),
                        typedResults: items),
                  if (aprPreenchidaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprTableTableReferences
                            ._aprPreenchidaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprTableTableReferences(db, table, p0)
                                .aprPreenchidaTableRefs,
                        referencedItemsForCurrentItem: (item,
                                referencedItems) =>
                            referencedItems.where((e) => e.aprId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$AprTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AprTableTable,
    AprTableData,
    $$AprTableTableFilterComposer,
    $$AprTableTableOrderingComposer,
    $$AprTableTableAnnotationComposer,
    $$AprTableTableCreateCompanionBuilder,
    $$AprTableTableUpdateCompanionBuilder,
    (AprTableData, $$AprTableTableReferences),
    AprTableData,
    PrefetchHooks Function(
        {bool aprPerguntaRelacionamentoTableRefs,
        bool aprTipoAtividadeTableRefs,
        bool aprPreenchidaTableRefs})>;
typedef $$AprQuestionTableTableCreateCompanionBuilder
    = AprQuestionTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String texto,
});
typedef $$AprQuestionTableTableUpdateCompanionBuilder
    = AprQuestionTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> texto,
});

final class $$AprQuestionTableTableReferences extends BaseReferences<
    _$AppDatabase, $AprQuestionTableTable, AprQuestionTableData> {
  $$AprQuestionTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static MultiTypedResultKey<$AprPerguntaRelacionamentoTableTable,
          List<AprPerguntaRelacionamentoTableData>>
      _aprPerguntaRelacionamentoTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.aprPerguntaRelacionamentoTable,
              aliasName: $_aliasNameGenerator(db.aprQuestionTable.uuid,
                  db.aprPerguntaRelacionamentoTable.perguntaId));

  $$AprPerguntaRelacionamentoTableTableProcessedTableManager
      get aprPerguntaRelacionamentoTableRefs {
    final manager = $$AprPerguntaRelacionamentoTableTableTableManager(
            $_db, $_db.aprPerguntaRelacionamentoTable)
        .filter((f) => f.perguntaId.uuid($_item.uuid));

    final cache = $_typedResult
        .readTableOrNull(_aprPerguntaRelacionamentoTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprRespostaTableTable, List<AprRespostaTableData>>
      _aprRespostaTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.aprRespostaTable,
              aliasName: $_aliasNameGenerator(
                  db.aprQuestionTable.uuid, db.aprRespostaTable.perguntaId));

  $$AprRespostaTableTableProcessedTableManager get aprRespostaTableRefs {
    final manager =
        $$AprRespostaTableTableTableManager($_db, $_db.aprRespostaTable)
            .filter((f) => f.perguntaId.uuid($_item.uuid));

    final cache =
        $_typedResult.readTableOrNull(_aprRespostaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$AprQuestionTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprQuestionTableTable> {
  $$AprQuestionTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get texto => $composableBuilder(
      column: $table.texto, builder: (column) => ColumnFilters(column));

  Expression<bool> aprPerguntaRelacionamentoTableRefs(
      Expression<bool> Function(
              $$AprPerguntaRelacionamentoTableTableFilterComposer f)
          f) {
    final $$AprPerguntaRelacionamentoTableTableFilterComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.perguntaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPerguntaRelacionamentoTableTableFilterComposer(
                  $db: $db,
                  $table: $db.aprPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<bool> aprRespostaTableRefs(
      Expression<bool> Function($$AprRespostaTableTableFilterComposer f) f) {
    final $$AprRespostaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprRespostaTable,
        getReferencedColumn: (t) => t.perguntaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprRespostaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprRespostaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$AprQuestionTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprQuestionTableTable> {
  $$AprQuestionTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get texto => $composableBuilder(
      column: $table.texto, builder: (column) => ColumnOrderings(column));
}

class $$AprQuestionTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprQuestionTableTable> {
  $$AprQuestionTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<String> get texto =>
      $composableBuilder(column: $table.texto, builder: (column) => column);

  Expression<T> aprPerguntaRelacionamentoTableRefs<T extends Object>(
      Expression<T> Function(
              $$AprPerguntaRelacionamentoTableTableAnnotationComposer a)
          f) {
    final $$AprPerguntaRelacionamentoTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.uuid,
            referencedTable: $db.aprPerguntaRelacionamentoTable,
            getReferencedColumn: (t) => t.perguntaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPerguntaRelacionamentoTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPerguntaRelacionamentoTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }

  Expression<T> aprRespostaTableRefs<T extends Object>(
      Expression<T> Function($$AprRespostaTableTableAnnotationComposer a) f) {
    final $$AprRespostaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.uuid,
        referencedTable: $db.aprRespostaTable,
        getReferencedColumn: (t) => t.perguntaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprRespostaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprRespostaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$AprQuestionTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AprQuestionTableTable,
    AprQuestionTableData,
    $$AprQuestionTableTableFilterComposer,
    $$AprQuestionTableTableOrderingComposer,
    $$AprQuestionTableTableAnnotationComposer,
    $$AprQuestionTableTableCreateCompanionBuilder,
    $$AprQuestionTableTableUpdateCompanionBuilder,
    (AprQuestionTableData, $$AprQuestionTableTableReferences),
    AprQuestionTableData,
    PrefetchHooks Function(
        {bool aprPerguntaRelacionamentoTableRefs, bool aprRespostaTableRefs})> {
  $$AprQuestionTableTableTableManager(
      _$AppDatabase db, $AprQuestionTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprQuestionTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AprQuestionTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprQuestionTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> texto = const Value.absent(),
          }) =>
              AprQuestionTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            texto: texto,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String texto,
          }) =>
              AprQuestionTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            texto: texto,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AprQuestionTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {aprPerguntaRelacionamentoTableRefs = false,
              aprRespostaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (aprPerguntaRelacionamentoTableRefs)
                  db.aprPerguntaRelacionamentoTable,
                if (aprRespostaTableRefs) db.aprRespostaTable
              ],
              addJoins: null,
              getPrefetchedDataCallback: (items) async {
                return [
                  if (aprPerguntaRelacionamentoTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprQuestionTableTableReferences
                            ._aprPerguntaRelacionamentoTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprQuestionTableTableReferences(db, table, p0)
                                .aprPerguntaRelacionamentoTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.perguntaId == item.uuid),
                        typedResults: items),
                  if (aprRespostaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprQuestionTableTableReferences
                            ._aprRespostaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprQuestionTableTableReferences(db, table, p0)
                                .aprRespostaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.perguntaId == item.uuid),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$AprQuestionTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AprQuestionTableTable,
    AprQuestionTableData,
    $$AprQuestionTableTableFilterComposer,
    $$AprQuestionTableTableOrderingComposer,
    $$AprQuestionTableTableAnnotationComposer,
    $$AprQuestionTableTableCreateCompanionBuilder,
    $$AprQuestionTableTableUpdateCompanionBuilder,
    (AprQuestionTableData, $$AprQuestionTableTableReferences),
    AprQuestionTableData,
    PrefetchHooks Function(
        {bool aprPerguntaRelacionamentoTableRefs, bool aprRespostaTableRefs})>;
typedef $$AprPerguntaRelacionamentoTableTableCreateCompanionBuilder
    = AprPerguntaRelacionamentoTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String aprId,
  required String perguntaId,
  required int ordem,
});
typedef $$AprPerguntaRelacionamentoTableTableUpdateCompanionBuilder
    = AprPerguntaRelacionamentoTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> aprId,
  Value<String> perguntaId,
  Value<int> ordem,
});

final class $$AprPerguntaRelacionamentoTableTableReferences
    extends BaseReferences<_$AppDatabase, $AprPerguntaRelacionamentoTableTable,
        AprPerguntaRelacionamentoTableData> {
  $$AprPerguntaRelacionamentoTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AprTableTable _aprIdTable(_$AppDatabase db) =>
      db.aprTable.createAlias($_aliasNameGenerator(
          db.aprPerguntaRelacionamentoTable.aprId, db.aprTable.uuid));

  $$AprTableTableProcessedTableManager get aprId {
    final manager = $$AprTableTableTableManager($_db, $_db.aprTable)
        .filter((f) => f.uuid($_item.aprId));
    final item = $_typedResult.readTableOrNull(_aprIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $AprQuestionTableTable _perguntaIdTable(_$AppDatabase db) =>
      db.aprQuestionTable.createAlias($_aliasNameGenerator(
          db.aprPerguntaRelacionamentoTable.perguntaId,
          db.aprQuestionTable.uuid));

  $$AprQuestionTableTableProcessedTableManager get perguntaId {
    final manager =
        $$AprQuestionTableTableTableManager($_db, $_db.aprQuestionTable)
            .filter((f) => f.uuid($_item.perguntaId));
    final item = $_typedResult.readTableOrNull(_perguntaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$AprPerguntaRelacionamentoTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprPerguntaRelacionamentoTableTable> {
  $$AprPerguntaRelacionamentoTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  ColumnFilters<int> get ordem => $composableBuilder(
      column: $table.ordem, builder: (column) => ColumnFilters(column));

  $$AprTableTableFilterComposer get aprId {
    final $$AprTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableFilterComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprQuestionTableTableFilterComposer get perguntaId {
    final $$AprQuestionTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.perguntaId,
        referencedTable: $db.aprQuestionTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprQuestionTableTableFilterComposer(
              $db: $db,
              $table: $db.aprQuestionTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprPerguntaRelacionamentoTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprPerguntaRelacionamentoTableTable> {
  $$AprPerguntaRelacionamentoTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<int> get ordem => $composableBuilder(
      column: $table.ordem, builder: (column) => ColumnOrderings(column));

  $$AprTableTableOrderingComposer get aprId {
    final $$AprTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprQuestionTableTableOrderingComposer get perguntaId {
    final $$AprQuestionTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.perguntaId,
        referencedTable: $db.aprQuestionTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprQuestionTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprQuestionTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprPerguntaRelacionamentoTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprPerguntaRelacionamentoTableTable> {
  $$AprPerguntaRelacionamentoTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  GeneratedColumn<int> get ordem =>
      $composableBuilder(column: $table.ordem, builder: (column) => column);

  $$AprTableTableAnnotationComposer get aprId {
    final $$AprTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprQuestionTableTableAnnotationComposer get perguntaId {
    final $$AprQuestionTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.perguntaId,
        referencedTable: $db.aprQuestionTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprQuestionTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprQuestionTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprPerguntaRelacionamentoTableTableTableManager
    extends RootTableManager<
        _$AppDatabase,
        $AprPerguntaRelacionamentoTableTable,
        AprPerguntaRelacionamentoTableData,
        $$AprPerguntaRelacionamentoTableTableFilterComposer,
        $$AprPerguntaRelacionamentoTableTableOrderingComposer,
        $$AprPerguntaRelacionamentoTableTableAnnotationComposer,
        $$AprPerguntaRelacionamentoTableTableCreateCompanionBuilder,
        $$AprPerguntaRelacionamentoTableTableUpdateCompanionBuilder,
        (
          AprPerguntaRelacionamentoTableData,
          $$AprPerguntaRelacionamentoTableTableReferences
        ),
        AprPerguntaRelacionamentoTableData,
        PrefetchHooks Function({bool aprId, bool perguntaId})> {
  $$AprPerguntaRelacionamentoTableTableTableManager(
      _$AppDatabase db, $AprPerguntaRelacionamentoTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprPerguntaRelacionamentoTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$AprPerguntaRelacionamentoTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprPerguntaRelacionamentoTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> aprId = const Value.absent(),
            Value<String> perguntaId = const Value.absent(),
            Value<int> ordem = const Value.absent(),
          }) =>
              AprPerguntaRelacionamentoTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            aprId: aprId,
            perguntaId: perguntaId,
            ordem: ordem,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String aprId,
            required String perguntaId,
            required int ordem,
          }) =>
              AprPerguntaRelacionamentoTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            aprId: aprId,
            perguntaId: perguntaId,
            ordem: ordem,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AprPerguntaRelacionamentoTableTableReferences(
                        db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({aprId = false, perguntaId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (aprId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.aprId,
                    referencedTable:
                        $$AprPerguntaRelacionamentoTableTableReferences
                            ._aprIdTable(db),
                    referencedColumn:
                        $$AprPerguntaRelacionamentoTableTableReferences
                            ._aprIdTable(db)
                            .uuid,
                  ) as T;
                }
                if (perguntaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.perguntaId,
                    referencedTable:
                        $$AprPerguntaRelacionamentoTableTableReferences
                            ._perguntaIdTable(db),
                    referencedColumn:
                        $$AprPerguntaRelacionamentoTableTableReferences
                            ._perguntaIdTable(db)
                            .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$AprPerguntaRelacionamentoTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $AprPerguntaRelacionamentoTableTable,
        AprPerguntaRelacionamentoTableData,
        $$AprPerguntaRelacionamentoTableTableFilterComposer,
        $$AprPerguntaRelacionamentoTableTableOrderingComposer,
        $$AprPerguntaRelacionamentoTableTableAnnotationComposer,
        $$AprPerguntaRelacionamentoTableTableCreateCompanionBuilder,
        $$AprPerguntaRelacionamentoTableTableUpdateCompanionBuilder,
        (
          AprPerguntaRelacionamentoTableData,
          $$AprPerguntaRelacionamentoTableTableReferences
        ),
        AprPerguntaRelacionamentoTableData,
        PrefetchHooks Function({bool aprId, bool perguntaId})>;
typedef $$AprTipoAtividadeTableTableCreateCompanionBuilder
    = AprTipoAtividadeTableCompanion Function({
  Value<int> id,
  required String uuid,
  required DateTime createdAt,
  required DateTime updatedAt,
  Value<bool> sincronizado,
  required String tipoAtividadeId,
  required String aprId,
});
typedef $$AprTipoAtividadeTableTableUpdateCompanionBuilder
    = AprTipoAtividadeTableCompanion Function({
  Value<int> id,
  Value<String> uuid,
  Value<DateTime> createdAt,
  Value<DateTime> updatedAt,
  Value<bool> sincronizado,
  Value<String> tipoAtividadeId,
  Value<String> aprId,
});

final class $$AprTipoAtividadeTableTableReferences extends BaseReferences<
    _$AppDatabase, $AprTipoAtividadeTableTable, AprTipoAtividadeTableData> {
  $$AprTipoAtividadeTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $TipoAtividadeTableTable _tipoAtividadeIdTable(_$AppDatabase db) =>
      db.tipoAtividadeTable.createAlias($_aliasNameGenerator(
          db.aprTipoAtividadeTable.tipoAtividadeId,
          db.tipoAtividadeTable.uuid));

  $$TipoAtividadeTableTableProcessedTableManager get tipoAtividadeId {
    final manager =
        $$TipoAtividadeTableTableTableManager($_db, $_db.tipoAtividadeTable)
            .filter((f) => f.uuid($_item.tipoAtividadeId));
    final item = $_typedResult.readTableOrNull(_tipoAtividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $AprTableTable _aprIdTable(_$AppDatabase db) =>
      db.aprTable.createAlias($_aliasNameGenerator(
          db.aprTipoAtividadeTable.aprId, db.aprTable.uuid));

  $$AprTableTableProcessedTableManager get aprId {
    final manager = $$AprTableTableTableManager($_db, $_db.aprTable)
        .filter((f) => f.uuid($_item.aprId));
    final item = $_typedResult.readTableOrNull(_aprIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$AprTipoAtividadeTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprTipoAtividadeTableTable> {
  $$AprTipoAtividadeTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnFilters(column));

  ColumnFilters<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => ColumnFilters(column));

  $$TipoAtividadeTableTableFilterComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tipoAtividadeId,
        referencedTable: $db.tipoAtividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TipoAtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.tipoAtividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprTableTableFilterComposer get aprId {
    final $$AprTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableFilterComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprTipoAtividadeTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprTipoAtividadeTableTable> {
  $$AprTipoAtividadeTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get uuid => $composableBuilder(
      column: $table.uuid, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
      column: $table.createdAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
      column: $table.updatedAt, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado,
      builder: (column) => ColumnOrderings(column));

  $$TipoAtividadeTableTableOrderingComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tipoAtividadeId,
        referencedTable: $db.tipoAtividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TipoAtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.tipoAtividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprTableTableOrderingComposer get aprId {
    final $$AprTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprTipoAtividadeTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprTipoAtividadeTableTable> {
  $$AprTipoAtividadeTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get sincronizado => $composableBuilder(
      column: $table.sincronizado, builder: (column) => column);

  $$TipoAtividadeTableTableAnnotationComposer get tipoAtividadeId {
    final $$TipoAtividadeTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.tipoAtividadeId,
            referencedTable: $db.tipoAtividadeTable,
            getReferencedColumn: (t) => t.uuid,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$TipoAtividadeTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.tipoAtividadeTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$AprTableTableAnnotationComposer get aprId {
    final $$AprTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprTipoAtividadeTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AprTipoAtividadeTableTable,
    AprTipoAtividadeTableData,
    $$AprTipoAtividadeTableTableFilterComposer,
    $$AprTipoAtividadeTableTableOrderingComposer,
    $$AprTipoAtividadeTableTableAnnotationComposer,
    $$AprTipoAtividadeTableTableCreateCompanionBuilder,
    $$AprTipoAtividadeTableTableUpdateCompanionBuilder,
    (AprTipoAtividadeTableData, $$AprTipoAtividadeTableTableReferences),
    AprTipoAtividadeTableData,
    PrefetchHooks Function({bool tipoAtividadeId, bool aprId})> {
  $$AprTipoAtividadeTableTableTableManager(
      _$AppDatabase db, $AprTipoAtividadeTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprTipoAtividadeTableTableFilterComposer(
                  $db: db, $table: table),
          createOrderingComposer: () =>
              $$AprTipoAtividadeTableTableOrderingComposer(
                  $db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprTipoAtividadeTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> uuid = const Value.absent(),
            Value<DateTime> createdAt = const Value.absent(),
            Value<DateTime> updatedAt = const Value.absent(),
            Value<bool> sincronizado = const Value.absent(),
            Value<String> tipoAtividadeId = const Value.absent(),
            Value<String> aprId = const Value.absent(),
          }) =>
              AprTipoAtividadeTableCompanion(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            tipoAtividadeId: tipoAtividadeId,
            aprId: aprId,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String uuid,
            required DateTime createdAt,
            required DateTime updatedAt,
            Value<bool> sincronizado = const Value.absent(),
            required String tipoAtividadeId,
            required String aprId,
          }) =>
              AprTipoAtividadeTableCompanion.insert(
            id: id,
            uuid: uuid,
            createdAt: createdAt,
            updatedAt: updatedAt,
            sincronizado: sincronizado,
            tipoAtividadeId: tipoAtividadeId,
            aprId: aprId,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AprTipoAtividadeTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: ({tipoAtividadeId = false, aprId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (tipoAtividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.tipoAtividadeId,
                    referencedTable: $$AprTipoAtividadeTableTableReferences
                        ._tipoAtividadeIdTable(db),
                    referencedColumn: $$AprTipoAtividadeTableTableReferences
                        ._tipoAtividadeIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (aprId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.aprId,
                    referencedTable:
                        $$AprTipoAtividadeTableTableReferences._aprIdTable(db),
                    referencedColumn: $$AprTipoAtividadeTableTableReferences
                        ._aprIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$AprTipoAtividadeTableTableProcessedTableManager
    = ProcessedTableManager<
        _$AppDatabase,
        $AprTipoAtividadeTableTable,
        AprTipoAtividadeTableData,
        $$AprTipoAtividadeTableTableFilterComposer,
        $$AprTipoAtividadeTableTableOrderingComposer,
        $$AprTipoAtividadeTableTableAnnotationComposer,
        $$AprTipoAtividadeTableTableCreateCompanionBuilder,
        $$AprTipoAtividadeTableTableUpdateCompanionBuilder,
        (AprTipoAtividadeTableData, $$AprTipoAtividadeTableTableReferences),
        AprTipoAtividadeTableData,
        PrefetchHooks Function({bool tipoAtividadeId, bool aprId})>;
typedef $$AprPreenchidaTableTableCreateCompanionBuilder
    = AprPreenchidaTableCompanion Function({
  Value<int> id,
  required String atividadeId,
  required String aprId,
  required String usuarioId,
  required DateTime dataPreenchimento,
});
typedef $$AprPreenchidaTableTableUpdateCompanionBuilder
    = AprPreenchidaTableCompanion Function({
  Value<int> id,
  Value<String> atividadeId,
  Value<String> aprId,
  Value<String> usuarioId,
  Value<DateTime> dataPreenchimento,
});

final class $$AprPreenchidaTableTableReferences extends BaseReferences<
    _$AppDatabase, $AprPreenchidaTableTable, AprPreenchidaTableData> {
  $$AprPreenchidaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AtividadeTableTable _atividadeIdTable(_$AppDatabase db) =>
      db.atividadeTable.createAlias($_aliasNameGenerator(
          db.aprPreenchidaTable.atividadeId, db.atividadeTable.uuid));

  $$AtividadeTableTableProcessedTableManager get atividadeId {
    final manager = $$AtividadeTableTableTableManager($_db, $_db.atividadeTable)
        .filter((f) => f.uuid($_item.atividadeId));
    final item = $_typedResult.readTableOrNull(_atividadeIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $AprTableTable _aprIdTable(_$AppDatabase db) =>
      db.aprTable.createAlias(
          $_aliasNameGenerator(db.aprPreenchidaTable.aprId, db.aprTable.uuid));

  $$AprTableTableProcessedTableManager get aprId {
    final manager = $$AprTableTableTableManager($_db, $_db.aprTable)
        .filter((f) => f.uuid($_item.aprId));
    final item = $_typedResult.readTableOrNull(_aprIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $UsuarioTableTable _usuarioIdTable(_$AppDatabase db) =>
      db.usuarioTable.createAlias($_aliasNameGenerator(
          db.aprPreenchidaTable.usuarioId, db.usuarioTable.uuid));

  $$UsuarioTableTableProcessedTableManager get usuarioId {
    final manager = $$UsuarioTableTableTableManager($_db, $_db.usuarioTable)
        .filter((f) => f.uuid($_item.usuarioId));
    final item = $_typedResult.readTableOrNull(_usuarioIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static MultiTypedResultKey<$AprRespostaTableTable, List<AprRespostaTableData>>
      _aprRespostaTableRefsTable(_$AppDatabase db) =>
          MultiTypedResultKey.fromTable(db.aprRespostaTable,
              aliasName: $_aliasNameGenerator(db.aprPreenchidaTable.id,
                  db.aprRespostaTable.aprPreenchidaId));

  $$AprRespostaTableTableProcessedTableManager get aprRespostaTableRefs {
    final manager =
        $$AprRespostaTableTableTableManager($_db, $_db.aprRespostaTable)
            .filter((f) => f.aprPreenchidaId.id($_item.id));

    final cache =
        $_typedResult.readTableOrNull(_aprRespostaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }

  static MultiTypedResultKey<$AprAssinaturaTableTable,
      List<AprAssinaturaTableData>> _aprAssinaturaTableRefsTable(
          _$AppDatabase db) =>
      MultiTypedResultKey.fromTable(db.aprAssinaturaTable,
          aliasName: $_aliasNameGenerator(
              db.aprPreenchidaTable.id, db.aprAssinaturaTable.aprPreenchidaId));

  $$AprAssinaturaTableTableProcessedTableManager get aprAssinaturaTableRefs {
    final manager =
        $$AprAssinaturaTableTableTableManager($_db, $_db.aprAssinaturaTable)
            .filter((f) => f.aprPreenchidaId.id($_item.id));

    final cache =
        $_typedResult.readTableOrNull(_aprAssinaturaTableRefsTable($_db));
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: cache));
  }
}

class $$AprPreenchidaTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprPreenchidaTableTable> {
  $$AprPreenchidaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get dataPreenchimento => $composableBuilder(
      column: $table.dataPreenchimento,
      builder: (column) => ColumnFilters(column));

  $$AtividadeTableTableFilterComposer get atividadeId {
    final $$AtividadeTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableFilterComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprTableTableFilterComposer get aprId {
    final $$AprTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableFilterComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableFilterComposer get usuarioId {
    final $$UsuarioTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableFilterComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<bool> aprRespostaTableRefs(
      Expression<bool> Function($$AprRespostaTableTableFilterComposer f) f) {
    final $$AprRespostaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.id,
        referencedTable: $db.aprRespostaTable,
        getReferencedColumn: (t) => t.aprPreenchidaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprRespostaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprRespostaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<bool> aprAssinaturaTableRefs(
      Expression<bool> Function($$AprAssinaturaTableTableFilterComposer f) f) {
    final $$AprAssinaturaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.id,
        referencedTable: $db.aprAssinaturaTable,
        getReferencedColumn: (t) => t.aprPreenchidaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprAssinaturaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprAssinaturaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }
}

class $$AprPreenchidaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprPreenchidaTableTable> {
  $$AprPreenchidaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataPreenchimento => $composableBuilder(
      column: $table.dataPreenchimento,
      builder: (column) => ColumnOrderings(column));

  $$AtividadeTableTableOrderingComposer get atividadeId {
    final $$AtividadeTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableOrderingComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprTableTableOrderingComposer get aprId {
    final $$AprTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableOrderingComposer get usuarioId {
    final $$UsuarioTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableOrderingComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprPreenchidaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprPreenchidaTableTable> {
  $$AprPreenchidaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<DateTime> get dataPreenchimento => $composableBuilder(
      column: $table.dataPreenchimento, builder: (column) => column);

  $$AtividadeTableTableAnnotationComposer get atividadeId {
    final $$AtividadeTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.atividadeId,
        referencedTable: $db.atividadeTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AtividadeTableTableAnnotationComposer(
              $db: $db,
              $table: $db.atividadeTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprTableTableAnnotationComposer get aprId {
    final $$AprTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprId,
        referencedTable: $db.aprTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableAnnotationComposer get usuarioId {
    final $$UsuarioTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableAnnotationComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  Expression<T> aprRespostaTableRefs<T extends Object>(
      Expression<T> Function($$AprRespostaTableTableAnnotationComposer a) f) {
    final $$AprRespostaTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.id,
        referencedTable: $db.aprRespostaTable,
        getReferencedColumn: (t) => t.aprPreenchidaId,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprRespostaTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprRespostaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return f(composer);
  }

  Expression<T> aprAssinaturaTableRefs<T extends Object>(
      Expression<T> Function($$AprAssinaturaTableTableAnnotationComposer a) f) {
    final $$AprAssinaturaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.id,
            referencedTable: $db.aprAssinaturaTable,
            getReferencedColumn: (t) => t.aprPreenchidaId,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprAssinaturaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprAssinaturaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return f(composer);
  }
}

class $$AprPreenchidaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AprPreenchidaTableTable,
    AprPreenchidaTableData,
    $$AprPreenchidaTableTableFilterComposer,
    $$AprPreenchidaTableTableOrderingComposer,
    $$AprPreenchidaTableTableAnnotationComposer,
    $$AprPreenchidaTableTableCreateCompanionBuilder,
    $$AprPreenchidaTableTableUpdateCompanionBuilder,
    (AprPreenchidaTableData, $$AprPreenchidaTableTableReferences),
    AprPreenchidaTableData,
    PrefetchHooks Function(
        {bool atividadeId,
        bool aprId,
        bool usuarioId,
        bool aprRespostaTableRefs,
        bool aprAssinaturaTableRefs})> {
  $$AprPreenchidaTableTableTableManager(
      _$AppDatabase db, $AprPreenchidaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprPreenchidaTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AprPreenchidaTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprPreenchidaTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<String> atividadeId = const Value.absent(),
            Value<String> aprId = const Value.absent(),
            Value<String> usuarioId = const Value.absent(),
            Value<DateTime> dataPreenchimento = const Value.absent(),
          }) =>
              AprPreenchidaTableCompanion(
            id: id,
            atividadeId: atividadeId,
            aprId: aprId,
            usuarioId: usuarioId,
            dataPreenchimento: dataPreenchimento,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required String atividadeId,
            required String aprId,
            required String usuarioId,
            required DateTime dataPreenchimento,
          }) =>
              AprPreenchidaTableCompanion.insert(
            id: id,
            atividadeId: atividadeId,
            aprId: aprId,
            usuarioId: usuarioId,
            dataPreenchimento: dataPreenchimento,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AprPreenchidaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {atividadeId = false,
              aprId = false,
              usuarioId = false,
              aprRespostaTableRefs = false,
              aprAssinaturaTableRefs = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [
                if (aprRespostaTableRefs) db.aprRespostaTable,
                if (aprAssinaturaTableRefs) db.aprAssinaturaTable
              ],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (atividadeId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.atividadeId,
                    referencedTable: $$AprPreenchidaTableTableReferences
                        ._atividadeIdTable(db),
                    referencedColumn: $$AprPreenchidaTableTableReferences
                        ._atividadeIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (aprId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.aprId,
                    referencedTable:
                        $$AprPreenchidaTableTableReferences._aprIdTable(db),
                    referencedColumn: $$AprPreenchidaTableTableReferences
                        ._aprIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (usuarioId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.usuarioId,
                    referencedTable:
                        $$AprPreenchidaTableTableReferences._usuarioIdTable(db),
                    referencedColumn: $$AprPreenchidaTableTableReferences
                        ._usuarioIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [
                  if (aprRespostaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprPreenchidaTableTableReferences
                            ._aprRespostaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprPreenchidaTableTableReferences(db, table, p0)
                                .aprRespostaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.aprPreenchidaId == item.id),
                        typedResults: items),
                  if (aprAssinaturaTableRefs)
                    await $_getPrefetchedData(
                        currentTable: table,
                        referencedTable: $$AprPreenchidaTableTableReferences
                            ._aprAssinaturaTableRefsTable(db),
                        managerFromTypedResult: (p0) =>
                            $$AprPreenchidaTableTableReferences(db, table, p0)
                                .aprAssinaturaTableRefs,
                        referencedItemsForCurrentItem:
                            (item, referencedItems) => referencedItems
                                .where((e) => e.aprPreenchidaId == item.id),
                        typedResults: items)
                ];
              },
            );
          },
        ));
}

typedef $$AprPreenchidaTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AprPreenchidaTableTable,
    AprPreenchidaTableData,
    $$AprPreenchidaTableTableFilterComposer,
    $$AprPreenchidaTableTableOrderingComposer,
    $$AprPreenchidaTableTableAnnotationComposer,
    $$AprPreenchidaTableTableCreateCompanionBuilder,
    $$AprPreenchidaTableTableUpdateCompanionBuilder,
    (AprPreenchidaTableData, $$AprPreenchidaTableTableReferences),
    AprPreenchidaTableData,
    PrefetchHooks Function(
        {bool atividadeId,
        bool aprId,
        bool usuarioId,
        bool aprRespostaTableRefs,
        bool aprAssinaturaTableRefs})>;
typedef $$AprRespostaTableTableCreateCompanionBuilder
    = AprRespostaTableCompanion Function({
  Value<int> id,
  required int aprPreenchidaId,
  required String perguntaId,
  required RespostaApr resposta,
  Value<String?> observacao,
});
typedef $$AprRespostaTableTableUpdateCompanionBuilder
    = AprRespostaTableCompanion Function({
  Value<int> id,
  Value<int> aprPreenchidaId,
  Value<String> perguntaId,
  Value<RespostaApr> resposta,
  Value<String?> observacao,
});

final class $$AprRespostaTableTableReferences extends BaseReferences<
    _$AppDatabase, $AprRespostaTableTable, AprRespostaTableData> {
  $$AprRespostaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AprPreenchidaTableTable _aprPreenchidaIdTable(_$AppDatabase db) =>
      db.aprPreenchidaTable.createAlias($_aliasNameGenerator(
          db.aprRespostaTable.aprPreenchidaId, db.aprPreenchidaTable.id));

  $$AprPreenchidaTableTableProcessedTableManager get aprPreenchidaId {
    final manager =
        $$AprPreenchidaTableTableTableManager($_db, $_db.aprPreenchidaTable)
            .filter((f) => f.id($_item.aprPreenchidaId));
    final item = $_typedResult.readTableOrNull(_aprPreenchidaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $AprQuestionTableTable _perguntaIdTable(_$AppDatabase db) =>
      db.aprQuestionTable.createAlias($_aliasNameGenerator(
          db.aprRespostaTable.perguntaId, db.aprQuestionTable.uuid));

  $$AprQuestionTableTableProcessedTableManager get perguntaId {
    final manager =
        $$AprQuestionTableTableTableManager($_db, $_db.aprQuestionTable)
            .filter((f) => f.uuid($_item.perguntaId));
    final item = $_typedResult.readTableOrNull(_perguntaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$AprRespostaTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprRespostaTableTable> {
  $$AprRespostaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnWithTypeConverterFilters<RespostaApr, RespostaApr, String>
      get resposta => $composableBuilder(
          column: $table.resposta,
          builder: (column) => ColumnWithTypeConverterFilters(column));

  ColumnFilters<String> get observacao => $composableBuilder(
      column: $table.observacao, builder: (column) => ColumnFilters(column));

  $$AprPreenchidaTableTableFilterComposer get aprPreenchidaId {
    final $$AprPreenchidaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprPreenchidaId,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprQuestionTableTableFilterComposer get perguntaId {
    final $$AprQuestionTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.perguntaId,
        referencedTable: $db.aprQuestionTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprQuestionTableTableFilterComposer(
              $db: $db,
              $table: $db.aprQuestionTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprRespostaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprRespostaTableTable> {
  $$AprRespostaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get resposta => $composableBuilder(
      column: $table.resposta, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get observacao => $composableBuilder(
      column: $table.observacao, builder: (column) => ColumnOrderings(column));

  $$AprPreenchidaTableTableOrderingComposer get aprPreenchidaId {
    final $$AprPreenchidaTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprPreenchidaId,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$AprQuestionTableTableOrderingComposer get perguntaId {
    final $$AprQuestionTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.perguntaId,
        referencedTable: $db.aprQuestionTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprQuestionTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprQuestionTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprRespostaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprRespostaTableTable> {
  $$AprRespostaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumnWithTypeConverter<RespostaApr, String> get resposta =>
      $composableBuilder(column: $table.resposta, builder: (column) => column);

  GeneratedColumn<String> get observacao => $composableBuilder(
      column: $table.observacao, builder: (column) => column);

  $$AprPreenchidaTableTableAnnotationComposer get aprPreenchidaId {
    final $$AprPreenchidaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.aprPreenchidaId,
            referencedTable: $db.aprPreenchidaTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPreenchidaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPreenchidaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$AprQuestionTableTableAnnotationComposer get perguntaId {
    final $$AprQuestionTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.perguntaId,
        referencedTable: $db.aprQuestionTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprQuestionTableTableAnnotationComposer(
              $db: $db,
              $table: $db.aprQuestionTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprRespostaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AprRespostaTableTable,
    AprRespostaTableData,
    $$AprRespostaTableTableFilterComposer,
    $$AprRespostaTableTableOrderingComposer,
    $$AprRespostaTableTableAnnotationComposer,
    $$AprRespostaTableTableCreateCompanionBuilder,
    $$AprRespostaTableTableUpdateCompanionBuilder,
    (AprRespostaTableData, $$AprRespostaTableTableReferences),
    AprRespostaTableData,
    PrefetchHooks Function({bool aprPreenchidaId, bool perguntaId})> {
  $$AprRespostaTableTableTableManager(
      _$AppDatabase db, $AprRespostaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprRespostaTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AprRespostaTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprRespostaTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> aprPreenchidaId = const Value.absent(),
            Value<String> perguntaId = const Value.absent(),
            Value<RespostaApr> resposta = const Value.absent(),
            Value<String?> observacao = const Value.absent(),
          }) =>
              AprRespostaTableCompanion(
            id: id,
            aprPreenchidaId: aprPreenchidaId,
            perguntaId: perguntaId,
            resposta: resposta,
            observacao: observacao,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int aprPreenchidaId,
            required String perguntaId,
            required RespostaApr resposta,
            Value<String?> observacao = const Value.absent(),
          }) =>
              AprRespostaTableCompanion.insert(
            id: id,
            aprPreenchidaId: aprPreenchidaId,
            perguntaId: perguntaId,
            resposta: resposta,
            observacao: observacao,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AprRespostaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {aprPreenchidaId = false, perguntaId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (aprPreenchidaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.aprPreenchidaId,
                    referencedTable: $$AprRespostaTableTableReferences
                        ._aprPreenchidaIdTable(db),
                    referencedColumn: $$AprRespostaTableTableReferences
                        ._aprPreenchidaIdTable(db)
                        .id,
                  ) as T;
                }
                if (perguntaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.perguntaId,
                    referencedTable:
                        $$AprRespostaTableTableReferences._perguntaIdTable(db),
                    referencedColumn: $$AprRespostaTableTableReferences
                        ._perguntaIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$AprRespostaTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AprRespostaTableTable,
    AprRespostaTableData,
    $$AprRespostaTableTableFilterComposer,
    $$AprRespostaTableTableOrderingComposer,
    $$AprRespostaTableTableAnnotationComposer,
    $$AprRespostaTableTableCreateCompanionBuilder,
    $$AprRespostaTableTableUpdateCompanionBuilder,
    (AprRespostaTableData, $$AprRespostaTableTableReferences),
    AprRespostaTableData,
    PrefetchHooks Function({bool aprPreenchidaId, bool perguntaId})>;
typedef $$AprAssinaturaTableTableCreateCompanionBuilder
    = AprAssinaturaTableCompanion Function({
  Value<int> id,
  required int aprPreenchidaId,
  required String usuarioId,
  required DateTime dataAssinatura,
  required String tecnicoId,
  required Uint8List assinatura,
  Value<String?> assinaturaPath,
});
typedef $$AprAssinaturaTableTableUpdateCompanionBuilder
    = AprAssinaturaTableCompanion Function({
  Value<int> id,
  Value<int> aprPreenchidaId,
  Value<String> usuarioId,
  Value<DateTime> dataAssinatura,
  Value<String> tecnicoId,
  Value<Uint8List> assinatura,
  Value<String?> assinaturaPath,
});

final class $$AprAssinaturaTableTableReferences extends BaseReferences<
    _$AppDatabase, $AprAssinaturaTableTable, AprAssinaturaTableData> {
  $$AprAssinaturaTableTableReferences(
      super.$_db, super.$_table, super.$_typedResult);

  static $AprPreenchidaTableTable _aprPreenchidaIdTable(_$AppDatabase db) =>
      db.aprPreenchidaTable.createAlias($_aliasNameGenerator(
          db.aprAssinaturaTable.aprPreenchidaId, db.aprPreenchidaTable.id));

  $$AprPreenchidaTableTableProcessedTableManager get aprPreenchidaId {
    final manager =
        $$AprPreenchidaTableTableTableManager($_db, $_db.aprPreenchidaTable)
            .filter((f) => f.id($_item.aprPreenchidaId));
    final item = $_typedResult.readTableOrNull(_aprPreenchidaIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $UsuarioTableTable _usuarioIdTable(_$AppDatabase db) =>
      db.usuarioTable.createAlias($_aliasNameGenerator(
          db.aprAssinaturaTable.usuarioId, db.usuarioTable.uuid));

  $$UsuarioTableTableProcessedTableManager get usuarioId {
    final manager = $$UsuarioTableTableTableManager($_db, $_db.usuarioTable)
        .filter((f) => f.uuid($_item.usuarioId));
    final item = $_typedResult.readTableOrNull(_usuarioIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }

  static $TecnicoTableTable _tecnicoIdTable(_$AppDatabase db) =>
      db.tecnicoTable.createAlias($_aliasNameGenerator(
          db.aprAssinaturaTable.tecnicoId, db.tecnicoTable.uuid));

  $$TecnicoTableTableProcessedTableManager get tecnicoId {
    final manager = $$TecnicoTableTableTableManager($_db, $_db.tecnicoTable)
        .filter((f) => f.uuid($_item.tecnicoId));
    final item = $_typedResult.readTableOrNull(_tecnicoIdTable($_db));
    if (item == null) return manager;
    return ProcessedTableManager(
        manager.$state.copyWith(prefetchedData: [item]));
  }
}

class $$AprAssinaturaTableTableFilterComposer
    extends Composer<_$AppDatabase, $AprAssinaturaTableTable> {
  $$AprAssinaturaTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get dataAssinatura => $composableBuilder(
      column: $table.dataAssinatura,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<Uint8List> get assinatura => $composableBuilder(
      column: $table.assinatura, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get assinaturaPath => $composableBuilder(
      column: $table.assinaturaPath,
      builder: (column) => ColumnFilters(column));

  $$AprPreenchidaTableTableFilterComposer get aprPreenchidaId {
    final $$AprPreenchidaTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprPreenchidaId,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableFilterComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableFilterComposer get usuarioId {
    final $$UsuarioTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableFilterComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TecnicoTableTableFilterComposer get tecnicoId {
    final $$TecnicoTableTableFilterComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tecnicoId,
        referencedTable: $db.tecnicoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TecnicoTableTableFilterComposer(
              $db: $db,
              $table: $db.tecnicoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprAssinaturaTableTableOrderingComposer
    extends Composer<_$AppDatabase, $AprAssinaturaTableTable> {
  $$AprAssinaturaTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
      column: $table.id, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get dataAssinatura => $composableBuilder(
      column: $table.dataAssinatura,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<Uint8List> get assinatura => $composableBuilder(
      column: $table.assinatura, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get assinaturaPath => $composableBuilder(
      column: $table.assinaturaPath,
      builder: (column) => ColumnOrderings(column));

  $$AprPreenchidaTableTableOrderingComposer get aprPreenchidaId {
    final $$AprPreenchidaTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.aprPreenchidaId,
        referencedTable: $db.aprPreenchidaTable,
        getReferencedColumn: (t) => t.id,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$AprPreenchidaTableTableOrderingComposer(
              $db: $db,
              $table: $db.aprPreenchidaTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$UsuarioTableTableOrderingComposer get usuarioId {
    final $$UsuarioTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableOrderingComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TecnicoTableTableOrderingComposer get tecnicoId {
    final $$TecnicoTableTableOrderingComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tecnicoId,
        referencedTable: $db.tecnicoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TecnicoTableTableOrderingComposer(
              $db: $db,
              $table: $db.tecnicoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprAssinaturaTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $AprAssinaturaTableTable> {
  $$AprAssinaturaTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<DateTime> get dataAssinatura => $composableBuilder(
      column: $table.dataAssinatura, builder: (column) => column);

  GeneratedColumn<Uint8List> get assinatura => $composableBuilder(
      column: $table.assinatura, builder: (column) => column);

  GeneratedColumn<String> get assinaturaPath => $composableBuilder(
      column: $table.assinaturaPath, builder: (column) => column);

  $$AprPreenchidaTableTableAnnotationComposer get aprPreenchidaId {
    final $$AprPreenchidaTableTableAnnotationComposer composer =
        $composerBuilder(
            composer: this,
            getCurrentColumn: (t) => t.aprPreenchidaId,
            referencedTable: $db.aprPreenchidaTable,
            getReferencedColumn: (t) => t.id,
            builder: (joinBuilder,
                    {$addJoinBuilderToRootComposer,
                    $removeJoinBuilderFromRootComposer}) =>
                $$AprPreenchidaTableTableAnnotationComposer(
                  $db: $db,
                  $table: $db.aprPreenchidaTable,
                  $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
                  joinBuilder: joinBuilder,
                  $removeJoinBuilderFromRootComposer:
                      $removeJoinBuilderFromRootComposer,
                ));
    return composer;
  }

  $$UsuarioTableTableAnnotationComposer get usuarioId {
    final $$UsuarioTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.usuarioId,
        referencedTable: $db.usuarioTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$UsuarioTableTableAnnotationComposer(
              $db: $db,
              $table: $db.usuarioTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }

  $$TecnicoTableTableAnnotationComposer get tecnicoId {
    final $$TecnicoTableTableAnnotationComposer composer = $composerBuilder(
        composer: this,
        getCurrentColumn: (t) => t.tecnicoId,
        referencedTable: $db.tecnicoTable,
        getReferencedColumn: (t) => t.uuid,
        builder: (joinBuilder,
                {$addJoinBuilderToRootComposer,
                $removeJoinBuilderFromRootComposer}) =>
            $$TecnicoTableTableAnnotationComposer(
              $db: $db,
              $table: $db.tecnicoTable,
              $addJoinBuilderToRootComposer: $addJoinBuilderToRootComposer,
              joinBuilder: joinBuilder,
              $removeJoinBuilderFromRootComposer:
                  $removeJoinBuilderFromRootComposer,
            ));
    return composer;
  }
}

class $$AprAssinaturaTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $AprAssinaturaTableTable,
    AprAssinaturaTableData,
    $$AprAssinaturaTableTableFilterComposer,
    $$AprAssinaturaTableTableOrderingComposer,
    $$AprAssinaturaTableTableAnnotationComposer,
    $$AprAssinaturaTableTableCreateCompanionBuilder,
    $$AprAssinaturaTableTableUpdateCompanionBuilder,
    (AprAssinaturaTableData, $$AprAssinaturaTableTableReferences),
    AprAssinaturaTableData,
    PrefetchHooks Function(
        {bool aprPreenchidaId, bool usuarioId, bool tecnicoId})> {
  $$AprAssinaturaTableTableTableManager(
      _$AppDatabase db, $AprAssinaturaTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AprAssinaturaTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AprAssinaturaTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AprAssinaturaTableTableAnnotationComposer(
                  $db: db, $table: table),
          updateCompanionCallback: ({
            Value<int> id = const Value.absent(),
            Value<int> aprPreenchidaId = const Value.absent(),
            Value<String> usuarioId = const Value.absent(),
            Value<DateTime> dataAssinatura = const Value.absent(),
            Value<String> tecnicoId = const Value.absent(),
            Value<Uint8List> assinatura = const Value.absent(),
            Value<String?> assinaturaPath = const Value.absent(),
          }) =>
              AprAssinaturaTableCompanion(
            id: id,
            aprPreenchidaId: aprPreenchidaId,
            usuarioId: usuarioId,
            dataAssinatura: dataAssinatura,
            tecnicoId: tecnicoId,
            assinatura: assinatura,
            assinaturaPath: assinaturaPath,
          ),
          createCompanionCallback: ({
            Value<int> id = const Value.absent(),
            required int aprPreenchidaId,
            required String usuarioId,
            required DateTime dataAssinatura,
            required String tecnicoId,
            required Uint8List assinatura,
            Value<String?> assinaturaPath = const Value.absent(),
          }) =>
              AprAssinaturaTableCompanion.insert(
            id: id,
            aprPreenchidaId: aprPreenchidaId,
            usuarioId: usuarioId,
            dataAssinatura: dataAssinatura,
            tecnicoId: tecnicoId,
            assinatura: assinatura,
            assinaturaPath: assinaturaPath,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (
                    e.readTable(table),
                    $$AprAssinaturaTableTableReferences(db, table, e)
                  ))
              .toList(),
          prefetchHooksCallback: (
              {aprPreenchidaId = false, usuarioId = false, tecnicoId = false}) {
            return PrefetchHooks(
              db: db,
              explicitlyWatchedTables: [],
              addJoins: <
                  T extends TableManagerState<
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic,
                      dynamic>>(state) {
                if (aprPreenchidaId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.aprPreenchidaId,
                    referencedTable: $$AprAssinaturaTableTableReferences
                        ._aprPreenchidaIdTable(db),
                    referencedColumn: $$AprAssinaturaTableTableReferences
                        ._aprPreenchidaIdTable(db)
                        .id,
                  ) as T;
                }
                if (usuarioId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.usuarioId,
                    referencedTable:
                        $$AprAssinaturaTableTableReferences._usuarioIdTable(db),
                    referencedColumn: $$AprAssinaturaTableTableReferences
                        ._usuarioIdTable(db)
                        .uuid,
                  ) as T;
                }
                if (tecnicoId) {
                  state = state.withJoin(
                    currentTable: table,
                    currentColumn: table.tecnicoId,
                    referencedTable:
                        $$AprAssinaturaTableTableReferences._tecnicoIdTable(db),
                    referencedColumn: $$AprAssinaturaTableTableReferences
                        ._tecnicoIdTable(db)
                        .uuid,
                  ) as T;
                }

                return state;
              },
              getPrefetchedDataCallback: (items) async {
                return [];
              },
            );
          },
        ));
}

typedef $$AprAssinaturaTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $AprAssinaturaTableTable,
    AprAssinaturaTableData,
    $$AprAssinaturaTableTableFilterComposer,
    $$AprAssinaturaTableTableOrderingComposer,
    $$AprAssinaturaTableTableAnnotationComposer,
    $$AprAssinaturaTableTableCreateCompanionBuilder,
    $$AprAssinaturaTableTableUpdateCompanionBuilder,
    (AprAssinaturaTableData, $$AprAssinaturaTableTableReferences),
    AprAssinaturaTableData,
    PrefetchHooks Function(
        {bool aprPreenchidaId, bool usuarioId, bool tecnicoId})>;

class $AppDatabaseManager {
  final _$AppDatabase _db;
  $AppDatabaseManager(this._db);
  $$UsuarioTableTableTableManager get usuarioTable =>
      $$UsuarioTableTableTableManager(_db, _db.usuarioTable);
  $$TipoAtividadeTableTableTableManager get tipoAtividadeTable =>
      $$TipoAtividadeTableTableTableManager(_db, _db.tipoAtividadeTable);
  $$GrupoDefeitoEquipamentoTableTableTableManager
      get grupoDefeitoEquipamentoTable =>
          $$GrupoDefeitoEquipamentoTableTableTableManager(
              _db, _db.grupoDefeitoEquipamentoTable);
  $$EquipamentoTableTableTableManager get equipamentoTable =>
      $$EquipamentoTableTableTableManager(_db, _db.equipamentoTable);
  $$AtividadeTableTableTableManager get atividadeTable =>
      $$AtividadeTableTableTableManager(_db, _db.atividadeTable);
  $$SubgrupoDefeitoEquipamentoTableTableTableManager
      get subgrupoDefeitoEquipamentoTable =>
          $$SubgrupoDefeitoEquipamentoTableTableTableManager(
              _db, _db.subgrupoDefeitoEquipamentoTable);
  $$DefeitoTableTableTableManager get defeitoTable =>
      $$DefeitoTableTableTableManager(_db, _db.defeitoTable);
  $$ChecklistPerguntaTableTableTableManager get checklistPerguntaTable =>
      $$ChecklistPerguntaTableTableTableManager(
          _db, _db.checklistPerguntaTable);
  $$AnomaliaTableTableTableManager get anomaliaTable =>
      $$AnomaliaTableTableTableManager(_db, _db.anomaliaTable);
  $$CorrecaoAnomaliaTableTableTableManager get correcaoAnomaliaTable =>
      $$CorrecaoAnomaliaTableTableTableManager(_db, _db.correcaoAnomaliaTable);
  $$ChecklistTableTableTableManager get checklistTable =>
      $$ChecklistTableTableTableManager(_db, _db.checklistTable);
  $$ChecklistPerguntaRelacionamentoTableTableTableManager
      get checklistPerguntaRelacionamentoTable =>
          $$ChecklistPerguntaRelacionamentoTableTableTableManager(
              _db, _db.checklistPerguntaRelacionamentoTable);
  $$ChecklistPreenchidoTableTableTableManager get checklistPreenchidoTable =>
      $$ChecklistPreenchidoTableTableTableManager(
          _db, _db.checklistPreenchidoTable);
  $$ChecklistRespostaTableTableTableManager get checklistRespostaTable =>
      $$ChecklistRespostaTableTableTableManager(
          _db, _db.checklistRespostaTable);
  $$ChecklistTipoAtividadeTableTableTableManager
      get checklistTipoAtividadeTable =>
          $$ChecklistTipoAtividadeTableTableTableManager(
              _db, _db.checklistTipoAtividadeTable);
  $$FormularioMpbbTableTableTableManager get formularioMpbbTable =>
      $$FormularioMpbbTableTableTableManager(_db, _db.formularioMpbbTable);
  $$MedicaoElementoMpbbTableTableTableManager get medicaoElementoMpbbTable =>
      $$MedicaoElementoMpbbTableTableTableManager(
          _db, _db.medicaoElementoMpbbTable);
  $$MpDjFormTableTableTableManager get mpDjFormTable =>
      $$MpDjFormTableTableTableManager(_db, _db.mpDjFormTable);
  $$MpDjPressaoSf6TableTableTableManager get mpDjPressaoSf6Table =>
      $$MpDjPressaoSf6TableTableTableManager(_db, _db.mpDjPressaoSf6Table);
  $$MpDjTempoOperacaoTableTableTableManager get mpDjTempoOperacaoTable =>
      $$MpDjTempoOperacaoTableTableTableManager(
          _db, _db.mpDjTempoOperacaoTable);
  $$MpDjResistenciaContatoTableTableTableManager
      get mpDjResistenciaContatoTable =>
          $$MpDjResistenciaContatoTableTableTableManager(
              _db, _db.mpDjResistenciaContatoTable);
  $$MpDjResistenciaIsolamentoTableTableTableManager
      get mpDjResistenciaIsolamentoTable =>
          $$MpDjResistenciaIsolamentoTableTableTableManager(
              _db, _db.mpDjResistenciaIsolamentoTable);
  $$TecnicoTableTableTableManager get tecnicoTable =>
      $$TecnicoTableTableTableManager(_db, _db.tecnicoTable);
  $$AprTableTableTableManager get aprTable =>
      $$AprTableTableTableManager(_db, _db.aprTable);
  $$AprQuestionTableTableTableManager get aprQuestionTable =>
      $$AprQuestionTableTableTableManager(_db, _db.aprQuestionTable);
  $$AprPerguntaRelacionamentoTableTableTableManager
      get aprPerguntaRelacionamentoTable =>
          $$AprPerguntaRelacionamentoTableTableTableManager(
              _db, _db.aprPerguntaRelacionamentoTable);
  $$AprTipoAtividadeTableTableTableManager get aprTipoAtividadeTable =>
      $$AprTipoAtividadeTableTableTableManager(_db, _db.aprTipoAtividadeTable);
  $$AprPreenchidaTableTableTableManager get aprPreenchidaTable =>
      $$AprPreenchidaTableTableTableManager(_db, _db.aprPreenchidaTable);
  $$AprRespostaTableTableTableManager get aprRespostaTable =>
      $$AprRespostaTableTableTableManager(_db, _db.aprRespostaTable);
  $$AprAssinaturaTableTableTableManager get aprAssinaturaTable =>
      $$AprAssinaturaTableTableTableManager(_db, _db.aprAssinaturaTable);
}
