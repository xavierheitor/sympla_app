import 'package:drift/drift.dart';
import 'package:sympla_app/core/storage/app_database.dart';

/// üìä DTO para configura√ß√µes gerais de medi√ß√µes de resist√™ncia de isolamento
///
/// üîß ESTRUTURA ATUALIZADA:
/// - Configura√ß√µes gerais do ensaio (fixas, n√£o mudam por medi√ß√£o)
/// - Refer√™ncia ao formul√°rio MP DJ
/// - Tens√£o, temperatura e umidade do ambiente
class MedicaoResistenciaIsolamentoTableDto {
  final int? id;
  final int mpDjFormId;

  /// üîß Configura√ß√µes gerais do ensaio (fixas, n√£o mudam por medi√ß√£o)
  final double tensaoKv;
  final double? temperaturaDisjuntor;
  final double? umidadeRelativaAr;

  MedicaoResistenciaIsolamentoTableDto({
    this.id,
    required this.mpDjFormId,
    required this.tensaoKv,
    this.temperaturaDisjuntor,
    this.umidadeRelativaAr,
  });

  factory MedicaoResistenciaIsolamentoTableDto.fromData(MpDjResistenciaIsolamentoTableData data) {
    return MedicaoResistenciaIsolamentoTableDto(
      id: data.id,
      mpDjFormId: data.mpDjFormId,
      tensaoKv: data.tensaoKv,
      temperaturaDisjuntor: data.temperaturaDisjuntor,
      umidadeRelativaAr: data.umidadeRelativaAr,
    );
  }

  MpDjResistenciaIsolamentoTableCompanion toCompanion() {
    return MpDjResistenciaIsolamentoTableCompanion(
      id: id != null ? Value(id!) : const Value.absent(),
      mpDjFormId: Value(mpDjFormId),
      tensaoKv: Value(tensaoKv),
      temperaturaDisjuntor: Value(temperaturaDisjuntor),
      umidadeRelativaAr: Value(umidadeRelativaAr),
    );
  }
}
