import 'package:sympla_app/core/domain/dto/mpbb/formulario_bateria_table_dto.dart';
import 'package:sympla_app/core/domain/dto/mpbb/medicao_elemento_table_dto.dart';
import 'package:sympla_app/core/domain/repositories/abstracts/mpbb_repository.dart';
import 'package:sympla_app/core/errors/error_handler.dart';
import 'package:sympla_app/core/logger/app_logger.dart';

/// üî• Service respons√°vel pela orquestra√ß√£o das opera√ß√µes do formul√°rio MPBB
class MpBbFormService {
  final MpbbRepository mpbbRepository;

  MpBbFormService({required this.mpbbRepository});

  // ---------------------------------------------------------------------------
  // üóÇÔ∏è FORMUL√ÅRIO
  // ---------------------------------------------------------------------------

  /// üîç Busca o formul√°rio de uma atividade.
  Future<FormularioBateriaTableDto?> buscarPorAtividade(
      String atividadeId) async {
    try {
      return await mpbbRepository.buscarFormulario(atividadeId);
    } catch (e, s) {
      final erro = ErrorHandler.tratar(e, s);
      AppLogger.e('[MpBbFormService - buscarPorAtividade] ${erro.mensagem}',
          error: e, stackTrace: s);
      rethrow;
    }
  }

  /// üîç Busca as medi√ß√µes de um formul√°rio pelo ID.
  Future<List<MedicaoElementoMpbbTableDto>> buscarMedicoes(
      int formularioId) async {
    try {
      return await mpbbRepository.getByFormularioId(formularioId);
    } catch (e, s) {
      final erro = ErrorHandler.tratar(e, s);
      AppLogger.e('[MpBbFormService - buscarMedicoes] ${erro.mensagem}',
          error: e, stackTrace: s);
      rethrow;
    }
  }

  /// üíæ Salva um formul√°rio e suas medi√ß√µes associadas.
  ///
  /// ‚ö†Ô∏è Se j√° houver um formul√°rio para essa atividade, ele ser√° deletado antes.
  Future<void> salvarFormulario(
    FormularioBateriaTableDto formulario,
    List<MedicaoElementoMpbbTableDto> medicoes,
  ) async {
    try {
      AppLogger.d(
          '[MpBbFormService] Salvando formul√°rio da atividade ${formulario.atividadeId} e ${medicoes.length} medi√ß√µes.');

      // üî• Remove dados antigos para garantir consist√™ncia.
      await mpbbRepository.deleteByAtividadeId(formulario.atividadeId);

      // üíæ Salva o formul√°rio.
      await mpbbRepository.salvarFormulario(formulario);

      // üíæ Salva as medi√ß√µes associadas.
      await mpbbRepository.insertAll(medicoes);

      AppLogger.d(
          '[MpBbFormService] Formul√°rio e medi√ß√µes salvos com sucesso.');
    } catch (e, s) {
      final erro = ErrorHandler.tratar(e, s);
      AppLogger.e('[MpBbFormService - salvarFormulario] ${erro.mensagem}',
          error: e, stackTrace: s);
      rethrow;
    }
  }

  /// üóëÔ∏è Deleta o formul√°rio vinculado √† atividade.
  Future<void> deletarFormulario(String atividadeId) async {
    try {
      AppLogger.d(
          '[MpBbFormService] Deletando formul√°rio da atividade $atividadeId');
      await mpbbRepository.deleteByAtividadeId(atividadeId);
    } catch (e, s) {
      final erro = ErrorHandler.tratar(e, s);
      AppLogger.e('[MpBbFormService - deletarFormulario] ${erro.mensagem}',
          error: e, stackTrace: s);
      rethrow;
    }
  }
}
